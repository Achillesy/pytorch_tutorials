.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_beginner_transfer_learning_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning for Computer Vision Tutorial
==============================================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train a convolutional neural network for
image classification using transfer learning. You can read more about the transfer
learning at `cs231n notes <https://cs231n.github.io/transfer-learning/>`__

Quoting these notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios look as follows:

-  **Finetuning the convnet**: Instead of random initialization, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.



.. code-block:: default

    # License: BSD
    # Author: Sasank Chilamkurthy

    from __future__ import print_function, division

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.optim import lr_scheduler
    import torch.backends.cudnn as cudnn
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import os
    import copy

    cudnn.benchmark = True
    plt.ion()   # interactive mode







Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.


.. code-block:: default


    # Data augmentation and normalization for training
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomResizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'data/hymenoptera_data'
    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x])
                      for x in ['train', 'val']}
    dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                                 shuffle=True, num_workers=4)
                  for x in ['train', 'val']}
    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
    class_names = image_datasets['train'].classes

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")







Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.


.. code-block:: default


    def imshow(inp, title=None):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1)
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dataloaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[class_names[x] for x in classes])





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
    :class: sphx-glr-single-img




Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving the best model

In the following, parameter ``scheduler`` is an LR scheduler object from
``torch.optim.lr_scheduler``.


.. code-block:: default



    def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
        since = time.time()

        best_model_wts = copy.deepcopy(model.state_dict())
        best_acc = 0.0

        for epoch in range(num_epochs):
            print('Epoch {}/{}'.format(epoch, num_epochs - 1))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    model.train()  # Set model to training mode
                else:
                    model.eval()   # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for inputs, labels in dataloaders[phase]:
                    inputs = inputs.to(device)
                    labels = labels.to(device)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    # track history if only in train
                    with torch.set_grad_enabled(phase == 'train'):
                        outputs = model(inputs)
                        _, preds = torch.max(outputs, 1)
                        loss = criterion(outputs, labels)

                        # backward + optimize only if in training phase
                        if phase == 'train':
                            loss.backward()
                            optimizer.step()

                    # statistics
                    running_loss += loss.item() * inputs.size(0)
                    running_corrects += torch.sum(preds == labels.data)
                if phase == 'train':
                    scheduler.step()

                epoch_loss = running_loss / dataset_sizes[phase]
                epoch_acc = running_corrects.double() / dataset_sizes[phase]

                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model_wts = copy.deepcopy(model.state_dict())

            print()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best val Acc: {:4f}'.format(best_acc))

        # load best model weights
        model.load_state_dict(best_model_wts)
        return model








Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images



.. code-block:: default


    def visualize_model(model, num_images=6):
        was_training = model.training
        model.eval()
        images_so_far = 0
        fig = plt.figure()

        with torch.no_grad():
            for i, (inputs, labels) in enumerate(dataloaders['val']):
                inputs = inputs.to(device)
                labels = labels.to(device)

                outputs = model(inputs)
                _, preds = torch.max(outputs, 1)

                for j in range(inputs.size()[0]):
                    images_so_far += 1
                    ax = plt.subplot(num_images//2, 2, images_so_far)
                    ax.axis('off')
                    ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                    imshow(inputs.cpu().data[j])

                    if images_so_far == num_images:
                        model.train(mode=was_training)
                        return
            model.train(mode=was_training)







Finetuning the convnet
----------------------

Load a pretrained model and reset final fully connected layer.



.. code-block:: default


    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    # Here the size of each output sample is set to 2.
    # Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
    model_ft.fc = nn.Linear(num_ftrs, 2)

    model_ft = model_ft.to(device)

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)







Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.



.. code-block:: default


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Epoch 0/24
    ----------
    train Loss: 0.5117 Acc: 0.7336
    val Loss: 0.2320 Acc: 0.9150

    Epoch 1/24
    ----------
    train Loss: 0.4467 Acc: 0.8033
    val Loss: 0.2327 Acc: 0.9085

    Epoch 2/24
    ----------
    train Loss: 0.4830 Acc: 0.8238
    val Loss: 0.4665 Acc: 0.8170

    Epoch 3/24
    ----------
    train Loss: 0.3912 Acc: 0.8402
    val Loss: 0.1928 Acc: 0.9085

    Epoch 4/24
    ----------
    train Loss: 0.6553 Acc: 0.7787
    val Loss: 0.3030 Acc: 0.8693

    Epoch 5/24
    ----------
    train Loss: 0.6081 Acc: 0.7623
    val Loss: 0.3476 Acc: 0.8889

    Epoch 6/24
    ----------
    train Loss: 0.7247 Acc: 0.7869
    val Loss: 0.3259 Acc: 0.8562

    Epoch 7/24
    ----------
    train Loss: 0.3747 Acc: 0.8361
    val Loss: 0.2900 Acc: 0.8954

    Epoch 8/24
    ----------
    train Loss: 0.3340 Acc: 0.8648
    val Loss: 0.2249 Acc: 0.9020

    Epoch 9/24
    ----------
    train Loss: 0.3230 Acc: 0.8525
    val Loss: 0.2212 Acc: 0.9281

    Epoch 10/24
    ----------
    train Loss: 0.2871 Acc: 0.8934
    val Loss: 0.1997 Acc: 0.9216

    Epoch 11/24
    ----------
    train Loss: 0.3142 Acc: 0.8607
    val Loss: 0.2262 Acc: 0.9085

    Epoch 12/24
    ----------
    train Loss: 0.2838 Acc: 0.8811
    val Loss: 0.2256 Acc: 0.9085

    Epoch 13/24
    ----------
    train Loss: 0.3322 Acc: 0.8566
    val Loss: 0.2292 Acc: 0.8954

    Epoch 14/24
    ----------
    train Loss: 0.2954 Acc: 0.8730
    val Loss: 0.2537 Acc: 0.9085

    Epoch 15/24
    ----------
    train Loss: 0.3627 Acc: 0.8320
    val Loss: 0.2079 Acc: 0.9281

    Epoch 16/24
    ----------
    train Loss: 0.3643 Acc: 0.8402
    val Loss: 0.2207 Acc: 0.9150

    Epoch 17/24
    ----------
    train Loss: 0.2722 Acc: 0.8934
    val Loss: 0.2183 Acc: 0.9346

    Epoch 18/24
    ----------
    train Loss: 0.3156 Acc: 0.8811
    val Loss: 0.2320 Acc: 0.8954

    Epoch 19/24
    ----------
    train Loss: 0.1883 Acc: 0.9262
    val Loss: 0.2133 Acc: 0.9085

    Epoch 20/24
    ----------
    train Loss: 0.3362 Acc: 0.8607
    val Loss: 0.2333 Acc: 0.9150

    Epoch 21/24
    ----------
    train Loss: 0.2399 Acc: 0.9057
    val Loss: 0.2119 Acc: 0.9150

    Epoch 22/24
    ----------
    train Loss: 0.2966 Acc: 0.8689
    val Loss: 0.2197 Acc: 0.9085

    Epoch 23/24
    ----------
    train Loss: 0.2395 Acc: 0.9221
    val Loss: 0.2200 Acc: 0.9085

    Epoch 24/24
    ----------
    train Loss: 0.2453 Acc: 0.8852
    val Loss: 0.2063 Acc: 0.9216

    Training complete in 1m 10s
    Best val Acc: 0.934641



.. code-block:: default


    visualize_model(model_ft)





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
    :class: sphx-glr-single-img




ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad = False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <https://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.



.. code-block:: default


    model_conv = torchvision.models.resnet18(pretrained=True)
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    model_conv = model_conv.to(device)

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opposed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)








Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.



.. code-block:: default


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Epoch 0/24
    ----------
    train Loss: 0.5719 Acc: 0.6721
    val Loss: 0.3249 Acc: 0.8758

    Epoch 1/24
    ----------
    train Loss: 0.4012 Acc: 0.7828
    val Loss: 0.2847 Acc: 0.8954

    Epoch 2/24
    ----------
    train Loss: 0.4326 Acc: 0.7869
    val Loss: 0.2166 Acc: 0.9216

    Epoch 3/24
    ----------
    train Loss: 0.3851 Acc: 0.8361
    val Loss: 0.2870 Acc: 0.9020

    Epoch 4/24
    ----------
    train Loss: 0.5925 Acc: 0.7582
    val Loss: 0.6019 Acc: 0.8039

    Epoch 5/24
    ----------
    train Loss: 0.4371 Acc: 0.8279
    val Loss: 0.3870 Acc: 0.8824

    Epoch 6/24
    ----------
    train Loss: 0.3781 Acc: 0.8361
    val Loss: 0.1718 Acc: 0.9477

    Epoch 7/24
    ----------
    train Loss: 0.4058 Acc: 0.8279
    val Loss: 0.1841 Acc: 0.9477

    Epoch 8/24
    ----------
    train Loss: 0.3471 Acc: 0.8484
    val Loss: 0.1954 Acc: 0.9542

    Epoch 9/24
    ----------
    train Loss: 0.3809 Acc: 0.8033
    val Loss: 0.1890 Acc: 0.9477

    Epoch 10/24
    ----------
    train Loss: 0.4037 Acc: 0.8197
    val Loss: 0.1925 Acc: 0.9412

    Epoch 11/24
    ----------
    train Loss: 0.3540 Acc: 0.8402
    val Loss: 0.1815 Acc: 0.9477

    Epoch 12/24
    ----------
    train Loss: 0.3471 Acc: 0.8607
    val Loss: 0.1877 Acc: 0.9477

    Epoch 13/24
    ----------
    train Loss: 0.3240 Acc: 0.8443
    val Loss: 0.1818 Acc: 0.9477

    Epoch 14/24
    ----------
    train Loss: 0.3520 Acc: 0.8402
    val Loss: 0.2039 Acc: 0.9477

    Epoch 15/24
    ----------
    train Loss: 0.3599 Acc: 0.8566
    val Loss: 0.1871 Acc: 0.9542

    Epoch 16/24
    ----------
    train Loss: 0.3194 Acc: 0.8689
    val Loss: 0.2118 Acc: 0.9542

    Epoch 17/24
    ----------
    train Loss: 0.3563 Acc: 0.8361
    val Loss: 0.1806 Acc: 0.9542

    Epoch 18/24
    ----------
    train Loss: 0.3107 Acc: 0.8607
    val Loss: 0.1848 Acc: 0.9477

    Epoch 19/24
    ----------
    train Loss: 0.3424 Acc: 0.8566
    val Loss: 0.1787 Acc: 0.9542

    Epoch 20/24
    ----------
    train Loss: 0.2854 Acc: 0.8689
    val Loss: 0.1910 Acc: 0.9412

    Epoch 21/24
    ----------
    train Loss: 0.3487 Acc: 0.8402
    val Loss: 0.1927 Acc: 0.9477

    Epoch 22/24
    ----------
    train Loss: 0.3754 Acc: 0.8197
    val Loss: 0.1972 Acc: 0.9477

    Epoch 23/24
    ----------
    train Loss: 0.3457 Acc: 0.8443
    val Loss: 0.1859 Acc: 0.9477

    Epoch 24/24
    ----------
    train Loss: 0.3687 Acc: 0.8361
    val Loss: 0.1768 Acc: 0.9542

    Training complete in 0m 46s
    Best val Acc: 0.954248



.. code-block:: default


    visualize_model(model_conv)

    plt.ioff()
    plt.show()




.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
    :class: sphx-glr-single-img




Further Learning
-----------------

If you would like to learn more about the applications of transfer learning,
checkout our `Quantized Transfer Learning for Computer Vision Tutorial <https://pytorch.org/tutorials/intermediate/quantized_transfer_learning_tutorial.html>`_.




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  4.647 seconds)


.. _sphx_glr_download_beginner_transfer_learning_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
