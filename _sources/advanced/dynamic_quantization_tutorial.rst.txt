.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'the' b'fault' b'of' b'training' b'plum' b'relaxation' b',' b'including' b'Las' b'One' b'as' b'lovers' b',' b'ships' b'to' b'act' b'\xe2\x80\x94' b'cycles' b',' b'<unk>'
    b'boilers' b'and' b'social' b'flesh' b'.' b'<eos>' b'In' b'the' b'IUCN' b',' b'many' b'of' b'his' b'five' b'novels' b'in' b'forests' b'have' b'<unk>' b','
    b'Russia' b',' b'chemical' b'Dakota' b',' b'and' b'ribosomes' b'his' b'religious' b'composers' b',' b'they' b'<unk>' b'but' b'often' b'failed' b'to' b'be' b'any' b'distinct'
    b'to' b'be' b'effective' b'since' b'more' b'.' b'While' b'a' b'verse' b'must' b'have' b'been' b'in' b'its' b'hands' b'support' b',' b'the' b'MCC' b'were'
    b'caught' b'during' b'the' b'rupture' b'sets' b'.' b'<unk>' b'has' b'completing' b'to' b'absorb' b'Parliamentary' b',' b'before' b'which' b'realistic' b'with' b'large' b'an' b'planet'
    b',' b'orchestral' b'skin' b'stations' b',' b'and' b'transports' b'Princess' b'@-@' b'Europos' b',' b'includes' b'structural' b',' b'Ontario' b',' b'not' b'consulted' b'by' b'separate'
    b'@-@' b'fitting' b'lines' b'.' b'<eos>' b'The' b'common' b'starling' b'arrangement' b'accelerated' b'Torquay' b'where' b'it' b'is' b'an' b'title' b'of' b'Veerashaiva' b'Exodus' b'for'
    b'southern' b':' b'bony' b'occupation' b'.' b'It' b'is' b'fed' b',' b'where' b'others' b'has' b'never' b'strongly' b'fallen' b'in' b'any' b'heat' b',' b'Sweden'
    b',' b'percentages' b',' b'nails' b',' b'and' b'heaven' b'infiltrate' b',' b'which' b'showed' b'journey' b'of' b'special' b',' b'often' b'though' b'when' b'in' b'some'
    b'countries' b'element' b'even' b'used' b',' b'if' b'trying' b'to' b'symbolize' b'the' b'ranking' b'race' b',' b'they' b'are' b'hoped' b',' b'find' b'them' b'back'
    b'to' b'hairs' b'.' b'The' b'largest' b'republican' b'Greek' b'consequences' b'with' b'its' b'body' b'is' b'the' b'first' b'female' b'organized' b'theological' b'crops' b',' b'and'
    b'taking' b'how' b'the' b'kakapo' b'approaches' b'its' b'closest' b'image' b'for' b'Foot' b'to' b'row' b'a' b'sense' b'into' b'$' b'6' b'@,@' b'000' b'.'
    b'It' b'takes' b'similar' b'drug' b'characteristics' b'in' b'very' b'accurate' b'areas' b',' b'whereas' b'one' b'cricketers' b'were' b'serialised' b'into' b'their' b'seat' b'.' b'The'
    b'state' b'encouraged' b'normally' b'with' b'increasing' b'fauna' b'.' b'In' b'particular' b',' b'connection' b'from' b'fruit' b',' b'the' b'least' b'elements' b'are' b'<unk>' b'began'
    b'to' b'have' b'caused' b'it' b'to' b'fold' b'by' b'mixing' b'or' b'Stacee' b'how' b'Homarus' b'developed' b'in' b'several' b'areas' b',' b'that' b'<unk>' b'in'
    b'Pts' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Personnel' b'=' b'=' b'<eos>' b'<eos>' b'As' b'zero' b',' b'it' b'cult' b'complicating' b'geographic' b'with' b'dry'
    b'soft' b'literacy' b'Parade' b',' b'especially' b'of' b'females' b'were' b'faster' b'100' b'light' b'(' b'e.g.' b'Z.' b'm' b')' b'in' b'which' b'34' b'@.@'
    b'0' b'%' b'ago' b'is' b'located' b'.' b'<eos>' b'From' b'what' b'pectoral' b'the' b'ba' b'of' b'herpes' b',' b'American' b'in' b'nitrogen' b'development' b','
    b'when' b'the' b'female' b'is' b'dominated' b'by' b'<unk>' b'aged' b'sacred' b',' b'in' b'DAGs' b',' b'<unk>' b'kakapo' b',' b'Saurolophus' b'sulfur' b'carriages' b'('
    b'typically' b'typically' b'called' b'human' b'and' b'eye' b',' b'total' b'of' b'most' b'of' b'the' b'two' b'invalid' b'visibility' b')' b'.' b'<eos>' b'The' b'most'
    b'common' b'ecosystems' b'in' b'history' b'is' b'being' b'adopted' b'from' b'proposed' b',' b'across' b'which' b'they' b'reflect' b'that' b'found' b'trust' b'with' b'<unk>' b'.'
    b'Li' b'D.' b'<unk>' b'(' b'India' b')' b'is' b'probably' b'Horus' b'of' b'several' b'large' b'Panama' b'Charity' b'languages' b',' b'which' b'shall' b'be' b'replaced'
    b'inherit' b'by' b'language' b',' b'which' b'may' b'be' b'found' b'by' b'Supplemental' b'<unk>' b',' b'they' b'close' b'the' b'results' b'.' b'Due' b'to' b'<unk>'
    b'(' b'276' b'magical' b'Anglesey' b',' b'Zoological' b'cruzi' b')' b'forms' b'tributaries' b'of' b'300' b'cm' b'.' b'Near' b'the' b'densely' b'maintain' b'update' b'of'
    b'rectangular' b',' b'<unk>' b'and' b'color' b'were' b'reinforced' b'.' b'Despite' b'reminiscent' b'else' b',' b'it' b'has' b'also' b'been' b'mentioned' b'in' b'entering' b'0'
    b'@.@' b'8' b'%' b',' b'often' b'only' b'.' b'At' b'least' b'five' b'months' b',' b'they' b'were' b'named' b'.' b'The' b'San' b'globular' b'composer'
    b'is' b'Ready' b'by' b'1891' b',' b'and' b'very' b'massive' b'spots' b'formally' b'actually' b'do' b'during' b'close' b'to' b'26' b'@,@' b'000' b'birds' b'across'
    b'the' b'2011' b'season' b'.' b'In' b'the' b'hardest' b',' b'that' b'hill' b'can' b'be' b'meant' b'by' b'Rhodesian' b'to' b'air' b',' b'he' b'may'
    b'find' b'eliminating' b'into' b'temperature' b'up' b'.' b'<eos>' b'Within' b'particularly' b'eight' b'females' b'before' b'this' b'increase' b'has' b'been' b'connected' b'to' b'dubium' b'.'
    b'Only' b'individuals' b'cause' b'birds' b'or' b'the' b'common' b'amateurs' b'.' b'He' b'is' b'brought' b'to' b'study' b'in' b'destinations' b',' b'growing' b',' b'young'
    b',' b'catchy' b',' b'and' b'wintering' b'.' b'In' b'well' b',' b'they' b'involve' b'the' b'influence' b'with' b'now' b'cow' b'genetic' b'spots' b'such' b'as'
    b'crops' b'.' b'<unk>' b'shape' b'has' b'been' b'inspired' b'by' b'<unk>' b'migrants' b'and' b'that' b'players' b'can' b'grow' b'on' b'the' b'territory' b',' b'which'
    b'do' b'not' b'find' b'anything' b'membrane' b'.' b'They' b'usually' b'takes' b'over' b'10' b'million' b'men' b',' b'or' b'a' b'additional' b'range' b'predators' b'.'
    b'At' b'this' b'point' b',' b'it' b'is' b'occasional' b'able' b'of' b'nests' b'.' b'According' b'to' b'<unk>' b',' b'the' b'this' b'reason' b'is' b'it'
    b'for' b'a' b'discourse' b'or' b'that' b'of' b'the' b'killing' b'populations' b'than' b'Inti' b'.' b'<eos>' b'The' b'true' b'starling' b'of' b'this' b'species' b'is'
    b'brought' b'to' b'a' b'pharaoh' b'though' b'most' b'common' b'Irish' b'<unk>' b'may' b'a' b'similar' b'medium' b'cycle' b'of' b'stripes' b'.' b'<eos>' b'Mycena' b'Cage'
    b',' b'David' b',' b'is' b'usually' b'said' b'to' b'be' b'<unk>' b'.' b'It' b'was' b'believed' b'that' b'Whatever' b'and' b'emerge' b'to' b'Balad' b'156th'
    b'and' b'Muslims' b'due' b'to' b'also' b'worthless' b'or' b'Dhrupad' b'lines' b',' b'blood' b'dolls' b'should' b'not' b'be' b'transmitted' b'down' b'.' b'When' b'by'
    b'about' b'six' b'years' b'from' b'in' b'the' b'nest' b',' b'they' b'are' b'other' b',' b'and' b'is' b'usually' b'required' b'to' b'extend' b'any' b'field'
    b'point' b'after' b'other' b'<unk>' b'<unk>' b'.' b'Critic' b'wakes' b'the' b'female' b'of' b'Defence' b'to' b'<unk>' b'south' b'of' b'Conservation' b"'s" b'beak' b'.'
    b'<eos>' b'Qualifying' b'hoped' b'sodium' b'was' b'likely' b'by' b'fairy' b'DNA' b',' b'where' b'they' b'microscopic' b'capture' b'microscopy' b'tutors' b'.' b'<eos>' b'Over' b'over'
    b'one' b'million' b'birds' b',' b'this' b'may' b'be' b'sufficient' b'to' b'prevent' b'condoms' b'histones' b'.' b'Overall' b',' b'the' b'kakapo' b'population' b'antibody' b'called'
    b'9' b'groupings' b'more' b'<unk>' b'.' b'Attacks' b'<unk>' b'from' b'stiff' b'behaviour' b'thus' b'do' b'not' b'turn' b'tunnel' b',' b'forcing' b'it' b'of' b'heterochromatin'
    b',' b'as' b'they' b'manage' b'employing' b'equal' b'shelling' b'.' b'There' b'are' b'rise' b'to' b'humans' b',' b'such' b'as' b'trouble' b'(' b'wives' b')'
    b',' b'and' b'their' b'small' b'deity' b',' b'resting' b'as' b'common' b',' b'or' b'yellow' b'distinct' b'tuk' b'.' b'Some' b'actions' b'have' b'also' b'actively'
    b'cited' b'the' b'size' b'of' b'<unk>' b',' b'theme' b'that' b'South' b'America' b'were' b'presented' b'to' b'agency' b'of' b'sea' b',' b'or' b'other' b'care'
    b'of' b'common' b'diet' b'.' b'Australia' b'are' b'very' b'common' b'yellow' b',' b'and' b'may' b'be' b'more' b'<unk>' b'.' b'Other' b'have' b'been' b'dorsal'
    b'and' b'responsible' b'.' b'The' b'eggs' b'sometimes' b'attributed' b'to' b'low' b'trees' b',' b'occasionally' b'to' b'give' b'factors' b'.' b'As' b'they' b'do' b'so'
    b'call' b'other' b'neutron' b'harsh' b'activity' b',' b'sometimes' b',' b'they' b'forced' b'<unk>' b',' b'London' b',' b'days' b',' b'posed' b'southeast' b'the' b'<unk>'
    b'game' b'.' b'<eos>' b'<unk>' b'or' b'746' b'hydrolysis' b'have' b'two' b'falcon' b'engineers' b'to' b'be' b'more' b'identical' b'.' b'<eos>' b'<eos>' b'=' b'='


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 187.0
    loss: 5.168
    elapsed time (seconds): 101.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  55.482 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
