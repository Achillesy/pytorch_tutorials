.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'1990s' b',' b'and' b'played' b'it' b'is' b'Rh\xc3\xb4ne' b'for' b'England' b',' b'and' b'those' b'of' b'these' b'more' b'<unk>' b'countries' b'Listed' b'to' b'106'
    b'beds' b'.' b'Prior' b'to' b'Nikki' b'in' b'her' b'Adventure' b'Formation' b',' b'<unk>' b'@-@' b'Wellington' b'(' b'1100' b')' b',' b'indecent' b',' b'and'
    b'two' b'other' b'intermediate' b'agent' b'inclusion' b'they' b'may' b'indicate' b'found' b'each' b'of' b'few' b'or' b'rise' b'only' b'taking' b'in' b'place' b'respectively' b'.'
    b'<eos>' b'In' b'1996' b',' b'Mosley' b'rushed' b'again' b'<unk>' b',' b'colourful' b',' b'<unk>' b',' b'and' b'burned' b'appeal' b'to' b'insects' b'in' b'action'
    b'.' b'There' b'was' b'worse' b'reports' b'of' b'totals' b'and' b'body' b'techniques' b'.' b'A' b'separate' b'impact' b'from' b'challenge' b'in' b'chicks' b',' b'including'
    b'Joe' b'Boom' b',' b'is' b'a' b'inspiration' b'to' b'diver' b'broke' b'down' b';' b'relatively' b'rainfall' b'produced' b'<unk>' b'them' b'extinction' b'.' b'When' b'it'
    b'is' b'and' b'long' b',' b'these' b'countries' b'controller' b'sometimes' b'have' b'involved' b'a' b'name' b'of' b'Mars' b'or' b'soul' b',' b'rocks' b'(' b'such'
    b'as' b'<unk>' b')' b'or' b'limited' b'images' b'of' b'travels' b'for' b'their' b'terrace' b',' b'the' b'collection' b'are' b'<unk>' b',' b'and' b'suppressed' b'three'
    b'on' b'the' b'female' b',' b'Cyanide' b',' b'<unk>' b',' b'has' b'a' b'small' b'appearance' b'for' b'a' b'<unk>' b'rightly' b',' b'because' b'remuneration' b'defeat'
    b'are' b'capable' b'of' b'louder' b'large' b'translation' b'.' b'It' b'describes' b'tailed' b'treason' b',' b'which' b'are' b'a' b'key' b'dubium' b'level' b',' b'catching'
    b'Ceres' b',' b'also' b'kept' b'around' b'20' b'@.@' b'4' b'%' b'per' b'million' b',' b'in' b'which' b'it' b'appears' b',' b'with' b'structural' b'shape'
    b',' b'<unk>' b',' b'video' b',' b'membrane' b'and' b'open' b',' b'by' b'fewer' b'shops' b'near' b'his' b'head' b'.' b'<unk>' b',' b'one' b'of'
    b'the' b'tallest' b'parts' b'of' b'the' b'moon' b',' b'continue' b'their' b'mind' b',' b'particularly' b'kind' b'in' b'it' b',' b'<unk>' b',' b'<unk>' b','
    b'and' b'Ravidas' b'.' b'<unk>' b'<unk>' b'called' b'"' b'<unk>' b'/' b'SF' b'"' b',' b'any' b'level' b'disappear' b'it' b'may' b'not' b'be' b'determined'
    b',' b'just' b'where' b'they' b'were' b'liquid' b'.' b'This' b'thought' b'may' b'be' b'gifts' b'of' b'the' b'2009' b'mammalian' b'amounts' b'of' b'food' b'<unk>'
    b',' b'<unk>' b',' b'<unk>' b'tyres' b',' b'Clare' b',' b'and' b'anti' b'@-@' b'languages' b'<unk>' b'<unk>' b'The' b'The' b'2004' b'Case' b'complex' b'looms'
    b'<unk>' b',' b'the' b'Mindy' b'<unk>' b'and' b'ABC' b'of' b'Southampton' b'in' b'whistling' b'habitats' b'.' b'<eos>' b'One' b'independence' b'include' b'prosecutors' b'in' b'Denham'
    b'can' b'be' b'seen' b'to' b'have' b'another' b'major' b'rate' b'at' b'a' b'sloping' b'or' b'other' b'emergency' b'takes' b'than' b'it' b',' b'and' b'there'
    b'is' b'more' b'significant' b'fresh' b'authority' b'where' b'the' b'same' b'arc' b'.' b'intermediate' b'study' b',' b'these' b'other' b'foods' b'and' b'minor' b'cell' b'groups'
    b'will' b'be' b'casino' b'.' b'Consequently' b',' b'<unk>' b',' b'the' b'heaviest' b'forests' b'found' b',' b'hunger' b',' b'stripe' b',' b'by' b'organic' b'tissue'
    b',' b'often' b'filled' b'in' b'regions' b'or' b'using' b'the' b'addition' b'of' b'limbs' b'.' b'This' b'IAAF' b'Immortals' b'is' b'bred' b'against' b'a' b'Garuda'
    b',' b'which' b'vehicle' b'its' b'depiction' b'to' b'rice' b',' b'but' b'much' b'only' b'found' b'it' b'in' b'her' b'conclusions' b'.' b'Under' b'one' b'of'
    b'the' b'threatened' b'is' b'standing' b'outside' b'bank' b',' b'has' b'on' b'<unk>' b',' b'with' b'their' b'85' b'of' b'woodland' b'deaths' b',' b'or' b'precarious'
    b',' b'government' b',' b'or' b'temperate' b'species' b',' b'underwater' b'males' b'some' b'hand' b'call' b',' b'growing' b'or' b'up' b'one' b'estate' b'.' b'There'
    b'can' b'be' b'land' b'on' b'which' b'they' b'are' b'descend' b'as' b'they' b'numbers' b'on' b'on' b'some' b'wild' b'habitats' b'are' b'cooked' b'of' b'birds'
    b'.' b'These' b'clearer' b'have' b'a' b'very' b'mature' b'tradition' b'in' b'size' b',' b'and' b'the' b'female' b'is' b'also' b'very' b'stronger' b'in' b'the'
    b'last' b'.' b'The' b'food' b'involves' b'Guru' b'black' b'pathways' b'they' b'are' b'nearby' b'when' b'involve' b',' b'and' b'as' b'Vijay' b'occurred' b'out' b'a'
    b'deliberate' b'of' b'driving' b'.' b'There' b'may' b'be' b'a' b'large' b'competitive' b'visual' b'bird' b'that' b'<unk>' b'so' b'the' b'small' b'monomers' b'of' b'a'
    b'variety' b'.' b'<eos>' b'Various' b'language' b'are' b'not' b'not' b'wiped' b'.' b'Whereas' b'Gryposaurus' b'predications' b',' b'forcing' b'the' b'surface' b'flightless' b',' b'only'
    b'net' b'patches' b',' b'may' b'be' b'<unk>' b'.' b'However' b',' b'when' b'in' b'turn' b',' b'the' b'effect' b'of' b'<unk>' b'spots' b'are' b'earning'
    b'a' b'variety' b'of' b'excessive' b'fuse' b',' b'no' b'pale' b'ribosomal' b',' b'preventing' b'them' b'and' b'secretive' b'thirteenth' b'@.@' b'111' b'years' b',' b'power'
    b'sufficiently' b'careful' b';' b'spots' b'is' b'traveling' b'to' b'well' b'if' b'they' b'are' b'forced' b'to' b'branched' b'reddish' b'or' b'<unk>' b'.' b'Crash' b','
    b'there' b'had' b'no' b'white' b'experience' b',' b'Forster' b'male' b'and' b'intruder' b',' b'which' b'only' b'multiple' b'floor' b'steps' b'to' b'be' b'distinguished' b'.'
    b'This' b'grows' b'around' b'their' b'opponents' b'into' b'astronomical' b'reducing' b'display' b'and' b'STDs' b'punish' b'.' b'Sometimes' b'they' b'were' b'seen' b'southeast' b'of' b'his'
    b'all' b'parts' b'as' b'well' b'as' b'somewhat' b'strong' b'areas' b'fired' b'on' b'High' b'starling' b'substance' b',' b'abstract' b'High' b'Quite' b'(' b'<unk>' b')'
    b'.' b'The' b'value' b'of' b'suburban' b'common' b'starlings' b',' b'although' b'their' b'spots' b'armed' b'sacred' b'so' b'prepared' b'and' b'often' b'having' b'shown' b'of'
    b'even' b'disputed' b'extremely' b'distinct' b'or' b'<unk>' b'.' b'Another' b'anonymous' b'promoting' b'varied' b',' b'the' b'upperparts' b'refined' b'when' b'some' b'other' b'plants' b'called'
    b'occurring' b'to' b'the' b'island' b',' b'with' b'alternate' b'areas' b'found' b'so' b'they' b'repelled' b'playing' b'editions' b'of' b'other' b'other' b'components' b'.' b'It'
    b'may' b'be' b'Carey' b"'s" b'longest' b'perception' b'determined' b'he' b'requires' b'place' b'by' b'males' b'to' b'feed' b'.' b'Anderson' b'went' b'similar' b'to' b'southeast'
    b',' b'so' b'\xc3\x8dmar' b'was' b'not' b'Allah' b'.' b'A' b'female' b'of' b'how' b'in' b'high' b',' b'the' b'kakapo' b'averaged' b'heavy' b'contradictory' b','
    b'so' b'Buddha' b'found' b'letter' b'to' b'Jew' b'many' b'or' b'tightly' b'chicks' b',' b'based' b'as' b'American' b'kinds' b'spend' b'colors' b',' b'while' b'rituals'
    b'learn' b'to' b'have' b'prevention' b'flow' b'about' b'topic' b'.' b'When' b'there' b'it' b'is' b'not' b'that' b'eldest' b'more' b'Button' b'.' b'According' b'to'
    b'females' b'and' b'pre' b'@-@' b'<unk>' b'diagonal' b'standard' b',' b'the' b'birds' b'are' b'unlicensed' b'with' b'hundreds' b'of' b'absence' b'(' b'whiskey' b'has' b'337'
    b'during' b'this' b'times' b',' b'as' b'deep' b'for' b'or' b'easily' b'1' b'years' b',' b'below' b'that' b'devices' b',' b'have' b'since' b'losing' b'as'
    b'they' b')' b'.' b'Each' b'snurposomes' b'can' b'be' b'grown' b'through' b'the' b'Earth' b'by' b'other' b'or' b'are' b'safe' b'.' b'In' b'this' b'case'
    b'he' b'feels' b'it' b'clear' b',' b'at' b'an' b'4' b'@.@' b'5' b'MeV' b'.' b'Across' b'19' b'years' b',' b'philosophical' b'is' b'the' b'same'
    b'seen' b'recognized' b'once' b'.' b'No' b'definition' b'have' b'greater' b'nuclei' b',' b'so' b'Crossroads' b'criticized' b'deaths' b'occurs' b'on' b'the' b'nest' b',' b'Hebrew'
    b'behaviour' b'attaining' b'by' b'lack' b'of' b'kill' b'injuries' b',' b'dark' b'birds' b',' b'nesting' b'trees' b',' b'or' b'electrical' b'mitosis' b'.' b'Our' b'embryos'
    b'live' b'on' b'to' b'40' b'to' b'14' b'birds' b'in' b'smoked' b'males' b'.' b'Europium' b'rarely' b'occurs' b'on' b'these' b'islands' b'from' b'other' b'<unk>'
    b',' b'and' b'with' b'6' b'@.@' b'7' b'cm' b'(' b'9' b'@.@' b'8' b'in' b')' b'thick' b',' b'her' b'first' b'lipstick' b'sounds' b'due'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 189.7
    loss: 5.168
    elapsed time (seconds): 100.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  57.614 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
