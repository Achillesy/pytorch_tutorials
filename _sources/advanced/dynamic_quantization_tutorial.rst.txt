.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'as' b'System' b'<unk>' b',' b'and' b'in' b'Mortal' b'Angeles' b'he' b'took' b'over' b'a' b'hour' b'that' b'happened' b'.' b'<eos>' b'The' b'preview' b';'
    b'in' b'2015' b'was' b'intercepted' b'the' b'following' b'year' b'of' b'his' b'excavation' b'.' b'Ric' b'Clothes' b'of' b'Dreamworld' b'can' b'be' b'described' b'to' b'strong'
    b'Edition' b'be' b'the' b'official' b'motion' b'of' b'the' b'investigations' b'into' b'the' b'United' b'States' b'.' b'<unk>' b'<unk>' b'elected' b'by' b'Observatory' b'in' b'Argentina'
    b'as' b'an' b'"' b'most' b'clusters' b'"' b'or' b'"' b'the' b'peasant' b'title' b'picture' b'season' b'they' b'led' b'him' b'very' b'and' b'exploited' b'...'
    b'however' b'and' b'story' b',' b'and' b'the' b'lack' b'of' b'fame' b',' b'and' b'into' b'that' b'God' b',' b'they' b'from' b'thing' b'we' b'is'
    b'like' b'we' b'able' b'them' b'to' b'understanding' b'his' b'singular' b'way' b'in' b'doing' b'things' b'the' b'show' b'.' b'"' b'Lord' b'R.' b'Helena' b'said'
    b'that' b'although' b'in' b'1915' b',' b'a' b'small' b'session' b'in' b'1928' b'Harvest' b'Lloyd' b'Taylor' b'stated' b'"' b'many' b'other' b'thought' b'including' b'stones'
    b'than' b'HMS' b'diplomacy' b'"' b',' b'readers' b'began' b'for' b'this' b'game' b'from' b'a' b'<unk>' b'.' b'In' b'the' b'Whole' b'World' b'War' b'began'
    b',' b'with' b'Chicago' b'had' b'been' b'killed' b'in' b'The' b'Isles' b'were' b'achieved' b'for' b'"' b'<unk>' b'"' b'and' b'"' b'Gaga' b'"' b'.'
    b'According' b'to' b'David' b'Junyi' b',' b'it' b'started' b'Hotel' b'display' b'dated' b'real' b'media' b'teams' b',' b'described' b'some' b'Nahant' b'.' b'Six' b'airstrip'
    b'allowed' b'to' b'work' b'from' b'sand' b'priority' b'created' b'by' b'the' b'Republican' b'Party' b'and' b'the' b'editing' b'of' b'pledge' b'for' b'a' b'variant' b'and'
    b'administration' b'the' b'following' b'year' b'.' b'The' b'reviewer' b'installment' b'was' b'AT' b"'s" b'first' b'morning' b',' b'and' b'was' b'assigned' b'to' b'<unk>' b'.'
    b'By' b'July' b'10' b',' b'2012' b',' b'the' b'executive' b'would' b'be' b'considered' b'locked' b'for' b'First' b'Irish' b'Guard' b'fans' b'except' b'to' b'launch'
    b'the' b'treaty' b'.' b'Oliver' b'Quest' b'names' b'intended' b'to' b'mode' b',' b'and' b'helped' b'off' b'the' b'completion' b'did' b'not' b'apply' b'to' b'improve'
    b'a' b'Weekend' b'coaster' b'called' b'"' b'On' b'his' b'our' b'"' b'planet' b'.' b'Despite' b'a' b'agonist' b'to' b'sign' b',' b'it' b'is' b'muscular'
    b'that' b'<unk>' b',' b'sometimes' b'on' b'TV' b',' b'biography' b'they' b'would' b'have' b'done' b'at' b'least' b'12' b'years' b'that' b'year' b'.' b'After'
    b'LoveGame' b',' b'and' b'began' b',' b'on' b'December' b'11' b',' b'2006' b',' b'Omar' b'stated' b'that' b'the' b'kakapo' b"'s" b'picture' b'dropped' b'for'
    b'Native' b'countries' b"'s" b'power' b'force' b',' b'comprising' b'an' b'brief' b'routine' b'pattern' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Of' b'these' b'variety' b'of'
    b'ironclad' b'are' b'<unk>' b'(' b'"' b'a' b'savage' b'photo' b'toilet' b')' b';' b'all' b'is' b'chamber' b'@-@' b'lived' b'of' b'fiction' b',' b'see'
    b'isolation' b',' b'qualities' b'at' b'a' b'show' b'@-@' b'night' b'scheme' b'of' b'<unk>' b',' b'laboratory' b',' b'white' b',' b'and' b'smaller' b'Thaksin' b'Here'
    b',' b'laughing' b',' b'having' b',' b'a' b'migration' b'change' b'by' b'Hart' b'conifers' b',' b'often' b'heard' b'between' b'thin' b'stump' b'and' b'small' b'guineas'
    b'"' b'and' b'"' b'shootout' b'to' b'occupy' b'not' b'<unk>' b'...' b'<unk>' b'Pierre' b'<unk>' b"'" b'method' b'@-@' b'<unk>' b'"' b'.' b'102' b'or'
    b'45' b'quadruple' b'kakapo' b'games' b'color' b'subeditor' b'song' b'plants' b'.' b'In' b'Michele' b'Game' b',' b'"' b'Sb3' b'(' b'or' b'Seacouver' b'"' b')'
    b'Pattycake' b',' b'a' b'process' b'of' b'novel' b'females' b'for' b'Humpty' b'Rico' b'(' b'<unk>' b')' b',' b'were' b'against' b'house' b'low' b'into' b'his'
    b'own' b',' b'<unk>' b'than' b'<unk>' b'.' b'Only' b'detailing' b'special' b'predation' b'and' b'Mimi' b'<eos>' b'<eos>' b'=' b'=' b'Crash' b'life' b'=' b'='
    b'<eos>' b'<eos>' b'Vicki' b'@-@' b'poor' b'y' b'monstrous' b',' b'landowners' b'ten' b'month' b',' b'is' b'open' b'for' b'an' b'will' b';' b'it' b'had'
    b'common' b'lessons' b'that' b'other' b'male' b'or' b'social' b',' b'in' b'response' b'to' b'totally' b'destruction' b'worse' b',' b'five' b'male' b'non' b'@-@' b'<unk>'
    b'condom' b'food' b',' b'or' b'video' b',' b'<unk>' b',' b'<unk>' b',' b'toys' b'and' b'<unk>' b';' b'the' b'blurred' b'stucco' b'River' b'computed' b'ocean'
    b',' b'a' b'<unk>' b',' b'and' b'season' b'gaps' b'upon' b'more' b'than' b'a' b'depth' b'submerged' b'in' b'he' b'provides' b'ones' b'.' b'Charmed' b'mouth'
    b';' b'the' b'depression' b'is' b'commonly' b'large' b',' b'if' b'to' b'the' b'tail' b'in' b'which' b'they' b'are' b'<unk>' b'.' b'In' b'Woodsboro' b','
    b'Toirdelbach' b'\xe2\x80\x99' b'last' b'arrive' b'in' b'them' b'a' b'heroes' b'that' b'might' b'consider' b'Byzantine' b'views' b'.' b'<eos>' b'Towards' b'Inari' b"'s" b'body' b'<unk>'
    b'on' b'3' b'February' b'2010' b',' b'when' b'other' b'll' b',' b'amphitheatre' b',' b'and' b'humanity' b'Anabaptist' b',' b'many' b'are' b'also' b'thought' b'to'
    b'find' b'the' b'kakapo' b',' b'resulting' b'on' b'their' b'clothing' b';' b'in' b'example' b'they' b'lacks' b'kakapo' b'to' b'dwarfs' b'and' b'prevent' b'amino' b'miners'
    b'who' b'may' b'be' b'killed' b'to' b'suggest' b'that' b'they' b'are' b'<unk>' b'.' b'There' b'have' b'been' b'impact' b'from' b'Poles' b'and' b'substance' b'contribute'
    b'to' b'dungeon' b'@-@' b'frequency' b'.' b'Eventually' b',' b'this' b'could' b'be' b'<unk>' b'hurt' b'bearing' b'<unk>' b'and' b'survival' b'.' b'Such' b'dirt' b'has'
    b'two' b'units' b'on' b'first' b'side' b',' b'in' b'not' b'when' b'they' b'generated' b'Judith' b'including' b'Allah' b'and' b',' b'blocked' b'some' b'other' b'times'
    b'from' b'play' b',' b'usually' b'intending' b'to' b'refer' b'to' b'its' b'associated' b'laboratory' b'bills' b'.' b'Pratt' b'(' b'established' b'$' b'14' b'@.@' b'3'
    b'million' b'short' b'first' b')' b',' b'Reubens' b'proposes' b'above' b'2' b'\xe2\x80\x93' b'9' b'\xce\xbcm' b'.' b'According' b'to' b'a' b'Shapur' b'Medieval' b'kids' b','
    b'they' b'affects' b'last' b'of' b'their' b'bodies' b'.' b'Males' b'later' b'add' b'different' b'pleasure' b',' b'feed' b'workers' b'from' b'towns' b';' b'plant' b'legislature'
    b'when' b'die' b',' b'and' b'possible' b'light' b'and' b'suffering' b'a' b'one' b'European' b'predators' b'around' b'the' b'icy' b'side' b'and' b'starling' b',' b'Auckland'
    b'or' b'forth' b'each' b'reflective' b',' b'again' b'out' b'of' b'each' b'bird' b'.' b'<eos>' b'As' b'of' b'bowling' b'enough' b'a' b'courtship' b'identity' b','
    b'females' b'<unk>' b'its' b'magical' b'geometry' b',' b'while' b'the' b'other' b'things' b'agreed' b'to' b'identify' b'police' b'quality' b',' b'both' b'through' b'its' b'commute'
    b'.' b'Common' b'nucleoplasm' b'provides' b'survival' b'male' b'by' b'viable' b'solid' b',' b'so' b'they' b'do' b'never' b'replicate' b'by' b'seasonal' b'@-@' b'lying' b','
    b'food' b'or' b'rodents' b'.' b'If' b'turn' b',' b'it' b'has' b'not' b'been' b'enough' b'for' b'this' b'size' b',' b'with' b'his' b'larvae' b'Hypsilophodon'
    b'realizes' b',' b'"' b'It' b'is' b'unsure' b'cow' b'people' b'of' b'orbit' b'and' b'often' b'skating' b'<unk>' b'in' b'some' b'collections' b'"' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Geology' b'=' b'=' b'<eos>' b'<eos>' b'Kakapo' b'starlings' b'has' b'both' b'significant' b'<unk>' b'against' b'<unk>' b',' b'application' b',' b'with'
    b'mice' b'.' b'Also' b'resume' b'for' b'urinary' b'sequence' b'congregationalists' b',' b'kept' b'by' b'severe' b'and' b'signs' b',' b'the' b'external' b'starling' b'decay' b'or'
    b'occasionally' b',' b',' b'there' b'makes' b'no' b'northern' b'reason' b'by' b'Nebraska' b'.' b'<unk>' b'Gyakuten' b'Fitzgerald' b'(' b'M.' b'galericulata' b')' b',' b'was'
    b'nominated' b',' b'former' b'bird' b',' b'for' b'bold' b'Texas' b',' b'but' b'regards' b'About' b'to' b'prepare' b'of' b'Jordan' b"'s" b'feathers' b'for' b'1697'
    b'.' b'CA' b'and' b'monitored' b'cells' b'rates' b'made' b'their' b'diversity' b'of' b'28' b'cm' b'(' b'26' b'ft' b')' b',' b'while' b'one' b'of'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 211.7
    loss: 5.168
    elapsed time (seconds): 118.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  37.691 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
