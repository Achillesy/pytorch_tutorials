.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'Although' b'he' b'enjoyed' b',' b'a' b'<unk>' b'species' b'are' b'<unk>' b';' b'"' b'I' b'looks' b'up' b'that' b'you' b'could' b'be' b'composed'
    b'ratified' b'to' b'pedal' b'off' b'after' b'with' b'more' b'magical' b'events' b'.' b'"' b'At' b'its' b'carpenter' b'in' b'Presidential' b'Australia' b',' b'wife' b'of'
    b'autobiography' b'to' b'Younger' b'<unk>' b'Machine' b'(' b'died' b'forms' b'in' b'cultures' b'proportion' b'stages' b')' b',' b'Kashi' b'cattle' b'who' b'defeated' b'<unk>' b'Aftermath'
    b'protesters' b'cites' b'heralded' b'and' b'poor' b'troops' b'very' b'able' b'to' b'infiltrate' b'contributing' b'to' b'mainly' b'him' b'.' b'These' b'nations' b'(' b'<unk>' b'<unk>'
    b')' b'is' b'also' b'scriptures' b'to' b'be' b'killed' b'added' b'by' b'removing' b'their' b'pupil' b'on' b'the' b'corresponding' b'conformation' b'.' b'This' b'account' b'is'
    b'require' b'to' b'hunting' b',' b'with' b'Gaga' b'temporarily' b'does' b'not' b'<unk>' b'.' b'<eos>' b'Like' b'the' b'first' b'Thaksin' b'segment' b'a' b'demotion' b','
    b'his' b'head' b'extends' b'Collection' b'.' b'The' b'wings' b'meet' b'a' b'flock' b'\xe2\x80\x94' b'his' b'<unk>' b'spread' b'her' b'depth' b',' b'typical' b'case' b'that'
    b'fails' b'"' b'Twelve' b',' b'sir' b',' b'and' b'swamp' b'"' b'.' b'The' b'list' b'<unk>' b'frees' b'Fairy' b'\xe2\x80\x9d' b'until' b'the' b'Republic' b'of'
    b'808' b'particles' b',' b'asking' b'range' b'to' b'compete' b'plans' b',' b'with' b'two' b'other' b'hair' b'each' b'they' b'readily' b'partially' b'at' b'death' b'west'
    b',' b'was' b'a' b'more' b'successful' b'@-@' b'themed' b'bays' b'known' b'as' b'superior' b',' b'most' b'Archaeologist' b'.' b'He' b'points' b'out' b'very' b'recently'
    b'to' b'find' b'his' b'customer' b'@-@' b'lined' b'sound' b',' b'or' b'color' b'or' b'cooled' b'so' b'at' b'his' b'source' b'.' b'Grant' b'flies' b'Hitler'
    b'on' b'a' b'motor' b'dwarf' b'at' b'reputed' b',' b'too' b'forested' b',' b'do' b'not' b'implement' b'an' b'stream' b'of' b'morels' b'or' b'they' b'believe'
    b'"' b'Every' b'filled' b'mean' b'jeopardize' b'<unk>' b'of' b'their' b'main' b'to' b'a' b'body' b'situation' b'to' b'switch' b'.' b'"' b'<eos>' b'The' b'Legend'
    b'of' b'Ceres' b'states' b'therefore' b"'" b'simultaneously' b',' b'sinful' b'nonsense' b'(' b'inner' b'behaviour' b')' b'.' b'The' b'bird' b'has' b'seen' b'eggs' b'on'
    b'any' b'other' b'.' b'Males' b'have' b'large' b'species' b'of' b'pink' b'fusion' b'.' b'<eos>' b'The' b'most' b'strong' b'17th' b'entries' b'showed' b'after' b'others'
    b'for' b'Amanita' b'asiaticus' b'by' b'Damon' b'v.' b'<unk>' b'.' b'The' b'bird' b"'s" b'complaint' b'and' b'or' b'outer' b'behaviour' b'to' b'believe' b'was' b'once'
    b'digging' b'.' b'The' b'luminosity' b'of' b'art' b',' b'sulfur' b'Makoto' b',' b'is' b'a' b'650' b'@-@' b'ray' b',' b'and' b'involves' b'potato' b'@-@'
    b'black' b'behaviour' b'at' b'scheduling' b'.' b'The' b'character' b'is' b'led' b'by' b'licence' b'or' b'even' b'Organization' b'Solomon' b',' b'which' b'leads' b'that' b'a'
    b'female' b'with' b'its' b'body' b'to' b'be' b'used' b';' b'humans' b'is' b'victorious' b',' b'apart' b'as' b'they' b'are' b'situated' b'on' b'each' b'other'
    b',' b'although' b'G' b'males' b'will' b'context' b'across' b'humans' b'.' b'"' b'Rainfall' b'block' b'fly' b'raises' b'such' b'energy' b'Leeds' b'him' b'down' b'that'
    b'"' b'they' b'Welch' b'her' b'head' b'defeat' b'where' b'it' b'is' b'thick' b'accessible' b'.' b'Nevertheless' b',' b'it' b'is' b'"' b'precisely' b'maturity' b'its'
    b'pure' b'ability' b'for' b'traditional' b'sex' b',' b'staying' b',' b'and' b'so' b'present' b'@-@' b'closer' b',' b'head' b'or' b'food' b'it' b'"' b','
    b'while' b'they' b'<unk>' b'to' b'be' b'master' b'fundamentally' b'times' b'.' b'The' b'same' b'newer' b'pilots' b',' b'wheatgrass' b'(' b'221' b')' b',' b'one'
    b'grouped' b',' b'found' b'a' b'different' b'@-@' b'length' b'scenic' b'drug' b'than' b'the' b'lives' b'of' b'other' b'giant' b'items' b',' b'ringing' b',' b'notifying'
    b'themselves' b'.' b'According' b'to' b'<unk>' b',' b'they' b'were' b'worried' b'appreciated' b'Orkney' b'when' b'their' b'starlings' b'are' b'cause' b'similar' b'to' b'an' b'species'
    b'that' b'eventually' b'sufficient' b'Atlas' b'.' b'In' b'2007' b',' b'they' b'are' b'last' b'estranged' b',' b'Ceres' b'more' b'likely' b'.' b'This' b'reason' b'milk'
    b'calls' b'with' b'birds' b'or' b'groups' b',' b'however' b',' b'for' b'example' b',' b'and' b'feral' b'palm' b'.' b'A' b'basidia' b'dispersed' b'at' b'least'
    b'18' b'%' b'may' b'have' b'in' b'"' b'clinical' b'activity' b'"' b'.' b'This' b'name' b'that' b'level' b'has' b'applied' b'nearly' b'much' b'simultaneously' b'collapsed'
    b'.' b'<eos>' b'One' b'of' b'their' b'mating' b'chicks' b'have' b'so' b'compared' b'to' b'translation' b'with' b'Mantell' b';' b'when' b'effects' b'Eagle' b'piety' b','
    b'Nos.' b'restoring' b'<unk>' b'or' b'statues' b'Busch' b'can' b'be' b'suited' b'with' b'literary' b'wood' b'waters' b'or' b'calls' b'all' b'occasions' b'about' b'that' b'raising'
    b'other' b'differentiation' b'(' b'i.e.' b'from' b'they' b'do' b';' b'they' b'were' b'young' b')' b'and' b'ions' b'.' b'When' b'Lamb' b'is' b'Thought' b'at'
    b'the' b'northeast' b',' b'the' b'latter' b'rise' b'with' b'they' b'once' b'wear' b'or' b'mentioned' b'their' b'daily' b'body' b'.' b'Two' b'descriptions' b'of' b'these'
    b'proteins' b'have' b'been' b'large' b'and' b'<unk>' b'.' b'<eos>' b'Iceland' b',' b'though' b'South' b'or' b'youthful' b',' b'<unk>' b'Walton' b',' b'even' b'now'
    b'fallen' b'.' b'By' b'captivity' b',' b'the' b'bird' b"'s" b'location' b'are' b'determined' b'to' b'have' b'Hussars' b'magazine' b',' b'<unk>' b'<unk>' b',' b'whoever'
    b',' b'Natal' b',' b'blossom' b',' b'and' b'1127' b'as' b'Loose' b'are' b'twinned' b'from' b'their' b'disappearance' b'.' b'Eventually' b',' b'it' b'was' b'substituted'
    b'from' b'amassing' b'to' b'Lambeosaurus' b'green' b',' b'<unk>' b'of' b'habitat' b',' b'<unk>' b',' b'western' b'admirable' b',' b'patrolled' b',' b'English' b',' b'<unk>'
    b',' b'yellow' b',' b'grade' b',' b'whistle' b',' b'<unk>' b',' b'or' b'hitters' b'which' b'they' b'did' b'have' b'keep' b'large' b'terms' b'of' b'male'
    b'abuse' b'.' b'In' b'summer' b',' b'Latin' b',' b'veins' b'edifice' b'generating' b'corners' b'by' b'the' b'eukaryotic' b'body' b'of' b'each' b'other' b'.' b'A'
    b'common' b'source' b'of' b'<unk>' b'around' b'common' b',' b'and' b'far' b'their' b'long' b'cell' b'strategy' b'into' b'Ceres' b'between' b'the' b'tree' b'and' b'Britain'
    b'ranging' b'north' b'with' b'it' b'behind' b'a' b'male' b'piece' b'.' b'The' b'base' b'for' b'people' b'is' b'high' b';' b'long' b'urgent' b'them' b'she'
    b'is' b'manufacture' b';' b'consent' b'was' b'prominent' b'on' b'a' b'or' b'<unk>' b'.' b'Structure' b'identifies' b'plumage' b'and' b'the' b'female' b'decisions' b'of' b'a'
    b'pair' b'of' b'Nicaea' b'through' b'her' b'death' b'.' b'Many' b'traditional' b'common' b'starlings' b'lay' b'down' b'with' b'food' b'when' b'burials' b'was' b'difficult' b'to'
    b'leave' b'Holdsworth' b'/' b'probably' b',' b'so' b'can' b'be' b'unique' b'.' b'They' b'opens' b',' b'as' b'anything' b'do' b'constitute' b'little' b'.' b'However'
    b',' b'it' b'generally' b'is' b'<unk>' b',' b'so' b'others' b'<unk>' b'short' b'trees' b',' b'where' b'their' b'leaf' b'relative' b'becoming' b'transcribed' b'or' b'extract'
    b'after' b'they' b'can' b'be' b'encouraging' b'.' b'They' b'can' b'be' b'an' b'dogs' b'@-@' b'shaped' b',' b'and' b'may' b'mark' b'northwestward' b'on' b'the'
    b'neck' b'with' b'their' b'head' b'and' b'vigorously' b'.' b'Once' b'about' b'more' b'<unk>' b',' b'the' b'male' b'manned' b'it' b'it' b'.' b'BUF' b'\xe2\x80\x94'
    b'T.' b'Paul' b'H.' b'<unk>' b',' b'forlorn' b'their' b'most' b'obvious' b'element' b'throughout' b'that' b'<unk>' b'have' b'high' b'than' b'safety' b'.' b'<unk>' b'('
    b'<unk>' b',' b'Indira' b')' b'may' b'be' b'lost' b'on' b'the' b'insect' b'of' b'stresses' b',' b'killing' b'it' b'<unk>' b'that' b'may' b'travel' b'<unk>'
    b'to' b'humans' b',' b'which' b'may' b'be' b'seen' b'by' b'old' b'group' b'herbivore' b'.' b'The' b'various' b'<unk>' b'lies' b'of' b'question' b',' b'and'
    b'therefore' b'attacks' b',' b'clusters' b'layer' b'=' b'<unk>' b'safety' b'is' b'quite' b'<unk>' b'because' b'they' b'are' b'able' b'to' b'employ' b'it' b'.' b'They'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 196.6
    loss: 5.168
    elapsed time (seconds): 107.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  10.912 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
