.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'(' b'my' b'Rockies' b'was' b'situated' b'in' b'the' b'Diamond' b'windward' b'during' b'the' b'<unk>' b'<unk>' b')' b'O' b'It' b'<eos>' b'Although' b'Somerset' b'Alien'
    b'had' b'a' b'variety' b'of' b'3' b'@,@' b'000' b'copies' b'the' b'life' b'unrestricted' b'times' b',' b'however' b',' b'he' b'Bangaru' b'Salamis' b'agreed' b'to'
    b'"' b'potentially' b'commit' b'how' b'in' b'fact' b'like' b'that' b'a' b'uniform' b'immature' b'package' b',' b'but' b'to' b'go' b'a' b'crime' b'all' b'few'
    b'times' b'in' b'theoretical' b'heroes' b'of' b'experienced' b'issues' b'and' b'a' b'wrong' b'<unk>' b'<unk>' b'cannot' b'issues' b'as' b'a' b'wrong' b'manufacturer' b';' b'a'
    b'broad' b'<unk>' b'leather' b'dating' b'.' b'"' b'The' b'scent' b'of' b'land' b'represented' b'by' b'Hairan' b'Georges' b'magazine' b',' b'the' b'Foo' b'Williams' b','
    b'the' b'mayor' b',' b'embarked' b'in' b'1974' b',' b'attempting' b'a' b'few' b'996' b'sleeves' b'at' b'Venus' b"'s" b'year' b'before' b'developing' b'one' b'wife'
    b'.' b'Nevertheless' b',' b'<unk>' b'<unk>' b'and' b'Jane' b'Squadron' b'gave' b'part' b'of' b'its' b'involvement' b'that' b'they' b'was' b'doubtful' b'of' b'a' b'succession'
    b'.' b'The' b'combined' b'great' b'phase' b'of' b'asteroids' b'and' b'Andr\xc3\xa9' b'Walpole' b',' b'after' b'the' b'Black' b'Party' b'<unk>' b',' b'"' b'invoking' b'the'
    b'planet' b'once' b'to' b'remake' b'it' b'[' b'creating' b'[' b'I' b']' b'Day' b',' b'is' b'pressured' b'in' b'some' b'Futa' b'storytelling' b',' b'and'
    b'this' b'idea' b'"' b'holes' b'while' b'indicates' b'they' b'would' b'admitted' b',' b'and' b'that' b'students' b'would' b'turn' b'on' b'to' b'find' b'escaping' b'subject'
    b'.' b'Oh' b'is' b'the' b'"' b'outspoken' b'"' b',' b'but' b'the' b'team' b'changed' b'the' b'ultimate' b'261' b'short' b'consecutive' b'examining' b'investigation' b','
    b'but' b'between' b'Human' b'Nagachandra' b'was' b'accepted' b'in' b'February' b'2010' b'.' b'On' b'the' b'issue' b'of' b'Ceres' b'in' b'1846' b',' b'1862' b','
    b'another' b'game' b'was' b'discovered' b'color' b'with' b'around' b'100' b'%' b'played' b'in' b'its' b'first' b'year' b'.' b'Until' b'his' b'release' b',' b'Mosley'
    b'achieved' b'raise' b'the' b'emotional' b'Crash' b'Young' b'Night' b'(' b'his' b'year' b'for' b'Your' b'Power' b'Athletic' b',' b'and' b'video' b'like' b'and' b'questioned'
    b'for' b'The' b'criminal' b'action' b')' b'Company' b'went' b'down' b'Games' b'and' b'Kelley' b'to' b'pay' b'military' b'characters' b'.' b'Under' b'his' b'motion' b'on'
    b'a' b'kakapo' b'date' b'all' b'kept' b'to' b'South' b'Korean' b'restrictions' b',' b'the' b'only' b'election' b'were' b'challenging' b'to' b'have' b'great' b'effect' b'\xe2\x80\x93'
    b'Kody' b'tracts' b'to' b'boat' b'the' b'Bhaduri' b'.' b'The' b'real' b'front' b'was' b'revised' b'by' b'cars' b',' b'both' b'experienced' b'staff' b'artifacts' b','
    b'drummer' b'Meyers' b',' b'<unk>' b'<unk>' b'from' b'Hawaii' b'(' b'died' b'and' b'Irish' b')' b',' b'and' b'his' b'wife' b',' b'This' b'.' b'decade'
    b'were' b'more' b'focus' b'to' b'use' b'with' b'the' b'canyon' b"'s" b'exact' b'time' b'.' b'His' b'large' b'arena' b'of' b'knights' b'zone' b'to' b'District'
    b'half' b'a' b'investigation' b'during' b'exchange' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legacy' b'=' b'=' b'<eos>' b'<eos>' b'The' b'FIA' b'equipped' b'a' b'50'
    b'@-@' b'year' b'lead' b'to' b'<unk>' b'Ile' b',' b'a' b'FOCA' b'of' b'firm' b'fiction' b'was' b'delivered' b'so' b'in' b'the' b'war' b'.' b'<eos>'
    b'O' b"'Malley" b'Charlton' b'reefs' b'consisted' b'from' b'which' b'speculation' b'to' b'40' b'%' b',' b'Veblen' b',' b'and' b'become' b'unlike' b'a' b'imaginative' b'film'
    b'relationships' b',' b'was' b'neglected' b'.' b'The' b'$' b'70' b'million' b'ibis' b'or' b'March' b'2013' b'left' b'his' b'final' b'year' b'for' b'Formula' b'One'
    b'in' b'European' b'Americans' b'.' b'The' b'game' b'wrote' b'his' b'effort' b'to' b'strike' b'and' b'by' b'.' b'He' b'said' b'Knows' b'teams' b'that' b'Natasha'
    b'Goodwin' b'would' b'"' b'have' b'been' b'umpire' b'management' b'to' b'have' b'will' b'see' b'it' b'from' b'class' b'"' b',' b'saying' b'that' b'they' b'changed'
    b'they' b'don' b"'t" b'continue' b'to' b'express' b'.' b'They' b'were' b'there' b'to' b'interact' b'hot' b'and' b'Ethiopia' b'page' b'to' b'the' b'Flanders' b'trip'
    b'in' b'close' b'games' b'and' b'stated' b'that' b'if' b'umpire' b'Nicaea' b'remained' b'Ceres' b'finished' b'.' b'He' b'would' b'return' b'course' b'to' b'create' b'familiar'
    b'programs' b'return' b'to' b'them' b',' b'and' b'the' b'<unk>' b'forces' b',' b'The' b'man' b'sequences' b',' b'beaver' b'pursued' b'watching' b'@-@' b'nature' b'nations'
    b'in' b'Dark' b'Tech' b"'" b'<unk>' b',' b'was' b'illegal' b'problems' b'.' b'Finding' b'two' b'cars' b'less' b'than' b'studying' b'for' b'any' b',' b'<unk>'
    b',' b'the' b'situations' b'founders' b'as' b'Vaballathus' b'is' b'expected' b'to' b'cause' b'their' b'treatment' b'shop' b'and' b'eventual' b'Levant' b'.' b'As' b'he' b'began'
    b'head' b'him' b'at' b'instantly' b'boxing' b',' b'the' b'Persia' b'would' b'be' b'elected' b'.' b'By' b'some' b'first' b'he' b',' b'Gruffudd' b'had' b'terrible'
    b'power' b'with' b'Muang' b',' b'his' b'lyrics' b'and' b'its' b'lamins' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Keathley' b'State' b'Expressway' b'=' b'<eos>' b'<eos>'
    b'<unk>' b'of' b'Walpole' b"'s" b'governor' b'existed' b'in' b'1984' b',' b'where' b'the' b'Battles' b'of' b'it' b'of' b'<unk>' b',' b'Nike' b'in' b'VHS'
    b',' b'was' b'both' b'established' b'as' b'Highest' b',' b'manor' b',' b'and' b'<unk>' b',' b'and' b'15' b'further' b'championships' b',' b'and' b'2' b'@,@'
    b'920' b'yuan' b'"' b'he' b'van' b'Nineteen' b'<unk>' b'"' b',' b'successfully' b'bizarre' b'feelings' b'.' b'Such' b'are' b'also' b'bringing' b'it' b'how' b'they'
    b'are' b'written' b'by' b'divides' b'in' b'England' b'below' b'the' b'rest' b'of' b'the' b'1840s' b'.' b'Jackson' b'officer' b'Eurogamer' b'and' b'sonne' b'in' b'Kraus'
    b'leads' b'the' b'protector' b'of' b'the' b'creation' b'of' b'its' b'Scottish' b'and' b'colonial' b'power' b'expatriates' b',' b'the' b'country' b'bombers' b',' b'and' b'had'
    b'never' b'been' b'making' b'"' b'in' b'the' b'middle' b'of' b'six' b'large' b'lengths' b';' b'us' b'1947' b'in' b'professional' b',' b'geographic' b',' b'accurately'
    b'...' b'population' b',' b'essentially' b'lips' b'and' b'mocking' b'.' b'"' b'According' b'to' b'35' b'%' b'of' b'a' b'<unk>' b'species' b'killed' b'in' b'1899'
    b',' b'galericulata' b'came' b'that' b'he' b'was' b'still' b'electric' b'as' b'compared' b'Lohan' b'.' b'He' b'used' b'a' b'house' b'of' b'a' b'focus' b'that'
    b'moved' b',' b'and' b'claiming' b'that' b'the' b'EU' b'"' b'prevailed' b'these' b'relied' b'in' b'Madeline' b'<unk>' b'"' b',' b'while' b'this' b'book' b'can'
    b'be' b'seen' b'as' b'Sheets' b'for' b'a' b'elaborate' b'game' b'.' b'If' b'the' b'struggle' b'involving' b'instruments' b',' b'however' b',' b'he' b'makes' b'New'
    b'Angeles' b'Governor' b'Carl' b'Evans' b'.' b'Two' b'of' b'his' b'other' b'frontier' b'children' b'easily' b'led' b'some' b'of' b'his' b'humorist' b"'s" b'books' b','
    b'as' b'a' b'important' b'tutor' b'\xe2\x80\x94' b'observance' b'is' b'much' b'arranged' b'.' b'As' b'the' b'979' b'<unk>' b'or' b'Wetmore' b'stems' b',' b'Viking' b'minutes'
    b'seems' b'to' b'have' b'to' b'have' b'been' b'discus' b'Hill' b'digestive' b'back' b'in' b'the' b'words' b'of' b'large' b'state' b',' b'not' b'with' b'Wihtred'
    b'declaring' b'part' b',' b'<unk>' b',' b'<unk>' b',' b'[' b'sic' b']' b'a' b'like' b'head' b'.' b'Also' b'and' b'from' b'7' b'and' b'25'
    b'harsh' b'years' b'finish' b'.' b'<eos>' b'The' b'Sabor' b'is' b'a' b'side' b'of' b'the' b'and' b'the' b'portable' b'<unk>' b',' b'which' b'attacks' b'muted'
    b'@-@' b'distance' b'Macrianus' b'power' b'between' b'burnt' b'and' b'1886' b'to' b'Callisto' b'and' b'in' b'Fur' b',' b'Agassi' b'of' b'cathedral' b',' b'arriving' b'on'
    b'at' b'Baron' b'Harbor' b'as' b'a' b'visionary' b'light' b'enough' b'to' b'maintain' b'it' b'.' b'<unk>' b'might' b'be' b'highly' b'unusual' b'under' b'due' b'to'
    b'almost' b'to' b'house' b'permit' b',' b'possibly' b'though' b'again' b'poison' b'exists' b'for' b'the' b'<unk>' b'and' b'they' b'write' b'any' b'of' b'them' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 191.4
    loss: 5.168
    elapsed time (seconds): 105.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  3.736 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
