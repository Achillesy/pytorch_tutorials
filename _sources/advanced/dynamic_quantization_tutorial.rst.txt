.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'fascination' b',' b'order' b'to' b'triumphant' b'overcome' b'artworks' b',' b'or' b'additional' b'Leukemia' b'chair' b'.' b'Their' b'<unk>' b'and' b'Chancellor' b'occurred' b'.' b'Thus'
    b',' b'her' b'other' b'reconciliation' b'on' b'The' b'<unk>' b'\xe3\x80\x88' b'Boom' b'Data' b'(' b'<unk>' b')' b'was' b'advised' b'approximately' b'a' b'136' b'@.@' b'5'
    b'million' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Ecology' b'(' b'melody' b')' b'=' b'<eos>' b'<eos>' b'Bart' b'Cathedral' b'(' b'Thai' b':' b"'Toole" b'Williams'
    b'and' b'Say' b'W.' b'Motion' b'Al' b'!' b')' b'is' b'a' b'Roman' b'Society' b'from' b'All' b'@-@' b'century' b'Pike' b'on' b'his' b'official' b'position'
    b'.' b'Other' b'primary' b'shelters' b'encouraged' b'people' b'that' b'are' b'killed' b'in' b'1400' b'during' b'this' b'(' b'more' b'than' b'1' b'%' b'of' b'Europe'
    b')' b',' b'abducts' b'mycelium' b',' b'and' b'Anthony' b'Thanhouser' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Although' b'of'
    b'1400' b',' b'Madhvacharya' b'(' b'one' b',' b'also' b'acquired' b'an' b'European' b'planet' b')' b',' b'representing' b'a' b'zero' b'nest' b'is' b'known' b'that'
    b'more' b'convective' b'bodies' b',' b'such' b'as' b'<unk>' b',' b'SPECTRE' b'and' b'gum' b',' b'were' b'particularly' b'endemic' b'for' b'access' b',' b'and' b'to'
    b'replace' b'efforts' b'that' b'may' b'be' b'used' b'to' b'1552' b'bronze' b'terms' b'.' b'Among' b'for' b'the' b'volume' b'of' b'people' b',' b'these' b'males'
    b'formed' b'way' b'to' b'repel' b'popular' b'fighters' b'.' b'Ceres' b'rite' b'to' b'guard' b'cathedral' b',' b'such' b'as' b'either' b'Crisis' b'without' b'Xu' b'and'
    b'<unk>' b'.' b'According' b'to' b'donors' b',' b'these' b'hypothesis' b'made' b'money' b'.' b'Taunton' b'and' b'hardwood' b'was' b'their' b'patron' b'throughout' b'1937' b','
    b'which' b'was' b'strongly' b'protected' b'by' b'<unk>' b',' b'and' b'by' b'English' b',' b'a' b'flight' b'Timberlake' b'that' b'includes' b'Ceres' b'of' b'Marsh' b'.'
    b'In' b'Australia' b',' b'it' b'is' b'two' b'sole' b'business' b'astronomers' b'as' b'common' b'population' b'to' b'become' b'involved' b'in' b'a' b'common' b'variety' b'of'
    b'large' b'other' b',' b'dinosaurs' b'In' b'Newark' b',' b'and' b'covered' b'on' b'northern' b'20' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'='
    b'<eos>' b'<eos>' b'Many' b'species' b'of' b'more' b'than' b'100' b'or' b'chemical' b'species' b',' b'sculpture' b'water' b'settlement' b',' b'is' b'still' b'known' b'caused'
    b'as' b"'" b'abundant' b'Rusticana' b"'" b',' b'<unk>' b'or' b'<unk>' b'they' b'would' b'break' b'away' b',' b'and' b'may' b'Bir' b'Register' b'.' b'The'
    b'common' b'spelling' b'rate' b'of' b'the' b'universe' b'range' b'until' b'Kakapo' b'or' b'Megalosaurus' b',' b'repairing' b'headquarters' b'.' b'The' b'Vaudeville' b'serve' b'as' b'ghettos'
    b',' b'but' b'volleyball' b'presence' b'Paranthodon' b'took' b'mortally' b'power' b',' b'coins' b',' b'and' b'their' b'wives' b'Eubanks' b'from' b'their' b'chance' b'.' b'The'
    b'departures' b'prompted' b'of' b'many' b'sugar' b'arches' b',' b'the' b'center' b'movement' b',' b'is' b'unknown' b',' b'combined' b'to' b'be' b'twisted' b'by' b'shell'
    b'for' b'its' b'inner' b'size' b'(' b'32' b'@.@' b'22' b'eclipse' b')' b'and' b'Newmarket' b'or' b'160' b'distance' b'(' b'25' b'\xe2\x80\x93' b'98' b'in'
    b')' b'.' b'They' b'provide' b'different' b'examples' b'of' b'damage' b',' b'including' b'refusing' b'to' b'balance' b',' b'by' b'many' b'716th' b'wings' b'.' b'These'
    b'but' b'most' b',' b'the' b'small' b'starling' b'is' b'small' b',' b'and' b'generally' b'began' b'to' b'find' b'food' b'.' b'Or' b'these' b'reasons' b'and'
    b'thus' b'equal' b'only' b'as' b'a' b'narrower' b',' b'he' b'may' b'bring' b'favoring' b'regarding' b'30' b'metres' b'(' b'3' b'@.@' b'8' b'km' b')'
    b'away' b'.' b'The' b'populace' b'were' b'reduced' b',' b'after' b'these' b'fused' b'birds' b',' b'a' b'common' b'silvery' b'activity' b',' b'it' b'is' b'rare'
    b'up' b'career' b'neutrinos' b'.' b'Large' b'owl' b'differs' b'his' b'lower' b'fossils' b'over' b'inflicted' b'needs' b'to' b'intend' b'an' b'threat' b',' b'but' b'approximately'
    b'100' b'%' b'of' b'a' b'large' b'abdomen' b'future' b'.' b'As' b'some' b'birds' b'generally' b'\xe2\x88\x92' b'all' b',' b'they' b'were' b'five' b'distinct' b'for'
    b'hygroscopic' b',' b'which' b'would' b'be' b'rapidly' b'equated' b'.' b'During' b'these' b'breeding' b',' b'they' b'listed' b'for' b'flight' b'or' b'striking' b'limiting' b'irregularly'
    b'access' b'such' b'as' b'cornerstone' b'.' b'For' b'example' b',' b'this' b'may' b'need' b'to' b'return' b',' b'indeed' b'largely' b'at' b'about' b'every' b'potentially'
    b'compared' b'\xe2\x80\x94' b'but' b'may' b'be' b'approach' b'to' b'copulation' b'.' b'In' b'the' b'orbit' b',' b'they' b'are' b'200th' b'Europe' b'Alexander' b';' b'they'
    b'ask' b'small' b'plants' b'on' b'maturity' b'.' b'<unk>' b'Intracoastal' b'chaos' b'will' b'be' b'involved' b'to' b'be' b'their' b'<unk>' b'.' b'Within' b'example' b','
    b'it' b'<unk>' b'accident' b'across' b'intense' b'areas' b'of' b'pain' b'.' b'A' b'electron' b'Parvati' b'make' b'to' b'a' b'eye' b'Kennet' b'on' b'replay' b'the'
    b'Klingon' b'Sea' b',' b'and' b'Childs' b'finds' b'three' b'risk' b'.' b'When' b'Liang' b'@-@' b'people' b'have' b'very' b'green' b',' b'the' b'very' b'common'
    b'exterior' b'species' b'have' b'<unk>' b'and' b'when' b'proposal' b'do' b'not' b'adulthood' b'.' b'If' b'they' b'see' b'them' b'this' b'court' b',' b'New' b'Zealand'
    b',' b'relations' b',' b'and' b'<unk>' b'Kaimanawa' b'nests' b'.' b'Form' b'repeated' b'or' b'decrease' b'down' b'some' b'grass' b'or' b'Shum' b',' b'agent' b'heavy'
    b'herding' b'projections' b'of' b'tea' b'and' b'185' b'.' b'<eos>' b'grapes' b',' b'suitable' b'Motion' b'and' b'<unk>' b',' b'even' b'sternum' b'including' b'their' b'eye'
    b'will' b'help' b'predators' b'action' b'by' b'contracting' b'helpless' b'.' b'Along' b'foundations' b'or' b'vineyards' b',' b'during' b'Waymon' b'the' b'kakapo' b'is' b'wanted' b'intense'
    b',' b'when' b'charts' b'found' b'note' b'towards' b'any' b'other' b'species' b'via' b'its' b'ice' b'.' b'Afterwards' b',' b'therefore' b',' b'there' b'has' b'with'
    b'food' b'proteins' b'(' b'powered' b'although' b'Christians' b'often' b'tooth' b'are' b'produced' b'by' b'pioneering' b'<unk>' b'service' b'to' b'Annapolis' b'@-@' b'drawn' b'as' b'occupy'
    b'magnetic' b'commissions' b'on' b'insects' b')' b'.' b'Many' b'nests' b'have' b'seen' b'a' b'infested' b'defined' b'calcium' b'season' b',' b'where' b'nearly' b'causing' b'brown'
    b'birds' b'that' b'come' b'into' b'multiple' b'other' b'houses' b':' b'any' b'<unk>' b'and' b'mottled' b'Fonzie' b',' b'large' b'<unk>' b',' b'<unk>' b'mice' b','
    b'/' b'<unk>' b',' b'twist' b'or' b'as' b'though' b',' b'they' b'observed' b'them' b',' b'Nursery' b'invasions' b',' b'activate' b'cold' b',' b'they' b'are'
    b'being' b'seen' b'as' b'four' b'or' b'seven' b'inhabitants' b'fired' b'two' b'hours' b'.' b'<eos>' b'Because' b'of' b'a' b'starboard' b',' b'entrances' b'of' b'149'
    b'eggs' b',' b'they' b'important' b'<unk>' b'from' b'greater' b'Mycena' b'culture' b',' b'with' b'Mere' b'blind' b',' b'element' b'<unk>' b',' b'<unk>' b'acts' b','
    b'<unk>' b',' b'Flint' b',' b'a' b'monazite' b'fragments' b'towns' b':' b'the' b'gill' b'component' b',' b'and' b'solving' b'nest' b'habits' b'(' b'<unk>' b','
    b'and' b'<unk>' b')' b'behind' b'Ceres' b'flanked' b'by' b'Jubba' b'invertebrates' b'and' b'<unk>' b'External' b'pine' b'.' b'Common' b'starling' b'runs' b'at' b'6' b':'
    b'9' b'and' b'2' b'@.@' b'7' b'in' b'(' b'152' b'mm' b')' b'of' b'Mercury' b'(' b'up' b'eat' b'for' b'124' b'\xe2\x80\x93' b'27' b')'
    b'have' b'penetrated' b'negative' b'groups' b'frequently' b'by' b'piano' b',' b'causing' b'Mongolia' b'/' b'65' b'in' b'Norway' b',' b'25' b'in' b'4' b'to' b'9'
    b'cm' b'(' b'2' b'@.@' b'106' b'mi' b')' b'per' b'species' b'.' b'<unk>' b"'s" b'<unk>' b'retitled' b'growling' b',' b'Paranthodon' b'collided' b',' b'in'
    b'particular' b'of' b'pale' b'nests' b'.' b'These' b'males' b'include' b'traverse' b'18' b'or' b'22' b'by' b'9' b'\xe2\x80\x93' b'4' b'cm' b'(' b'8' b'ft'
    b')' b'thick' b',' b'unless' b'others' b'are' b'also' b'consumed' b'up' b'with' b'very' b'male' b'or' b'<unk>' b'.' b'As' b'no' b']' b'source' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 187.5
    loss: 5.168
    elapsed time (seconds): 105.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  59.572 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
