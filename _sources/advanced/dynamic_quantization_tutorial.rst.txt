.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'be' b'associated' b'by' b'the' b'Welsh' b'contract' b'because' b'to' b'see' b'Croats' b'and' b'the' b'eldest' b'huge' b'hanging' b'school' b'is' b'coming' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Aftermath' b'=' b'=' b'<eos>' b'<eos>' b'Dublin' b',' b'underway' b'in' b'1981' b',' b'indicates' b'housing' b'legal' b'observations' b'from'
    b'a' b'Cynan' b'.' b'Additionally' b',' b'common' b'numbers' b'of' b'Mead' b',' b'may' b'be' b'able' b'to' b'have' b'children' b'and' b'The' b'most' b'powerful'
    b'being' b'<unk>' b'.' b'<eos>' b'Because' b'of' b'formerly' b'50' b'@.@' b'5' b'lb' b',' b'they' b'were' b'strongly' b'first' b'introduced' b'by' b'in' b'total'
    b'or' b'in' b'development' b'.' b'An' b'native' b'that' b'females' b'<unk>' b'around' b'1803' b',' b'when' b'they' b'are' b'determined' b'after' b'after' b'These' b'eggs'
    b',' b'resulting' b'in' b'the' b'combat' b',' b'maintaining' b'beings' b'the' b'<unk>' b'@-@' b'shaped' b'<unk>' b'(' b'2004' b')' b'.' b'The' b'technique' b'to'
    b'detail' b'Expert' b'is' b'also' b'pale' b'broken' b'.' b'Based' b'only' b'in' b'Ireland' b',' b'when' b'by' b'the' b'debates' b',' b'river' b'recommendations' b'did'
    b'not' b'stop' b'strong' b',' b'or' b'the' b'night' b'of' b'the' b'sulfide' b'"' b'roasted' b'[' b'or' b']' b',' b'so' b'as' b'they' b'find'
    b'there' b'from' b'Best' b'communities' b'"' b'.' b'<eos>' b'Jordan' b'(' b'1944' b')' b'was' b'also' b'buried' b'in' b'terms' b'of' b'anymore' b'forming' b'beam'
    b'of' b'distribution' b',' b'though' b'others' b'added' b'to' b'Greenland' b'<unk>' b'may' b'be' b'Without' b'and' b'the' b'northerly' b'<unk>' b'of' b'normal' b',' b'<unk>'
    b',' b'Domingo' b'years' b'very' b'than' b'to' b'give' b'part' b'of' b'the' b'rows' b'or' b'custom' b'female' b',' b'in' b'whom' b'they' b'are' b'Orders'
    b'.' b'However' b',' b'when' b'provoked' b',' b'they' b'would' b'die' b'to' b'other' b'sensation' b',' b'even' b'cement' b'or' b'insects' b',' b'it' b'has'
    b'checked' b'so' b'long' b'playing' b'G' b'"' b'<unk>' b'"' b'.' b'However' b',' b'it' b'is' b'probably' b'mentioned' b'by' b'state' b',' b'where' b'they'
    b'are' b'prohibited' b'in' b'what' b'can' b'drop' b'as' b'from' b'their' b'Apostolic' b'zone' b'.' b'But' b'they' b'do' b'not' b'fall' b'to' b'be' b'printed'
    b'otherwise' b'after' b',' b'or' b'eventually' b'even' b'crops' b'further' b'to' b'<unk>' b'it' b'of' b'short' b'nestlings' b'.' b'Three' b'plants' b'claims' b'that' b'at'
    b'least' b'one' b'fifty' b'other' b'tribal' b'starlings' b'have' b'been' b'observed' b'to' b'be' b'<unk>' b'since' b'his' b'thickness' b'.' b'Males' b'pulled' b'at' b'Bush'
    b'where' b'they' b'rulers' b'the' b'mist' b',' b'suggesting' b'they' b'have' b'their' b'stomach' b'to' b'be' b'performed' b'.' b'<eos>' b'Crash' b'Boom' b'Bang' b'!'
    b'decided' b'to' b'be' b'than' b'one' b'965' b'(' b'twenty' b'denticles' b')' b',' b'designed' b'to' b'increase' b'and' b'extensive' b'or' b'other' b'prey' b'methods'
    b',' b'and' b'special' b'birds' b'appears' b'to' b'consider' b'greater' b'mistakes' b'.' b'V.' b'birds' b'evangelical' b'changes' b',' b'such' b'as' b'extinct' b'diamond' b','
    b'sometimes' b'even' b'as' b'as' b'one' b'by' b'dissolve' b'them' b'.' b'They' b'measuring' b'maintained' b'reviewing' b'such' b'a' b'Caribbean' b'behaviour' b'.' b'Due' b'to'
    b'the' b'larger' b'behaviour' b'of' b'genius' b',' b'they' b'are' b'popular' b'religious' b'or' b'major' b';' b'they' b'are' b'allowed' b'to' b'be' b'feuding' b'.'
    b'As' b'one' b'significant' b'starlings' b',' b'they' b'fall' b'in' b'other' b'charities' b',' b'when' b'they' b'were' b'commonly' b'viviparous' b'without' b'director' b'drills' b'to'
    b'no' b'.' b'They' b'may' b'be' b'able' b'but' b'little' b'arranged' b'largely' b'.' b'<unk>' b'winds' b'Senj\xc5\x8d' b'<unk>' b',' b'<unk>' b'structures' b'do' b'not'
    b'be' b'<unk>' b'as' b'marries' b'without' b'around' b'breeze' b'.' b'Once' b'the' b'symbol' b'roughly' b'people' b'should' b'apply' b'so' b',' b'they' b'combine' b'the'
    b'same' b',' b'because' b'most' b'difficult' b'chicks' b'Arbeiderblad' b'count' b'.' b'<unk>' b',' b'depend' b'on' b'cell' b',' b'may' b'be' b'seen' b'in' b'some'
    b'birds' b'boom' b',' b'so' b'dun' b'apoptotic' b'cooling' b'might' b'be' b'feeds' b'to' b'have' b'extend' b'in' b'his' b'workplace' b'.' b'Proceeding' b',' b'when'
    b'such' b'is' b'often' b'far' b',' b'the' b'bird' b'weakness' b'to' b'have' b'three' b'high' b'pouches' b'.' b'About' b'example' b'blocks' b'in' b'84' b'return'
    b',' b'24' b'of' b'three' b'large' b'broods' b'built' b'only' b'for' b'258' b'combinatorial' b'areas' b',' b'but' b'do' b'one' b'million' b'spaced' b'movement' b'.'
    b'They' b'are' b'hard' b'exclusively' b',' b'and' b'their' b'common' b'heritage' b'may' b'have' b'been' b'worn' b'by' b'Juan' b'method' b'.' b'Their' b'apparent' b'range'
    b'are' b'currently' b'smaller' b',' b'but' b'some' b'are' b'aware' b'of' b'Romanesque' b',' b'while' b'significant' b'structures' b'are' b'found' b',' b'known' b'as' b'West'
    b'States' b',' b'are' b'common' b',' b'or' b'if' b'any' b'course' b'are' b'structured' b'.' b'This' b'leaves' b'their' b'leaving' b'premises' b'and' b'<unk>' b'<unk>'
    b'plan' b'to' b'undergo' b'fifth' b'people' b'they' b'failed' b'with' b'control' b'still' b'settled' b'.' b'<eos>' b'Once' b'they' b'consider' b',' b'they' b'demonstrate' b'mammals'
    b'and' b'bass' b'approval' b',' b'often' b'significantly' b'.' b'<unk>' b',' b'or' b'Will' b'faces' b'platforms' b',' b'Rawson' b'is' b'more' b'an' b'power' b'of'
    b'his' b'own' b'parapet' b',' b'but' b'may' b'be' b'rapid' b'by' b'natural' b'females' b'that' b'<unk>' b'that' b',' b'the' b'bird' b'called' b'up' b'forward'
    b'high' b'wants' b'to' b'rush' b'SunPass' b'forests' b'.' b'Even' b'when' b'the' b'nest' b'cannot' b'distinguish' b',' b'they' b'pass' b'.' b'This' b'turns' b'after'
    b'an' b'<unk>' b'<unk>' b'brownish' b'phase' b'(' b'which' b'all' b'Pelusium' b'cannot' b'be' b'knocked' b'after' b'when' b'they' b'feed' b'in' b'heat' b')' b','
    b'and' b'so' b'translated' b',' b'they' b'find' b'as' b'yet' b'easy' b'.' b'The' b'churches' b'often' b'continue' b'to' b'be' b'an' b'pin' b'behind' b'the'
    b'same' b'vertical' b'arena' b'(' b'non' b'@-@' b'legs' b'(' b'I.' b'<unk>' b')' b'.' b'Adams' b'burn' b'Commissioned' b'(' b'i.e.' b'@-@' b'like' b'<unk>'
    b')' b'will' b'have' b'been' b'a' b'sense' b'of' b'night' b'prior' b'to' b'the' b'Irish' b'visionary' b'<unk>' b'Bible' b'(' b'see' b',' b'bearing' b'elements'
    b'of' b'ribosomes' b')' b'Wing' b'populations' b',' b'Carson' b'(' b'<unk>' b')' b',' b'137' b'@.@' b'14' b'\xe2\x80\x93' b'10' b'm' b'(' b'14' b'@.@'
    b'9' b'in' b')' b'masala' b'theologians' b',' b'approximately' b'50' b'kilometres' b'(' b'32' b'@.@' b'9' b'ft' b')' b'Aquila' b'spiders' b',' b'often' b'weather'
    b'child' b'.' b'The' b'domain' b'of' b'females' b'firm' b',' b'plant' b'even' b'exit' b';' b'as' b'they' b'discussed' b',' b'elliptical' b'times' b',' b'at'
    b'different' b'points' b'.' b'<eos>' b'[' b'there' b'are' b'no' b'or' b'other' b'insects' b'themselves' b'lacks' b'straight' b'decisions' b'to' b'sections' b',' b'increase' b'coral'
    b'cells' b'(' b'attributed' b'to' b'tubes' b',' b'they' b'may' b'be' b'historically' b'tightly' b'usual' b'in' b'individuals' b')' b'.' b'A' b'female' b'13' b'or'
    b'100' b'minutes' b'were' b'unnecessary' b'.' b'A' b'similar' b'sequence' b',' b'short' b'precise' b'or' b'birds' b'fairies' b',' b'the' b'other' b'predators' b'are' b'part'
    b'of' b'the' b'unusual' b'exhausting' b'city' b'and' b'parent' b'during' b'the' b'upper' b',' b'a' b'Loch' b'coaster' b'that' b'serve' b'as' b'the' b'heart' b'Mosquito'
    b'occurs' b'.' b'<eos>' b'Because' b'of' b'their' b'scattered' b'internal' b'<unk>' b'(' b'primarily' b'<unk>' b')' b'lack' b'such' b'as' b'Tacuma' b',' b'European' b','
    b'and' b'ice' b'scales' b',' b'they' b'are' b'so' b'difficult' b'to' b'find' b'diversity' b'if' b'sperm' b'it' b',' b'some' b'notably' b'nests' b',' b'since'
    b'differentiation' b'murders' b'Shakespeare' b'as' b'they' b'am' b'Fleetwood' b'due' b'to' b'food' b'.' b'There' b'are' b'two' b'organized' b'<unk>' b'.' b'The' b'breeding' b'@-@'
    b'based' b'starling' b'watch' b'spectroscopic' b'defences' b',' b'sometimes' b'which' b'is' b'rarely' b'recently' b'useful' b'in' b'sixties' b'and' b'human' b'fungi' b',' b'concepts' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 187.0
    loss: 5.168
    elapsed time (seconds): 98.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  53.089 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
