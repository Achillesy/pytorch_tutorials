.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'including' b'a' b'handicap' b'area' b'483' b',' b'with' b'/' b'equivalent' b'objected' b'on' b'the' b'wind' b'from' b'"' b'The' b'<unk>' b'"' b'was' b'the'
    b'stage' b'for' b'lives' b'from' b'a' b'anterior' b'head' b'debut' b',' b'for' b'example' b'and' b'within' b'environmental' b'Dean' b'G.' b'proph\xc3\xa8te' b',' b'After' b'were'
    b'described' b'as' b'"' b'at' b'least' b'agreement' b'to' b'leave' b'people' b'a' b'issue' b',' b'making' b'some' b'renovate' b'Wikimania' b'instead' b'"' b',' b'including'
    b'total' b'reviewer' b'Let' b'John' b'whose' b'loop' b'and' b'renowned' b'with' b'fisheries' b'and' b'other' b'parents' b'.' b'As' b'a' b'slaughter' b',' b'Ceres' b'was'
    b'<unk>' b'Buddha' b'Nota' b'capped' b'making' b'bodies' b'in' b'The' b'labourers' b'.' b'He' b'patrolled' b'Switzerland' b'Mishra' b'and' b'promised' b'like' b'respect' b'to' b'scratch'
    b'to' b'advertise' b'seeping' b'for' b'a' b'Formula' b'One' b'race' b'and' b'therefore' b'oceans' b'.' b'When' b'of' b'"' b'power' b',' b'Sign' b'"' b'at'
    b'seven' b'years' b',' b'the' b'unit' b'specifically' b'long' b'turned' b'to' b'a' b'goal' b'of' b'transept' b'.' b'<eos>' b'Continuing' b'in' b'375' b'appeal' b'from'
    b'use' b'wins' b'(' b'Sunday' b'staffing' b')' b',' b'William' b'P.' b'Wilkinson' b'(' b'died' b'2006' b')' b'was' b'a' b'collision' b'of' b'her' b'native'
    b'folklore' b',' b'and' b'contributed' b'to' b'the' b'13th' b'year' b'in' b'Australia' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'General' b'circuit' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'On' b'a' b'cello' b'of' b'designer' b'Lincoln' b'!' b'held' b'proceed' b'in' b'his' b'next' b'conquest' b'and' b'political' b'profile' b','
    b'<unk>' b'women' b'on' b'the' b'1966' b'public' b'Story' b'includes' b'all' b'created' b'works' b'on' b'their' b'throne' b'with' b'a' b'bird' b'of' b'magical' b'culture'
    b',' b'primarily' b'sanitation' b'<unk>' b'<unk>' b'.' b'On' b'of' b'HBO' b'head' b'"' b'public' b'Mech' b'"' b',' b'"' b'we' b'think' b'Tufaro' b'was'
    b'steal' b'on' b'the' b'Lord' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Audiobook' b'smoking' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Man' b'Sandy' b'Stuart'
    b'of' b'Compounds' b'gave' b'the' b'first' b'debut' b'after' b'his' b'childhood' b'length' b'of' b'Volume' b'racing' b',' b'a' b'film' b'concert' b'diet' b',' b'known'
    b'as' b'Director' b'.' b'Opponents' b'v' b'and' b'hazardous' b'in' b'general' b'1986' b'uncertain' b'stories' b'included' b'only' b'seven' b'assists' b',' b'based' b'on' b'the'
    b'fourth' b'single' b',' b'developed' b'in' b'1939' b'.' b'His' b'tempo' b'in' b'1999' b'feature' b'instance' b'was' b'in' b'the' b'United' b'States' b'@-@' b'based'
    b'there' b'and' b'the' b'First' b'National' b'1686' b'(' b'played' b'as' b'Mariah' b'a' b'Christianity' b')' b'Hauser' b',' b'entertainment' b'second' b'@-@' b'played' b','
    b'quite' b'in' b'consecutive' b'hospitals' b'.' b'Mosley' b"'s" b'diary' b'live' b'more' b'than' b'60' b'%' b'these' b'items' b'learns' b'that' b'the' b'five' b'large'
    b'attraction' b'for' b'people' b'can' b'occur' b'with' b'large' b'themes' b'of' b'an' b'map' b'\xe2\x80\x94' b'which' b'would' b'be' b'assassinated' b'with' b'some' b'eruptions' b','
    b'and' b'worked' b'on' b'the' b'early' b'summer' b'of' b'this' b'period' b',' b'and' b'because' b'he' b'the' b'best' b'mayor' b'engine' b'king' b'emptied' b'.'
    b'One' b'other' b'notes' b'Rankings' b'may' b'be' b'turned' b'fearless' b'or' b'kept' b'by' b'preacher' b'for' b'the' b'operation' b'on' b'one' b'of' b'the' b'previous'
    b'decade' b',' b'though' b'this' b'is' b'on' b'July' b'2' b'.' b'This' b'radar' b'hits' b'version' b'was' b'used' b'to' b'believe' b'that' b'similar' b'may'
    b'stay' b'form' b'.' b'When' b'they' b'YPM' b'"' b'HIV' b'Albert' b'Zbigniew' b'we' b'been' b'<unk>' b',' b'always' b'<unk>' b'all' b'.' b'"' b'To'
    b'53' b'minutes' b'of' b'its' b'help' b',' b'the' b'766th' b'Sun' b'told' b'the' b'character' b'to' b'create' b'dull' b'three' b'of' b'his' b'sales' b'at'
    b'elements' b'of' b'different' b',' b'such' b'the' b'<unk>' b'having' b'the' b'most' b'instances' b'(' b'there' b'of' b'Odaenathus' b'and' b'steeple' b'drums' b'in' b'five'
    b'entries' b'.' b'<eos>' b'<unk>' b'considered' b'the' b'success' b'of' b'ambition' b'in' b'concealment' b',' b'and' b'is' b'a' b'record' b'in' b'order' b'to' b'achieve'
    b'astronomers' b'until' b'the' b'ice' b'.' b'After' b'the' b'Continent' b'honesty' b'repel' b'Until' b'some' b'exploding' b',' b'the' b'birds' b'plot' b'mainly' b'because' b'they'
    b'does' b'not' b'be' b'said' b'to' b'be' b'too' b'indeed' b'useless' b'in' b'process' b'.' b'In' b'the' b'discovery' b'the' b'celebration' b'ranges' b'for' b'the'
    b'"' b'Linus' b'Ceres' b'of' b'Tessic' b'"' b',' b'who' b'found' b'it' b'to' b'confirm' b'colleagues' b'.' b'One' b'publishers' b'may' b'vary' b'at' b'March'
    b'or' b'5' b':' b'20' b'(' b'129' b'stations' b',' b'50' b'@.@' b'45' b'points' b')' b'.' b'In' b'the' b'first' b'extended' b'perspective' b','
    b'Chen' b'lives' b'advancing' b'to' b'50' b'points' b'to' b'12' b'%' b'of' b'its' b'high' b'subjects' b'.' b'They' b'is' b'an' b'loose' b'tweeter' b'from'
    b'the' b'foliage' b'Laurence' b'wives' b'found' b'North' b'full' b'.' b'Innocence' b'may' b'be' b'repatriated' b'for' b'staples' b'@-@' b'facing' b'guitar' b'paths' b'.' b'According'
    b'to' b'<unk>' b'is' b'not' b'binding' b',' b'this' b'may' b'be' b'one' b'of' b'any' b'set' b'point' b'towards' b'dark' b',' b'and' b'had' b'a'
    b'very' b'advantages' b'to' b'be' b'carried' b'to' b'.' b'He' b'does' b'not' b'act' b'for' b'the' b'election' b'flank' b'about' b'the' b'other' b'%' b'.'
    b'1' b'owl' b'appears' b'a' b'barrister' b'from' b'a' b'situation' b'of' b'crime' b'each' b'may' b'be' b'continued' b'.' b'<eos>' b'Ceres' b'illustrated' b'a' b'crowning'
    b'speed' b'start' b'others' b'that' b'lacks' b'Taylor' b'of' b'\xe2\x80\x9c' b'activity' b'.' b'Otherwise' b',' b'water' b'molecules' b'were' b'broken' b'through' b'Hawaii' b'.' b'Nevertheless'
    b',' b'this' b'was' b'only' b'exceptional' b'that' b'the' b'player' b'ends' b'down' b'pain' b'Vistara' b',' b'not' b'regulate' b',' b'deteriorating' b'brown' b',' b'and'
    b'organic' b'the' b'eggs' b'and' b'inexperienced' b'perch' b'.' b'NRC' b'therefore' b'feel' b'a' b'bull' b'backstage' b'that' b'slow' b'their' b'dodos' b'to' b'specific' b'calls'
    b'.' b'Australia' b'Provide' b'28' b'points' b'in' b'the' b'primary' b'space' b'and' b'one' b'stone' b'methods' b'will' b'be' b'called' b'any' b'distant' b'veil' b'.'
    b'If' b'his' b'forehead' b'contributes' b'its' b'contract' b',' b'it' b'may' b'be' b'making' b'their' b'to' b',' b'but' b'females' b'still' b'encounter' b'this' b'parents'
    b'.' b'<eos>' b'Despite' b'unlocking' b'a' b'bird' b'official' b'headpiece' b',' b'they' b'63' b'eggs' b'around' b'each' b'other' b'quality' b',' b'without' b'male' b'breeding'
    b'<unk>' b'and' b'three' b'sin' b'.' b'Moreover' b',' b'after' b'they' b'know' b'they' b'<unk>' b'or' b'do' b'a' b'large' b'Lindelof' b'to' b'end' b'within'
    b'.' b'To' b'stop' b'they' b'have' b'evening' b'when' b'they' b'make' b'Arora' b'trees' b'and' b'of' b'walking' b'.' b'<eos>' b'Elsewhere' b'for' b'Yu' b'with'
    b'<unk>' b'left' b'back' b'at' b'<unk>' b',' b'and' b'depending' b'from' b'CNY' b',' b'on' b'the' b'floor' b'of' b'their' b'origin' b'.' b'They' b'finds'
    b'beauty' b',' b'Enzymes' b',' b'offspring' b',' b'and' b'<unk>' b'.' b'At' b'times' b',' b'London' b',' b'flock' b',' b'and' b'broods' b'is' b'different'
    b',' b'making' b'them' b'to' b'prevent' b'a' b'way' b'to' b'remove' b'other' b'insects' b'.' b'Furthermore' b',' b'it' b'has' b'modified' b'calls' b'with' b'much'
    b'other' b',' b'crops' b'/' b'age' b',' b'heavier' b'@-@' b'venom' b',' b'or' b'charged' b'a' b'temporary' b'eye' b'.' b'Introduced' b',' b'some' b'on'
    b'them' b',' b'such' b'as' b'screaming' b',' b'Finland' b',' b'and' b'food' b',' b'led' b'it' b'to' b'with' b'the' b'frequency' b'belt' b',' b'prevent'
    b'only' b'challenge' b'so' b'bass' b'.' b'fluid' b'mRNA' b',' b'i' b',' b'green' b',' b'increasing' b'happiness' b'of' b'<unk>' b',' b'may' b'be' b'<unk>'
    b'.' b'There' b'are' b'high' b'tails' b'during' b'ocean' b'labor' b'.' b'They' b'came' b'in' b'it' b'as' b'his' b'eggs' b'.' b'The' b'informal' b'female'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.2
    loss: 5.168
    elapsed time (seconds): 113.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  37.501 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
