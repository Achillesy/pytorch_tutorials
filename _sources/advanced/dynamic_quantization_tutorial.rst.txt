.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'maintaining' b'Yang' b'property' b',' b'first' b'accompanied' b'by' b'<unk>' b'contests' b'.' b'A' b'appeal' b'after' b'that' b'it' b'was' b'not' b'<unk>' b'research'
    b';' b'of' b'the' b'New' b'Zealand' b'face' b',' b'is' b'a' b'ankle' b'landmark' b',' b'because' b'Raffles' b'leaders' b'do' b'not' b'be' b'NP' b'.'
    b'Most' b'children' b'were' b'described' b'in' b'small' b'languages' b',' b'which' b'Sardinia' b'would' b'live' b'to' b'be' b'completed' b'in' b'a' b'1850' b'collection' b'.'
    b'<eos>' b'A' b'kakapo' b'with' b'independent' b'full' b',' b'the' b'emission' b'in' b'the' b'Roud' b'Negotiations' b'(' b'now' b'occasional' b'average' b'as' b'Meg' b','
    b'I' b'was' b'given' b'links' b'in' b'the' b'Chinese' b')' b'were' b'rated' b'by' b'2' b'@.@' b'2' b'in' b'(' b'volumes' b'located' b')' b','
    b'the' b'same' b'stands' b'to' b'free' b'in' b'mixing' b'Pier' b'.' b'Over' b'the' b'date' b'of' b'Blackstone' b',' b'his' b'list' b'as' b'pre' b'@-@'
    b'scale' b'or' b'topics' b'of' b'Gray' b'and' b'Clothes' b',' b'were' b'between' b'AADT' b',' b'almost' b'48' b'%' b'.' b'<eos>' b'<eos>' b'<eos>' b'='
    b'Engineering' b'Atlantic' b'sailed' b'=' b'<eos>' b'<eos>' b'The' b'1868' b'stories' b',' b'with' b'a' b'popular' b'structure' b'<unk>' b',' b'has' b'plans' b'from' b'Ceres'
    b'along' b'with' b'23' b'%' b'upon' b'the' b'increased' b'mercenary' b'and' b'map' b'losses' b'which' b'spread' b'over' b'27' b'Crowns' b'.' b'hears' b'is' b'about'
    b'9' b'cm' b'(' b'16' b'ft' b')' b'and' b'flies' b'more' b'than' b'5' b'@.@' b'4' b'm' b'(' b'200' b'mm' b')' b'.' b'Some'
    b'two' b'female' b'areas' b'have' b'collapsed' b'a' b'planet' b'same' b'flame' b'said' b':' b'"' b'We' b"'ll" b'be' b'part' b'of' b'another' b'bird' b'from'
    b'the' b'[' b'Destiny' b']' b'age' b'whose' b'ridges' b'who' b'is' b'a' b'coaster' b'to' b'reproductive' b'the' b'numbers' b'of' b'400' b'%' b'of' b'kakapo'
    b'and' b'condition' b',' b'but' b'I' b'could' b'realize' b',' b'and' b'just' b'that' b'at' b'to' b'if' b'they' b"'ve" b'really' b'my' b'weight' b'.'
    b'What' b'is' b'unable' b'to' b'build' b'a' b'blame' b'\xe2\x80\x94' b'and' b'or' b'shelter' b'in' b',' b'you' b'(' b'<unk>' b'literary' b'people' b'and' b'attendant'
    b')' b'a' b'anti' b'@-@' b'story' b'period' b'\xe2\x80\x9d' b'"' b'and' b'long' b'a' b'lack' b'of' b'time' b'remain' b'from' b'Weaver' b'.' b'Although' b'there'
    b'is' b'no' b'"' b'tapered' b'hairs' b'"' b',' b'they' b'were' b'almost' b'merciless' b',' b'which' b'later' b'rushed' b'to' b'have' b'rewrite' b'their' b'advantage'
    b'with' b'the' b'sex' b'.' b'The' b'Pongola' b'series' b'is' b'alarmed' b'by' b'earthstar' b'or' b'with' b'its' b'rich' b'vertical' b'role' b'.' b'<eos>' b'The'
    b'Kakapo' b'inscription' b'of' b'fonts' b'can' b'be' b'visible' b'in' b'Sir' b'Calloway' b'Constructors' b'(' b'Hebrew' b'as' b'the' b'Sand' b')' b'.' b'But' b'a'
    b'planet' b'has' b'been' b'going' b'to' b'reinforce' b'a' b'possibility' b'of' b'distantly' b'bird' b'missiles' b',' b'the' b'broad' b'thing' b'of' b'seed' b'birds' b'of'
    b'each' b'organizations' b'deep' b'.' b'It' b'can' b'be' b'disarmed' b'within' b',' b'Mariana' b',' b'they' b'periodically' b'produces' b'it' b'!' b'basically' b'they' b'urged'
    b'Fraser' b'of' b'Ceres' b'.' b'Despite' b'this' b'other' b',' b'Inari' b',' b'boiled' b'in' b'<unk>' b'training' b',' b'but' b'this' b'ambiguous' b'town' b'effectiveness'
    b'a' b'state' b',' b'known' b'as' b'other' b'wings' b'that' b'included' b'"' b'a' b'campaigning' b'working' b'to' b'chastity' b'on' b'each' b'side' b'have' b'a'
    b'effect' b'"' b'.' b'But' b'followed' b'the' b'1980s' b'and' b'stage' b'seen' b':' b'To' b'think' b'a' b'combination' b'of' b'Hathor' b'by' b'person' b','
    b'the' b'female' b',' b'well' b'as' b'brought' b'their' b'hands' b'is' b'adjusted' b',' b'when' b'there' b'are' b'only' b'hoped' b'that' b'they' b'should' b"'t"
    b'be' b'obtained' b'to' b'identify' b'consistently' b'video' b'when' b'they' b'cannot' b'once' b'leave' b'so' b'on' b'earlier' b'life' b'.' b'<eos>' b'As' b'possibly' b'kakapo'
    b'have' b'his' b'boiling' b',' b'they' b'sounded' b'ghats' b'to' b'measure' b'from' b'year' b'.' b'As' b'they' b'do' b'imitated' b'not' b',' b'they' b'do'
    b'on' b'good' b'ingredients' b'during' b'are' b'.' b'When' b'some' b'their' b'other' b'birds' b'represented' b'a' b'mixture' b'of' b'imagery' b'account' b'luminous' b'symbiotic' b'males'
    b',' b'or' b'sportswriters' b',' b'cared' b'are' b'elements' b'of' b'Revolver' b'condoms' b'and' b'with' b'the' b'revue' b',' b'hanging' b'without' b'wings' b'and' b'thus'
    b'collaborative' b'one' b'south' b',' b'Flint' b'observing' b'8' b'\xe2\x80\x93' b'4' b'on' b'the' b'east' b'.' b'<eos>' b'Following' b'a' b'year' b',' b'the' b'key'
    b',' b'some' b'other' b'rainfall' b'has' b'Ashley' b'extend' b',' b'a' b'star' b'star' b',' b'or' b'a' b'rapid' b'<unk>' b'were' b'found' b'at' b'10'
    b':' b'28' b'in' b'retaliation' b'.' b'Also' b'-' b',' b'it' b'is' b'interpreted' b'as' b'a' b'whole' b'tip' b'as' b'it' b'contains' b'their' b'eating'
    b'specimen' b'to' b'grow' b'.' b'This' b'technique' b'sing' b'in' b'a' b'intermediate' b'generic' b'body' b',' b'and' b'agriculture' b'ran' b'by' b'gag' b'as' b'they'
    b'loses' b'punt' b',' b'<unk>' b'<unk>' b',' b'Nasor' b',' b'three' b'varieties' b'compared' b'.' b'In' b'particular' b',' b'obstruct' b'partnered' b'(' b'notably' b','
    b'Audacious' b'declares' b'chronic' b'forests' b')' b'that' b'can' b'be' b'found' b'.' b'There' b'are' b'birds' b'that' b'appears' b'to' b'begin' b'within' b'suspicious' b'oldest'
    b'.' b'<eos>' b'Scully' b'have' b'controlled' b'hunting' b'tail' b',' b'as' b'it' b'has' b'a' b'slightly' b'thick' b',' b'way' b'to' b'build' b'coming' b'at'
    b'de' b'Two' b'.' b'<eos>' b'Nielsen' b'starlings' b'are' b'shaped' b'one' b'@-@' b'resort' b',' b'it' b'may' b'eat' b'other' b'birds' b'Franklin' b',' b'averaging'
    b'during' b'O' b'One' b'.' b'Many' b'measures' b'call' b'how' b'cellular' b'activity' b'is' b'males' b'required' b'as' b'difficult' b'.' b'When' b'they' b'are' b'priced'
    b'greater' b'thoughts' b'and' b'close' b',' b'they' b'exception' b'.' b'It' b'help' b'so' b'a' b'reasonable' b'eclipse' b'of' b'then' b'transits' b'up' b'<unk>' b'to'
    b'areas' b'that' b'can' b'generate' b':' b'be' b'probably' b'definitive' b'.' b'Other' b'are' b'very' b'justified' b'than' b'it' b'.' b'Cornic' b'effects' b'instead' b'of'
    b'every' b'number' b'of' b'individuals' b',' b'and' b'gives' b'many' b'her' b'at' b'least' b'one' b'older' b'difficulty' b'39' b'.' b'A' b'main' b'<unk>' b'spectral'
    b'outgassing' b'may' b'enter' b'creatures' b'less' b'than' b'B' b'.' b'<eos>' b'Further' b'with' b'Nubia' b',' b'males' b'Plum' b'Brown' b'mainline' b'from' b'viewpoint' b'.'
    b'They' b'are' b'loud' b',' b'although' b'Will' b'also' b'notes' b'to' b'tourists' b'such' b'as' b'nesting' b'to' b'prevent' b'good' b'starling' b'them' b'under' b'them'
    b'.' b'Almost' b'this' b'species' b'points' b'in' b'or' b'(' b'his' b'MacDonald' b'power' b')' b',' b'they' b'fall' b'Ash' b',' b'and' b'roost' b'tiles'
    b'Kajal' b'from' b'their' b'kitchens' b'.' b'<eos>' b'Despite' b'Celtic' b'starlings' b',' b'they' b'are' b'distantly' b',' b'and' b'they' b'grows' b'off' b'<unk>' b'unreleased'
    b',' b'so' b'provided' b'thousands' b'of' b'claret' b',' b'not' b'Kenny' b'.' b'They' b'light' b'a' b'bend' b'for' b'food' b'significant' b'therapeutic' b'starlings' b','
    b'especially' b',' b'for' b'example' b'.' b'Twenty' b'of' b'the' b'need' b'during' b'military' b',' b'adult' b',' b'have' b'moved' b'to' b'one' b'another' b','
    b'although' b'for' b'ability' b'it' b'is' b'regardless' b'in' b'birds' b'that' b'nine' b'unique' b'structure' b'often' b'appear' b'in' b'contact' b':' b',' b'prepared' b'results'
    b'so' b'on' b'new' b'behaviour' b'.' b'A' b'female' b'swallows' b',' b'was' b'followed' b'by' b'a' b'small' b'angle' b'and' b'fixing' b'another' b'powers' b'of'
    b'type' b'14' b'\xe2\x80\x93' b'11' b'in' b'the' b'head' b'to' b'smaller' b',' b'aggressive' b',' b'and' b'female' b',' b'fully' b'to' b'idea' b'for' b'them'
    b'.' b'<eos>' b'In' b'the' b'United' b'States' b',' b'common' b'starlings' b'decreased' b'west' b'of' b'males' b'such' b'as' b'fat' b'or' b'whalebone' b',' b'which'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 204.2
    loss: 5.168
    elapsed time (seconds): 109.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  21.292 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
