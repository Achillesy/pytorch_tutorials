.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'@-@' b'Jade' b'garments' b'Fatimah' b',' b'which' b'appears' b'to' b'be' b'found' b'on' b'the' b'Concorde' b'network' b'in' b'1795' b'like' b'not' b'suffering' b'this'
    b'book' b',' b'apart' b'to' b'Oxford' b',' b'a' b'partial' b'arm' b'.' b'<eos>' b'Black' b'grounds' b'among' b'<unk>' b'support' b'as' b'"' b'I' b'was'
    b'driving' b'that' b'and' b'before' b'<unk>' b'Berlioz' b'channel' b'I' b'think' b'-' b'I' b'could' b'call' b'a' b'new' b'colonization' b'...' b'like' b'exploring' b'carelessly'
    b'above' b'us' b'and' b'the' b'life' b'of' b'Nature' b'"' b'.' b'Black' b'Crash' b'Andrew' b'los' b'Development' b'version' b'that' b'Chief' b'"' b'wanted' b'to'
    b'send' b'the' b'asteroid' b'military' b'plantation' b'generating' b'there' b'Forces' b'surmised' b'New' b'chemist' b'.' b'"' b'"' b'The' b'Art' b'Waterfall' b'Like' b'devotional' b'"'
    b'are' b'console' b'@-@' b'heterosexual' b'from' b'"' b'libraries' b'"' b',' b'followed' b'by' b'plausible' b';' b'the' b'Booker' b'News' b'is' b'written' b'up' b'for'
    b'a' b'efforts' b'to' b'show' b'the' b'orbit' b'of' b'Cantrell' b'.' b'1905' b',' b'rough' b'Cases' b',' b'almost' b'along' b'to' b'<unk>' b',' b'and'
    b'founded' b'allowing' b'roughly' b'600' b'million' b'years' b'.' b'Further' b'music' b':' b'Three' b'birds' b'acronym' b'the' b'most' b'part' b',' b'and' b'represents' b'this'
    b'predators' b'generally' b'that' b'perceived' b'.' b'Written' b'out' b'of' b'73' b'\xe2\x80\x93' b'experimentation' b',' b'it' b'is' b'never' b'heavily' b'gifted' b'and' b'protected' b'.'
    b'A' b'subject' b'Catherine' b'of' b'metalwork' b'occurs' b'on' b'15' b'April' b'1890' b',' b'and' b'on' b'the' b'publication' b'of' b'only' b'six' b'seasons' b'than'
    b'Chabad' b'spacing' b'and' b'Vistara' b'in' b'The' b'world' b',' b'he' b'were' b'a' b'combination' b'of' b'age' b'.' b'The' b'study' b',' b'with' b'the'
    b'L\xc3\xbctzow' b',' b'has' b'characterized' b'the' b'Clayton' b'Rancho' b'Line' b'in' b'South' b'America' b'and' b'has' b'previously' b'come' b'more' b'frequently' b'without' b'several' b'upstream'
    b',' b'while' b'symbiont' b'noted' b'that' b'the' b'potential' b'committee' b'was' b'a' b'needle' b'to' b'become' b'it' b'is' b'a' b'sculpted' b'in' b'being' b'retro'
    b'system' b'.' b'<eos>' b'innovator' b'included' b'forced' b'significantly' b'side' b'hitting' b'Pohl' b'but' b'finally' b'principally' b'on' b'the' b'platform' b',' b'but' b'the' b'maritime'
    b'characters' b'are' b'fed' b'so' b'that' b'their' b'final' b'thing' b',' b'at' b'its' b'home' b'unit' b'"' b'could' b'be' b'Eventually' b'six' b'times' b'old'
    b'than' b'your' b'members' b'.' b'We' b'usually' b'began' b'on' b'small' b'demands' b'of' b'full' b'games' b',' b'and' b'give' b'a' b'record' b'on' b'whether'
    b'"' b'<unk>' b';' b'and' b'the' b'great' b'kingdoms' b'to' b'help' b'other' b'details' b'requirements' b'parties' b',' b'is' b'forested' b'to' b'have' b'put' b'its'
    b'Gainsborough' b'and' b'Guided' b'them' b'.' b'"' b'John' b',' b'on' b'the' b'Pulse' b'of' b'odds' b'"' b'is' b'discovered' b'to' b'all' b'out' b'a'
    b'idea' b'of' b'Goldberg' b"'" b'birth' b'.' b'Hornung' b',' b'in' b'1771' b',' b'awarded' b'Lad' b'a' b'fan' b'previously' b'with' b'a' b'orbit' b'of'
    b'<unk>' b"'s" b'mates' b',' b'even' b'killed' b',' b'and' b'the' b'theme' b'of' b'characters' b',' b'they' b'went' b'them' b'on' b'her' b'actions' b'.'
    b'populous' b',' b'without' b'Mall' b'was' b'difficulty' b'to' b'come' b'around' b'the' b'false' b'body' b';' b'it' b'serves' b'proof' b'into' b'faulty' b'wartime' b','
    b'forcing' b'only' b'the' b'jewelled' b'<unk>' b'or' b'a' b'faith' b'with' b'genetic' b'Hampstead' b'.' b'Thus' b',' b'it' b'is' b'apparent' b'that' b'"' b'they'
    b'hanging' b'Rihanna' b'was' b'not' b'good' b'to' b'be' b'considerably' b'in' b'if' b'across' b'doing' b'a' b'few' b'dorsal' b'see' b'prosperity' b'of' b'Hindu' b','
    b'electronica' b',' b'Hilberg' b'to' b'be' b'effectively' b'well' b'Always' b'"' b'.' b'The' b'tart' b'consists' b'of' b'adults' b'may' b'be' b'brought' b'away' b','
    b'and' b'they' b'adopted' b'its' b'chair' b'<unk>' b'.' b'(' b'3' b'\xe2\x80\x93' b'8' b')' b'is' b'discovered' b'that' b'season' b',' b'which' b'is' b'the'
    b'biggest' b'reasons' b'like' b',' b'and' b'over' b'once' b'.' b'The' b'Grammar' b'membrane' b'has' b'historically' b'been' b'one' b'of' b'those' b'whether' b'Walpole' b'had'
    b'generally' b'prohibits' b'these' b'items' b'as' b'being' b'a' b'Rifle' b'log' b'planet' b'area' b'of' b'the' b'cab' b'.' b'The' b'series' b'makes' b'its' b'length'
    b'as' b'<unk>' b':' b'"' b'turns' b'out' b'of' b'bad' b'@-@' b'culture' b',' b'a' b'360' b',' b'commercial' b'tubes' b"'" b'-' b'by' b'a'
    b'young' b'draft' b'may' b'carry' b'on' b'a' b'solar' b'skin' b'.' b'"' b'It' b'also' b'is' b'more' b'difficult' b',' b'a' b'happy' b'tape' b'of'
    b'energy' b'driving' b'with' b'enables' b'other' b'difficulty' b'papyri' b'and' b'the' b'meaning' b'of' b'Ulster' b'.' b'<eos>' b'Because' b'the' b'kakapo' b'took' b'place' b'during'
    b'format' b'and' b'contact' b'up' b',' b'the' b'largest' b'boyfriend' b'of' b'native' b'male' b'may' b'have' b'Leon' b'Brachylophosaurus' b',' b'but' b'often' b'to' b'<unk>'
    b'speeches' b'are' b'Loverboy' b'from' b'scratch' b'referred' b'to' b'by' b'original' b'other' b'tail' b'.' b'This' b'siblings' b'sticks' b'when' b'625' b'rod' b'bathing' b'since'
    b'his' b'life' b'for' b'a' b'total' b'.' b'Among' b'80' b'steps' b',' b'in' b'the' b'same' b'aspect' b',' b'where' b'it' b'is' b'possible' b'to'
    b'be' b'fully' b'movements' b',' b'Affair' b'can' b'interact' b'for' b'a' b'black' b'executives' b'compared' b'on' b'a' b'ample' b'time' b'.' b'"' b'I' b'Morhange'
    b'have' b'\xe2\x80\x93' b'one' b'things' b'here' b',' b'beside' b'a' b"'" b'Free' b'will' b'have' b'a' b'single' b'at' b'night' b'.' b'"' b'<eos>' b'<eos>'
    b'=' b'=' b'Special' b'capability' b'=' b'=' b'<eos>' b'<eos>' b'Polish' b'starlings' b'also' b'exist' b'on' b'25' b'000' b'males' b',' b'which' b'timing' b'in'
    b'the' b'displays' b',' b'trivalent' b',' b'facing' b'no' b'about' b'straight' b'.' b'At' b'05' b':' b'00' b',' b'literature' b',' b'like' b'from' b'its'
    b'leans' b',' b'males' b'withdrew' b'in' b'a' b'guitar' b'range' b'during' b'Persia' b'.' b'Scully' b'around' b'a' b'planet' b'ship' b'and' b'pupils' b',' b'with'
    b'its' b'last' b'SEC' b'threat' b',' b'are' b'tasked' b'back' b'in' b'place' b'.' b'Known' b'at' b'impatient' b'/' b'grazing' b'of' b'Australia' b'and' b'coining'
    b',' b'they' b'can' b'have' b'between' b'completing' b'food' b'information' b',' b'often' b'even' b'roundabout' b'not' b'may' b'live' b'to' b'be' b'possible' b'by' b'any'
    b'star' b',' b'usually' b'remote' b',' b'such' b'as' b'nestlings' b'by' b'riding' b',' b'<unk>' b'or' b'relationships' b'so' b'whose' b'supremacy' b'they' b'"' b'resembles'
    b'so' b'dark' b'that' b'often' b'require' b'that' b'amazed' b'.' b'"' b'This' b'specimen' b'does' b'not' b'mention' b'Soltis' b'by' b'proper' b'Europe' b',' b'and'
    b'<unk>' b',' b'as' b'letters' b'of' b'eggs' b',' b'is' b'necessary' b'.' b'Its' b'head' b'put' b'by' b'a' b'ability' b'to' b'hold' b'a' b'variety'
    b'of' b'different' b'food' b',' b'fledging' b',' b'pain' b'under' b'an' b'average' b'winter' b',' b'and' b'CdS' b'.' b'It' b'may' b'do' b'been' b'controlled'
    b'as' b'dark' b',' b'which' b'only' b'<unk>' b'all' b'of' b'his' b'tonners' b'.' b'relation' b',' b'records' b'performed' b'after' b'doing' b',' b'it' b'manages'
    b'to' b'be' b'around' b'explosives' b',' b'so' b'it' b'goes' b'it' b',' b'which' b'they' b"'re" b'"' b'so' b'obey' b'if' b'replication' b',' b'effectively'
    b'reagents' b'who' b'desires' b'or' b'certainly' b'gratitude' b'.' b'It' b'is' b'common' b'true' b'to' b'me' b',' b'when' b'Mars' b'only' b'recommended' b'you' b'as'
    b'"' b'equally' b'direct' b'.' b'"' b'Rhys' b'commented' b'of' b'the' b'same' b'level' b',' b'because' b'"' b'thin' b'announcement' b'operational' b',' b'without' b'them'
    b',' b'and' b'delivers' b'myself' b'who' b'will' b'happen' b'out' b'of' b'"' b'.' b'In' b'front' b'the' b'remnant' b'specimen' b'was' b'night' b'from' b'S.'
    b'laevigatum' b'and' b'well' b'Bernard' b'Seeger' b'<eos>' b'A' b'rain' b'called' b'graphical' b'guide' b'are' b'close' b':' b'"' b'These' b'include' b'these' b'prominent' b'tents'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.4
    loss: 5.168
    elapsed time (seconds): 119.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  43.535 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
