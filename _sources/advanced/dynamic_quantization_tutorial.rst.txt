.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'sell' b'energy' b',' b'by' b'which' b'1792' b'them' b'until' b'Epicloud' b',' b'<unk>' b'would' b'be' b'quadruple' b'a' b'male' b'@-@' b'shaped' b'independent'
    b'time' b'.' b'On' b'June' b'2' b',' b'2006' b',' b'Omar' b'were' b'established' b'with' b'a' b'Turkish' b',' b'over' b'3' b'million' b'royal' b'gorillas'
    b'and' b'primarily' b'networks' b'services' b',' b'and' b'1' b'%' b'of' b'marine' b'countries' b'and' b'two' b'NHL' b'duties' b'sociologist' b'Industries' b'riffs' b'.' b'Other'
    b'decision' b'were' b'occasionally' b'worshipped' b'as' b'<unk>' b',' b'and' b'even' b'it' b'was' b'degraded' b'.' b'<eos>' b'Henry' b'(' b'On' b'28' b'November' b'1913'
    b'\xe2\x80\x93' b'24' b')' b'had' b'an' b'targets' b'of' b'never' b'45' b'chartered' b'All' b'@-@' b'peat' b',' b'with' b'the' b'remainder' b'of' b'treatment' b'<unk>'
    b'warship' b'instrumentalist' b'where' b'there' b'may' b'be' b'no' b'scheme' b'with' b'the' b'intensity' b'of' b'152' b'@.@' b'South' b'Africa' b'.' b'"' b'eggs' b'"'
    b',' b'Evangelist' b'deficiencies' b'said' b'that' b'scheduling' b'sent' b'this' b'place' b'that' b'Because' b'"' b'Gwendolen' b'the' b'pleasant' b'planet' b'was' b'<unk>' b'.' b'"'
    b'The' b'ratings' b'began' b'to' b'know' b'a' b'month' b'then' b'because' b'this' b'is' b'not' b'steadily' b'negligible' b'.' b'Above' b'state' b'based' b'however' b'on'
    b'Frederick' b'Alicia' b'columns' b'to' b'be' b'assigned' b'on' b'Broadway' b'to' b'<unk>' b'sources' b',' b'breaking' b'he' b'they' b'could' b'get' b'these' b'ceremonies' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Specifications' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Common' b'ruling' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'On' b'2009' b',' b'Jeremy' b'Dykes' b'had' b'a' b'designated' b'and' b'devotees' b'appearance' b'after' b'he' b'turned' b'down' b'together' b'of' b'a' b'ongoing' b'crisis'
    b',' b'noting' b'that' b'Multiple' b'rights' b'foliage' b'could' b'have' b'been' b'<unk>' b'as' b',' b'by' b'interest' b'and' b'reports' b'of' b'human' b'manufacturers' b'.'
    b'He' b'played' b'strict' b'signings' b'on' b'support' b',' b'266' b'during' b'brass' b'full' b'.' b'The' b'special' b'authority' b'are' b'probably' b'finding' b',' b'because'
    b'Schedeen' b'Crash' b']' b'when' b'simply' b'death' b'could' b'have' b'compete' b'.' b'Madison' b'<unk>' b'radiate' b'has' b'moved' b'to' b'duets' b'and' b'deserted' b','
    b'as' b'his' b'type' b'could' b'be' b'done' b'and' b'hydrogen' b'.' b'Contemporary' b'scholars' b'have' b'drained' b'works' b'and' b'1600' b'.' b'Prior' b'to' b'each'
    b'downloading' b',' b'"' b'if' b'the' b'Sassanian' b'is' b'quite' b'living' b'or' b'artifacts' b',' b'they' b"'ve" b'not' b'flew' b'a' b'conflict' b'with' b'Crash'
    b'Books' b',' b'a' b'flat' b'vigorous' b'man' b'who' b"'re" b'a' b'pretty' b'easy' b'comedy' b'and' b'.' b'"' b'A' b'planet' b'estimates' b'of' b'movement'
    b'was' b'Yet' b'outside' b'late' b'.' b'The' b'chiefs' b'and' b'rely' b'on' b'the' b'plane' b'by' b'Mystic' b'voodoo' b"'" b'death' b'an' b'job' b'for'
    b'issue' b'for' b'<unk>' b'of' b'<unk>' b',' b'meaning' b'"' b'because' b'I' b']' b'say' b'"' b',' b'while' b'this' b'has' b'his' b'evidence' b'and'
    b'it' b'can' b'be' b'thrown' b'to' b'a' b'once' b'little' b'player' b'lists' b'.' b'<unk>' b'craftsmen' b'survives' b'so' b'to' b'form' b'the' b'emotions' b'of'
    b'him' b'them' b'bomb' b'as' b'they' b'restrict' b'their' b'term' b'equalize' b'.' b'Moreover' b',' b'Amor' b'Today' b'had' b'a' b'vertical' b'eclipse' b',' b'including'
    b'Raffles' b'until' b'the' b'hair' b',' b'soon' b'having' b'a' b'goal' b'on' b'the' b'ground' b',' b'which' b'said' b'that' b'for' b'defensive' b'@-@' b'Europos'
    b'.' b'Odaenathus' b'pulled' b'the' b'bill' b'Wisconsin' b'high' b'when' b'they' b'increases' b'on' b'to' b'vote' b'within' b'large' b'<unk>' b',' b'his' b'eyes' b'headed'
    b'to' b'the' b'quarter' b'.' b'The' b'starling' b'is' b'successful' b'each' b'hard' b',' b'possibly' b'flew' b'to' b'the' b'series' b',' b'meeting' b'as' b'to'
    b'power' b'a' b'species' b'to' b'either' b'\xe2\x80\x94' b'preposterous' b'.' b'The' b'bright' b'bus' b'mechanism' b'appears' b'as' b'a' b'burnt' b'method' b':' b'one' b'body'
    b'within' b'per' b'Charity' b'1943' b'since' b'his' b'lifetime' b'.' b'It' b'is' b'quoted' b'from' b'varies' b'with' b'<unk>' b'crevices' b',' b'which' b'may' b'be'
    b'killed' b'by' b'real' b'jets' b',' b'which' b'will' b'illustrate' b'July' b'11' b'.' b'coming' b',' b'S.' b'Bandicoot' b',' b'also' b'certainly' b'bad' b','
    b'Floyd' b'writes' b'that' b'it' b'<unk>' b'that' b'his' b'other' b'nuclei' b'themselves' b'were' b'"' b'made' b'into' b'public' b'families' b'and' b'rich' b'disgrace' b'"'
    b'.' b'directs' b'hopes' b'of' b'association' b'Chinese' b'bodies' b',' b'one' b'million' b'spots' b'inspired' b'safety' b'occurred' b'by' b'Uno' b'.' b'destruct' b'have' b'long'
    b'damage' b'room' b',' b'instead' b'for' b'vegetation' b'or' b'chemicals' b'.' b'"' b'dentists' b'after' b'986' b'this' b'group' b'of' b'changing' b'it' b',' b'bright'
    b'human' b'bodies' b'feature' b'parties' b'and' b'pressure' b'proclaimed' b'each' b'neck' b'consisting' b'\xe2\x80\x94' b'and' b'have' b'it' b',' b'which' b'coated' b'when' b'you' b'is'
    b'brought' b'to' b'number' b'.' b'"' b'The' b'evidence' b'advocated' b'in' b'Han' b':' b'Honolulu' b'until' b'the' b'fox' b'Council' b'of' b'Dublin' b';' b'Odaenathus'
    b'have' b'Accounts' b'Broadway' b'.' b'<eos>' b'<eos>' b'=' b'=' b'tumultuous' b'life' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b'safe' b'in' b'Ceres' b'.'
    b'hypothesized' b'of' b'survey' b'and' b'unnamed' b'dependents' b'usually' b'conclude' b'some' b'different' b'young' b'results' b',' b'erosion' b',' b'sheep' b',' b'and' b'flames' b'.'
    b'<unk>' b'by' b'floats' b'throughout' b'smelling' b'acid' b',' b'other' b'birds' b'were' b'also' b'inappropriate' b'resolved' b'regarding' b'"' b'intensely' b'"' b',' b'but' b'when'
    b'he' b'is' b'aware' b'of' b'his' b'objectives' b',' b'banding' b'feeding' b'are' b'widely' b'considered' b'a' b'introduction' b'to' b'a' b'different' b'crap' b'.' b'<eos>'
    b'Domnall' b'accusing' b'<unk>' b'Koniecpolski' b'sexual' b'Vandernoot' b'to' b'1612' b'comedy' b'<unk>' b'and' b'Personality' b'.' b'This' b'male' b'may' b'say' b'the' b'prediction' b'has'
    b'acknowledged' b'them' b'.' b'Qin' b'Cooper' b'is' b'very' b'apparent' b'for' b'monk' b',' b'under' b'the' b'oldest' b'states' b'made' b'.' b'In' b'a' b'story'
    b'of' b'1500' b'this' b'Ceres' b'is' b'only' b'unique' b'.' b'One' b'of' b'his' b'activities' b'has' b'<unk>' b'vegetation' b'@-@' b'shaped' b',' b'but' b'gamers'
    b'the' b'last' b'bird' b'down' b'its' b'virus' b'killed' b'.' b'This' b'bird' b'has' b'away' b'people' b'on' b'\xe2\x80\x9c' b'fries' b'when' b'they' b'establish' b'their'
    b'past' b'grave' b',' b'so' b'that' b'ceratopsian' b'differs' b'so' b'needed' b'to' b'work' b'and' b'circle' b',' b'so' b'how' b'there' b'may' b'be' b'so'
    b'Graeme' b'or' b'<unk>' b'towards' b'elements' b'there' b'have' b'originated' b'sustained' b'at' b'the' b'naked' b'kakapo' b'.' b'Some' b'Cagayan' b'starlings' b'in' b'<unk>' b'interactions'
    b'quickly' b'and' b'small' b'flocks' b'often' b'displays' b'.' b'They' b'prefer' b'fewer' b'females' b',' b'given' b'on' b'more' b'locations' b'that' b'were' b'less' b'useful'
    b'.' b'Some' b'comment' b'considered' b'that' b'hunters' b'usually' b'were' b'their' b'victims' b'of' b'<unk>' b',' b'unlock' b'up' b'ice' b'objects' b'.' b'An' b'fit'
    b'punishments' b'runs' b'in' b'a' b'plumage' b'for' b'colours' b'and' b'<unk>' b'their' b'most' b'spiders' b'(' b'AU' b')' b',' b'and' b'violated' b'spores' b'Michael'
    b'Smith' b';' b'Astronomers' b',' b'lens' b',' b'is' b'thought' b'to' b'negotiate' b'only' b'place' b'fast' b';' b'requires' b'about' b'1' b'million' b'.' b'Males'
    b'graced' b'pregnancy' b'and' b'<unk>' b':' b'<unk>' b',' b'mechanism' b',' b'<unk>' b',' b'<unk>' b',' b'and' b'their' b'<unk>' b'stupid' b'.' b'As' b'a'
    b'voice' b',' b'they' b'do' b'not' b'feed' b'on' b'marks' b'.' b'<eos>' b'Common' b'starlings' b'also' b'are' b'unprotected' b'to' b'be' b'large' b'by' b'their'
    b'power' b',' b'and' b'they' b'foraging' b'<unk>' b'from' b'the' b'one' b'and' b'eastern' b'best' b'broadcaster' b'orbit' b'them' b'and' b'Alcock' b'immediately' b'.' b'Odaenathus'
    b'vary' b'in' b'the' b'wings' b'for' b'Friends' b'when' b'it' b'is' b'trapped' b'against' b'her' b'own' b'dead' b',' b'where' b'the' b'snurposomes' b'may' b'not'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 186.2
    loss: 5.168
    elapsed time (seconds): 97.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  51.090 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
