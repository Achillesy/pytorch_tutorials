.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'fish' b'parallel' b'to' b'when' b'there' b'are' b'mixed' b'eggs' b'before' b'the' b'coup' b'played' b'<unk>' b'colors' b'(' b'and' b'August' b'24' b',' b'2015'
    b')' b',' b'a' b'highly' b'organized' b'design' b'spirit' b'increase' b'was' b'also' b'credited' b'his' b'regime' b'of' b'sweetest' b',' b'as' b'city' b"'s" b'shapes'
    b'were' b'severely' b'presumed' b'built' b'from' b'descendant' b'held' b'.' b'It' b'Mathews' b'moved' b'to' b'a' b'recitation' b'by' b'a' b'fabulous' b'casual' b'<unk>' b'arc'
    b'of' b'18' b'television' b',' b'the' b'availability' b'of' b':' b'"' b'sat' b'in' b'We' b'of' b'their' b'written' b'not' b'powered' b'or' b'the' b'potential'
    b'slide' b'sensory' b'bridges' b',' b'but' b'allow' b'his' b'<unk>' b'moor' b'by' b'wicca' b'to' b'raise' b'HAL' b'with' b'signing' b'here' b',' b'a' b'priest'
    b'who' b'would' b'accept' b'21' b'@.@' b'4' b'm' b'(' b'20' b'@.@' b'8' b'in' b')' b'in' b'diameter' b',' b'including' b'The' b'basket' b'were'
    b'equipped' b'down' b'at' b'an' b'game' b"'s" b'art' b'and' b'<eos>' b'As' b'they' b'slowed' b'Bardawil' b',' b'they' b'cannot' b'<unk>' b'it' b'.' b'It'
    b'\xe2\x80\x99' b"'t" b'never' b'roughly' b'it' b'there' b'are' b'first' b'Inari' b'situations' b'Hunwick' b',' b'which' b'is' b'so' b'calling' b'it' b'becomes' b',' b'a'
    b'side' b'of' b'individual' b'officials' b'that' b'has' b'remain' b'consistently' b'though' b'it' b'have' b'nothing' b'widely' b'.' b'"' b'<eos>' b'A' b'Press' b'on' b'his'
    b'rays' b'under' b'somewhat' b'powerful' b'a' b'2009' b'\xe2\x80\x93' b'4' b'sculpture' b':' b'fledging' b'(' b'Croatian' b'Sha' b'of' b'introduces' b'<unk>' b'and' b'no' b'Similar'
    b'magnitude' b')' b'places' b'Odaenathus' b'(' b'became' b'covered' b'to' b'be' b'involved' b'by' b'local' b'thought' b'/' b'slate' b')' b'and' b'a' b'night' b'@-@'
    b'purpose' b'expression' b'(' b'Mara' b')' b'.' b'The' b'young' b'or' b'<unk>' b'listen' b'to' b'the' b'basement' b'of' b'both' b'two' b'are' b'named' b'tendency'
    b'to' b'write' b'thwart' b'times' b'for' b'another' b'parents' b'.' b'"' b'rectory' b'of' b'Shastri' b'"' b'is' b'clamp' b',' b'or' b',' b'sodium' b'programmed'
    b',' b'along' b'a' b'variety' b'of' b'normal' b',' b'established' b'communications' b'samples' b'and' b'contemplate' b'dimming' b'.' b'Other' b'birds' b'based' b'on' b'the' b'non'
    b'@-@' b'term' b'1685' b'under' b'the' b'state' b'of' b'Christian' b'adults' b')' b',' b'mice' b',' b'Astor' b'(' b'<unk>' b')' b',' b'Thomas' b'Lat'
    b',' b'libraries' b',' b'Arizona' b',' b'and' b'thoroughly' b'Jackson' b'<eos>' b'In' b'2014' b',' b'the' b'Romans' b'becomes' b'suspended' b'from' b'their' b'Select' b'<unk>'
    b'Odaenathus' b'(' b'<unk>' b')' b'.' b'<unk>' b',' b'in' b'Freeville' b',' b'is' b'usually' b'smaller' b'literary' b',' b'but' b'it' b'is' b'also' b'affected'
    b'by' b'no' b'purpose' b'.' b'Also' b',' b'also' b'that' b'most' b'demolition' b'have' b'dimensions' b'open' b'the' b'head' b'is' b'certainly' b'its' b'left' b'.'
    b'An' b'nine' b'@-@' b'singular' b'salvo' b'can' b'be' b'more' b'common' b',' b'resulting' b'in' b'true' b'time' b',' b'possibly' b'located' b'in' b'concrete' b','
    b'and' b'acts' b'do' b'not' b'be' b'named' b'.' b'In' b'particular' b',' b'with' b'modern' b'animals' b'(' b'typically' b'crown' b')' b',' b'these' b'traits'
    b',' b'including' b'vengeance' b'(' b'saprobic' b'House' b')' b',' b',' b'Lily' b'crescent' b'(' b'M.' b'Applause' b')' b'and' b'the' b'<unk>' b'(' b'which'
    b'behavior' b')' b'prevailed' b'from' b'its' b'matches' b'and' b'advertising' b'and' b'pass' b'to' b'German' b'culture' b',' b'which' b'overlords' b'balancing' b'a' b'Crown' b'depicting'
    b'Republic' b'of' b'549th' b'Speaker' b'\xe2\x80\x94' b'tan' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Coastal' b'ceremonies' b'=' b'=' b'<eos>' b'<eos>' b'The' b'largest'
    b'starling' b'was' b'<unk>' b'by' b'the' b'damage' b'of' b'<unk>' b'Huggins' b',' b'and' b'in' b'little' b'years' b'Busch' b'became' b'terminated' b'into' b'Ireland' b','
    b'since' b'the' b'other' b'chloride' b'class' b',' b'with' b'which' b'favored' b'over' b'20' b'\xc2\xb0' b'years' b'in' b'population' b'that' b'it' b'was' b'inferred' b'a'
    b'1820' b'.' b'gill' b'were' b'sharing' b'for' b'extra' b'signs' b'often' b'in' b'the' b'bid' b'sequences' b',' b'and' b'that' b'Ceres' b'were' b'easily' b'minimal'
    b'or' b'registered' b'.' b'Under' b'a' b'Irish' b'bird' b',' b'Jeff' b'<unk>' b'settled' b'Grace' b',' b'with' b'Bristol' b',' b'stadion' b',' b'and' b'the'
    b'British' b'climate' b',' b'which' b'have' b'Not' b'eventually' b'of' b'prey' b'in' b'present' b'place' b'in' b'the' b'gill' b'Riding' b'.' b'<eos>' b'In' b'the'
    b'same' b'phase' b',' b'branded' b'results' b'are' b'dug' b'in' b'<unk>' b',' b'al' b'<unk>' b',' b'<unk>' b',' b'Nazareth' b',' b'Cenozoic' b',' b'and'
    b'wild' b'Punt' b'and' b'other' b'availability' b';' b'it' b'will' b'be' b'exchanged' b'by' b'bird' b'|' b',' b'<unk>' b',' b'encourage' b'"' b'<unk>' b'"'
    b',' b'"' b'legal' b',' b'fabric' b',' b'hair' b'destruction' b'"' b',' b'smaller' b',' b'hotels' b',' b'and' b'Lynes' b',' b'with' b'other' b'interrelated'
    b'Surya' b',' b'and' b'crescendo' b',' b'like' b'Eshmun' b'<unk>' b',' b'"' b'distinct' b'kinds' b'of' b'reason' b'"' b'in' b'those' b'of' b'common' b'ports'
    b'.' b'A' b'migration' b'that' b'rounded' b'age' b'and' b'bridges' b'circuit' b'generally' b',' b'measuring' b'play' b'at' b'times' b'in' b'a' b'faulty' b'language' b'on'
    b'18' b'December' b'2006' b'.' b'The' b'extent' b'of' b'level' b'except' b'30' b'years' b'over' b'Malibu' b'acts' b'.' b'Later' b',' b'it' b'is' b'visible'
    b',' b'although' b'winter' b',' b'and' b'was' b'owned' b'by' b'<unk>' b'Ram\xc3\xb3n' b',' b'Dan' b'I' b'Memorial' b',' b'was' b'under' b'her' b'body' b'of'
    b'thin' b'specimens' b'(' b'M.' b'M.' b'Sudeikis' b')' b',' b'seen' b'by' b'gills' b',' b'mundane' b',' b'<unk>' b',' b'and' b'<unk>' b'.' b'The'
    b'Roman' b'Path' b':' b'have' b'a' b'<unk>' b'II' b',' b'which' b'not' b'shape' b'or' b'male' b'dining' b',' b'capable' b'of' b'Syracuse' b'@-@' b'up'
    b',' b'draftees' b',' b'and' b'short' b'branches' b';' b'the' b'sermon' b',' b'with' b'the' b'kakapo' b'local' b'power' b'around' b'Parvati' b'.' b'Workers' b'can'
    b'six' b'of' b'an' b'structure' b'and' b'used' b'it' b'with' b'generally' b'brown' b'<unk>' b'.' b'<eos>' b'The' b'French' b'starling' b'is' b'produces' b'remove' b'by'
    b'rapid' b'concentrations' b'as' b'at' b'a' b'area' b'when' b'day' b'so' b'tiger' b'shows' b'occasionally' b'more' b'.' b'In' b'wood' b'times' b'up' b'as' b'submerged'
    b'as' b'their' b'<unk>' b',' b'it' b'appears' b'.' b'<unk>' b'large' b'asteroids' b'does' b'not' b'be' b'observed' b'before' b'being' b'caught' b'calling' b'and' b'other'
    b'of' b'the' b'world' b'Yorke' b'rufipes' b'often' b'characteristic' b'god' b'.' b'They' b'have' b'debated' b'Adams' b'out' b'<unk>' b'pathway' b'that' b'praised' b'severe' b'starlings'
    b'which' b'are' b'known' b'as' b'such' b'as' b'"' b'Highlander' b'"' b'that' b'were' b'Maeonius' b"'" b'common' b'genus' b'of' b'a' b'creek' b'.' b'<eos>'
    b'Like' b'this' b'interaction' b'by' b'other' b'events' b'maintain' b'Narasimha' b'Crash' b'detectable' b'cheats' b'after' b'pine' b',' b'of' b'the' b'state' b'of' b'64' b'kilometres'
    b'(' b'2' b'@.@' b'4' b'.' b')' b')' b'and' b'early' b'gills' b'damaged' b'ring' b'.' b'On' b'the' b'same' b'distance' b',' b'this' b'theme'
    b'was' b'firm' b'warmed' b'from' b'Ireland' b'terrestrial' b'to' b'12' b'millimetres' b'(' b'5' b'km' b')' b',' b'he' b'employed' b'the' b'Waterfall' b'century' b'('
    b'53' b'%' b'only' b'booked' b'several' b'@-@' b'20' b'specimens' b'per' b'year' b')' b'.' b'As' b'of' b'2016' b',' b'giving' b'compared' b'since' b'demonstrated'
    b'by' b'someday' b'Inari' b',' b'in' b'28' b'm' b'C.' b',' b'in' b'2013' b',' b'were' b'used' b'at' b'all' b'to' b'4' b'@.@' b'18'
    b'%' b'of' b'his' b'main' b'age' b'.' b'It' b'was' b'carried' b'in' b',' b'still' b'though' b'construction' b'assigned' b'to' b'it' b'to' b'noisy' b'English'
    b'drone' b',' b'they' b'don' b"'t" b'splicing' b'them' b'.' b'When' b'it' b'may' b'be' b'wear' b'to' b'find' b'almost' b'expand' b'or' b',' b'it'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 186.0
    loss: 5.168
    elapsed time (seconds): 99.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  52.453 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
