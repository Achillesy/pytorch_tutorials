.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'emphasis' b'on' b'the' b'role' b'of' b'consistent' b'high' b',' b'cellular' b'when' b'France' b',' b'as' b'well' b'as' b'gravestone' b'AD' b',' b'are' b'forged'
    b'as' b'follows' b'.' b'<eos>' b'intrinsically' b'rubber' b'schools' b'are' b'not' b'used' b'when' b'it' b'is' b'paid' b'at' b'a' b'time' b'of' b'broke' b'records'
    b'stop' b'.' b'Those' b'of' b'M.' b'orientalis' b'have' b'a' b'object' b'on' b'the' b'50' b'kakapo' b'\xe2\x80\x94' b'originally' b'gathering' b'an' b'special' b'winter' b','
    b'so' b'unlike' b',' b'various' b'are' b'either' b'<unk>' b'.' b'In' b'February' b'1775' b',' b'they' b'were' b'drinking' b'following' b'the' b'Swordians' b',' b'albeit'
    b'in' b'royal' b'sharp' b'that' b'they' b'are' b'set' b'on' b'beach' b'or' b'annex' b'.' b'For' b'example' b',' b'indicators' b'among' b'caninus' b'Beth' b'between'
    b'about' b'resolution' b'are' b'first-' b'.' b'Gold' b'differs' b'from' b'the' b'detachment' b'of' b'their' b'beak' b'and' b'340' b',' b'so' b'some' b'Hornung' b'will'
    b'also' b'be' b'able' b'to' b'carry' b'in' b'the' b'first' b'stages' b'of' b'<unk>' b'on' b'ESPNcricinfo' b'Island' b'.' b'There' b'they' b'eventually' b'found' b'short'
    b'peoples' b'by' b'Billboard' b',' b'coordinated' b'by' b'alluvial' b'@-@' b'pulls' b'fields' b'scraps' b'(' b'Lake' b'palaces' b')' b'.' b'This' b'species' b'is' b'also'
    b'estimated' b'as' b'common' b'.' b'It' b'share' b'different' b'salmon' b'motion' b'.' b'As' b'the' b'young' b'seas' b',' b'trees' b'and' b'gum' b'devised' b'Cajal'
    b'amounts' b'of' b'rare' b'barges' b',' b'instead' b'of' b'Australia' b',' b'<unk>' b',' b'and' b',' b'and' b'influences' b'actually' b'measure' b'it' b'.' b'There'
    b'are' b'no' b'clear' b'using' b'an' b'high' b'pale' b'body' b'threat' b'in' b'the' b'Katherine' b'<unk>' b'<unk>' b',' b'<unk>' b',' b'created' b'by' b'grammar'
    b'@-@' b'FM' b',' b'throwing' b'.' b'Primary' b'spiders' b'provide' b'it' b'operations' b',' b'that' b'<eos>' b'Mantellisaurus' b',' b'some' b'compounds' b'open' b'cleansing' b'from'
    b'Warcraft' b"'" b'flight' b',' b'where' b'Pistons' b'rainy' b'.' b'<eos>' b'The' b'island' b"'s" b'common' b'starling' b'bearing' b'exceptions' b'from' b'a' b'orbit' b'by'
    b'benefited' b'up' b'the' b'original' b'<unk>' b'and' b'powerful' b'gold' b',' b'as' b'they' b'are' b'attacked' b'into' b'empire' b'.' b'It' b'also' b'speculated' b'that'
    b'the' b'expert' b'"' b'consulted' b'"' b'is' b'produced' b'by' b'solid' b'Sub' b',' b'which' b'is' b'found' b'in' b'present' b',' b'by' b'carved' b'severely'
    b',' b'food' b'motif' b'.' b'100' b'1650' b'peaks' b'on' b'its' b'beak' b'is' b'more' b'unlike' b'a' b'broad' b'white' b',' b'which' b'it' b'also'
    b'infest' b'offspring' b',' b'some' b'good' b'membrane' b',' b'however' b'.' b'It' b'is' b'estimated' b'that' b'an' b'yellow' b'or' b'less' b'uncomfortable' b'note' b','
    b'Nests' b',' b'Fear' b',' b',' b'it' b'is' b'also' b'more' b'Meng' b',' b'reflecting' b'the' b'body' b'internal' b'.' b'mosaic' b'blow' b'(' b'orange'
    b')' b'removes' b'a' b'motive' b'distance' b'by' b'pure' b'homosexuals' b'and' b'with' b'the' b'substance' b'@-@' b'bathing' b'<unk>' b'and' b'makes' b'them' b'to' b'refer'
    b'to' b'to' b'rock' b'a' b'surface' b'.' b'In' b'spite' b'he' b'<unk>' b'crake' b',' b'they' b'to' b'native' b'or' b'symptoms' b'would' b'have' b'been'
    b'<unk>' b'.' b'They' b'may' b'often' b'leave' b'when' b'they' b"'ll" b'be' b'responded' b'for' b'.' b'This' b'nest' b'find' b'breeding' b'process' b'<unk>' b','
    b'so' b'AI' b'occasionally' b'taken' b'on' b'a' b'curved' b'basis' b'on' b'that' b'feet' b'.' b'Only' b'predators' b'are' b'also' b'bearings' b'.' b'<eos>' b'eared'
    b'starlings' b'will' b'be' b'common' b'and' b'reliability' b'.' b'Glenn' b'guides' b'may' b'be' b'prepared' b';' b'wing' b'genetic' b'birds' b'are' b'thou' b',' b'and'
    b'their' b'breeding' b'ones' b'took' b'Lisbon' b'to' b'each' b'other' b'.' b'If' b'some' b'kakapo' b'mention' b'legs' b',' b'there' b'are' b'five' b'encounter' b'.'
    b'Evidence' b'may' b'be' b'introduced' b'to' b'the' b'ground' b'that' b'they' b'"' b'feed' b'upon' b'Shriners' b'fewer' b'confusion' b',' b'while' b'Innis' b'is' b'an'
    b'permit' b'of' b'horns' b'.' b'If' b'they' b'goes' b'under' b'the' b'<unk>' b'whereas' b'nothing' b'extend' b'it' b'.' b'They' b'affected' b'!' b'Talent' b','
    b'alive' b'.' b'"' b'<eos>' b'Several' b'migrants' b'were' b'often' b'<unk>' b'in' b'three' b'hundred' b'arches' b',' b'depleted' b'(' b'gigalitres' b'in' b'piano' b','
    b'and' b'18' b'kilometres' b')' b',' b'were' b'held' b'south' b'unconscious' b',' b'Ruy' b',' b'733' b',' b'relapse' b',' b'<unk>' b',' b'Alekhine' b','
    b'arranged' b',' b'<unk>' b',' b'<unk>' b'and' b'reliable' b'by' b'the' b'average' b'of' b'Lebanon' b',' b'leaves' b'<unk>' b'(' b'things' b')' b'.' b'<eos>'
    b'<unk>' b'y' b'Ke' b'was' b'described' b'as' b'made' b'\xe2\x80\x9d' b'travel' b'for' b'running' b'good' b'physique' b'on' b'a' b'variety' b'of' b'reasons' b'that' b'is'
    b'consequently' b'the' b'most' b'common' b'leader' b'.' b'As' b'of' b'2012' b',' b'each' b'of' b'those' b'turns' b'in' b'Irish' b'literature' b'throughout' b'his' b'first'
    b'century' b'when' b'it' b'was' b'increasing' b'by' b'Rochelle' b'given' b'to' b'form' b'them' b',' b'though' b'any' b'have' b'a' b'small' b'population' b'being' b'judged'
    b'by' b'more' b'fish' b',' b'with' b'some' b'scripts' b',' b'pain' b',' b'elevations' b';' b'electrically' b',' b'child' b'and' b'smooth' b'and' b'associated' b'more'
    b'agents' b'Delhi' b'as' b'Diarmait' b'and' b'rays' b'.' b'In' b'Stela' b'and' b'<unk>' b',' b'Ceres' b',' b'many' b'floor' b'energy' b'injuries' b'(' b'maintain'
    b'transport' b'depict' b'second' b')' b'and' b'S.' b'M.' b'Hanson' b'(' b'white' b':' b'betaine' b')' b'were' b'fruit' b'.' b'Although' b'of' b'birds' b','
    b'the' b'common' b'forehead' b'likened' b'area' b'around' b'Bhairava' b'during' b'parasites' b',' b'modified' b'one' b',' b'waiting' b'through' b'practices' b'.' b'Another' b'distant' b'attack'
    b'of' b'<unk>' b'or' b'mobility' b',' b'below' b'Russia' b',' b'brought' b'shaped' b'twins' b',' b'along' b'with' b'a' b'barn' b'that' b'occupies' b'humans' b'seeds'
    b'.' b'They' b'supports' b',' b'while' b'it' b'was' b'considerable' b'from' b'tip' b',' b'others' b'migrate' b'as' b'part' b'of' b'a' b'sphere' b'@-@' b'partner'
    b'for' b'universal' b'activities' b'.' b'Although' b'they' b'occur' b',' b'it' b'do' b'always' b'entirely' b'look' b'but' b'happened' b',' b'down' b'wider' b'trees' b'by'
    b'their' b'male' b'<unk>' b'.' b'Also' b'there' b'are' b'evidence' b'that' b'they' b'feed' b'in' b'large' b'areas' b'when' b'West' b'connected' b'beta' b'R\xc3\xa9union' b'from'
    b'these' b'condition' b'.' b'In' b'2015' b',' b'the' b'kakapo' b'Raja' b'are' b'pulled' b'to' b'malls' b'.' b'In' b'architects' b',' b'when' b'large' b'three'
    b'paces' b'of' b'a' b'female' b'(' b'0' b'%' b'\xe2\x80\x93' b'10' b')' b'first' b'may' b'be' b'located' b'in' b'every' b'broad' b'mound' b',' b'other'
    b'layers' b'of' b'their' b'cases' b'to' b'be' b'their' b'cause' b'rather' b'extraterrestrial' b'.' b'When' b'this' b'data' b'has' b'unclear' b',' b'the' b'Romans' b'should'
    b'be' b'killed' b',' b'and' b'showed' b'its' b'habitat' b'at' b'its' b'flightless' b'stand' b'to' b'happen' b'by' b'very' b'than' b'simply' b'Crowley' b'in' b'Commercial'
    b'Europe' b'.' b'There' b'are' b'their' b'least' b'two' b'points' b',' b'around' b'3' b'@.@' b'8' b'%' b'and' b'4' b'@.@' b'5' b'%' b'per'
    b'year' b'.' b'<eos>' b'and' b'Carell' b'with' b'girls' b'extending' b'a' b'variety' b'of' b'old' b'partial' b'purposes' b'that' b'kakapo' b'believed' b'in' b'2004' b'it'
    b'may' b'still' b'be' b'unlikely' b'to' b'be' b'Ramanujacharya' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Distribution' b'=' b'=' b'<eos>' b'<eos>' b'Wins' b',' b'and'
    b'Arabic' b',' b'are' b'exist' b'to' b'contain' b'their' b'direction' b'.' b'Various' b'bird' b'features' b'subunits' b'also' b'transfer' b'the' b'head' b'of' b'their' b'eye'
    b'orientation' b'.' b'They' b'asks' b'saints' b'around' b'reluctant' b'tradesmen' b'by' b'<unk>' b'Scores' b',' b'plus' b'<unk>' b',' b'<unk>' b',' b'etc' b',' b'and'
    b'air' b':' b'"' b'One' b'I' b'have' b'"' b'\xe2\x80\x9d' b',' b'graveyard' b'including' b'idealist' b'.' b'When' b'making' b'the' b'broad' b'starling' b'for' b'proto'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 189.6
    loss: 5.168
    elapsed time (seconds): 101.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  57.998 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
