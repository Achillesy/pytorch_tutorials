.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'operation' b'on' b'his' b'cycle' b'.' b'The' b'remaining' b'car' b'was' b'described' b'from' b'a' b'research' b'heightened' b'natural' b'protest' b'in' b'All' b'France'
    b',' b'red' b'that' b'<unk>' b'over' b'the' b'Pleistocene' b'population' b'.' b'In' b'the' b'1930s' b',' b'the' b'tax' b'Sea' b'passes' b'Polish' b'convicts' b'to'
    b'face' b'in' b'private' b'<unk>' b'.' b'In' b'partnership' b'Wagner' b"'s" b'wish' b'was' b'meant' b'to' b'have' b'transformed' b'retire' b'and' b'even' b'clapping' b'with'
    b'many' b'planes' b'during' b'Northumberland' b'.' b'Fraser' b'was' b'given' b'a' b'collaboration' b'that' b'he' b'had' b'writes' b'to' b'compete' b'his' b'country' b'widely' b'at'
    b'every' b'feast' b'time' b'since' b'his' b'early' b'last' b'stages' b'.' b'The' b'club' b'However' b'as' b'a' b'nest' b'in' b'front' b'that' b'Barbatos' b'won'
    b'its' b'holiday' b'to' b'test' b'keeper' b'in' b'a' b'AIF' b'looking' b'attendance' b';' b',' b'before' b'and' b'planted' b'a' b'Blu' b'@-@' b'election' b','
    b'Hornung' b'received' b'his' b'last' b'game' b'to' b'be' b'persuaded' b'to' b'being' b'executive' b'all' b'less' b'than' b'most' b'realistic' b'roosts' b',' b'Trescothick' b'.'
    b'<unk>' b'third' b'defeat' b'that' b'Jagannadh' b'chose' b'how' b'competence' b'in' b'his' b'mass' b'one' b'manufactured' b'date' b'is' b'"' b'NDTV' b'characterization' b'"' b'and'
    b'Raffles' b'supported' b'factories' b',' b'but' b'in' b'January' b'G' b'Richardson' b'asked' b'him' b'adjusted' b'ground' b'octave' b'and' b'scoring' b'the' b'II' b'Fifth' b'Force'
    b'of' b'meic' b'du' b'Informer' b'.' b'To' b'be' b'four' b'in' b'the' b'O' b'One' b'Union' b',' b'Source' b'called' b'O' b"'Malley" b'to' b'check'
    b'that' b'Mosley' b'hoped' b'that' b'a' b'stand' b'of' b'interviews' b'leaders' b'could' b'be' b'rejoined' b'in' b'year' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception'
    b'=' b'=' b'<eos>' b'<eos>' b'\xc3\x8dmar' b'remained' b'saying' b'that' b'Hornung' b"'s" b'fame' b'conference' b'plan' b'was' b'not' b'killed' b',' b'and' b'the' b'Xbox'
    b'<unk>' b'80s' b'was' b'his' b'own' b'gunports' b'.' b'O' b"'Malley" b'told' b'stupid' b'of' b'the' b'game' b'that' b'month' b'other' b'games' b'were' b'the'
    b'best' b'Raffles' b'game' b'in' b'the' b'schools' b'.' b'<eos>' b'Walpole' b"'s" b'Olympics' b'saw' b'his' b'production' b'to' b'the' b'city' b'and' b'Lorenzo' b"'s"
    b'death' b',' b'Cleveland' b',' b'Werner' b'dynamics' b'<unk>' b',' b'Vasa' b'Oil' b'hoping' b'and' b'"' b'fully' b'heard' b'"' b',' b'although' b'"' b'<unk>'
    b'"' b'Hornung' b'was' b'announced' b'as' b'the' b'50th' b'Division' b'team' b'press' b',' b'and' b'said' b'that' b'were' b'"' b'linked' b'out' b'to' b'what'
    b'could' b'expect' b'his' b'presence' b'and' b'chemotherapy' b'"' b'.' b'The' b'book' b'of' b'1624' b',' b'MonarC' b'Osaka' b',' b'and' b'forestry' b'Athletics' b'('
    b'Mark' b'owl' b':' b'Jagannadh' b')' b',' b'when' b'Walter' b'Lopez' b'of' b'Mars' b'(' b'rhyme' b'X' b'East' b')' b'that' b'adversely' b'played' b'the'
    b'trainer' b'too' b'important' b'and' b'modifications' b',' b'share' b'the' b'bonus' b'and' b'the' b'London' b'<unk>' b'smallest' b'the' b'third' b'part' b'to' b'be' b'saved'
    b'.' b'In' b'a' b'alteration' b'of' b'the' b'civic' b'ejaculation' b'was' b'touched' b'in' b'the' b'reader' b',' b'accounted' b'for' b'see' b'favoured' b'it' b';'
    b'Oprah' b'Roan' b'was' b'as' b'a' b'player' b'director' b'during' b'Reinforcements' b'.' b'fairly' b'torso' b'and' b'baton' b'were' b'found' b'for' b'a' b'strong' b'style'
    b',' b'<unk>' b'\xe2\x80\x93' b'Xe' b'Williams' b'<unk>' b'.' b'<eos>' b'The' b'remainder' b'of' b'the' b'trial' b'was' b'crushed' b'in' b'1999' b',' b'and' b'Philip'
    b'Patrick' b'Hornung' b',' b'his' b'Battleship' b'beat' b',' b'was' b'revealed' b'to' b'be' b'the' b'subject' b'of' b'Raffles' b'coverage' b';' b'apparently' b'gave' b'considerable'
    b'terrain' b'.' b'The' b'controversy' b'began' b'outside' b'18' b'%' b'of' b'fiction' b',' b'including' b'the' b'presentation' b'of' b'outposts' b'.' b'The' b'local' b'rubber'
    b'theme' b'suggested' b'that' b'compartment' b'work' b'Case' b'as' b'the' b'same' b'was' b'or' b'candidate' b'by' b'The' b'Charlotte' b'Mode' b'X' b'for' b'a' b'orbit'
    b'off' b'after' b'how' b'surfaced' b'a' b'genealogical' b'rolling' b'@-@' b'scale' b'consensus' b'.' b'<eos>' b'In' b'March' b'and' b'October' b'1947' b',' b'at' b'Madison'
    b'Arena' b'on' b'September' b'25' b',' b'2014' b',' b'Jordan' b'did' b'not' b'lose' b'a' b'relatively' b'errors' b'of' b'Sal' b'Dershowitz' b',' b'who' b'won'
    b'studying' b'not' b'issues' b'on' b'participating' b'in' b'the' b'chord' b'schooling' b'on' b'April' b'25' b',' b'2011' b'.' b'A' b'fundamental' b'fastball' b'on' b'dates'
    b'prime' b'expendable' b'including' b'McGregor' b'were' b'nominated' b'to' b'form' b'Amano' b"'s" b'body' b'or' b'writing' b'that' b'Walpole' b'pointed' b'his' b'possessed' b'motion' b'with'
    b'Sunderland' b',' b'in' b'1870' b'.' b'Rellstab' b"'s" b'wife' b'to' b'track' b'England' b',' b'Liz' b'M.' b'Les' b"'Malley" b'.' b'In' b'this' b'game'
    b'he' b'and' b'<unk>' b',' b'Hamels' b'also' b'tried' b'to' b'run' b'to' b'Walpole' b"'s" b'president' b'by' b'the' b'nomination' b'in' b'Formal' b'<unk>' b','
    b'barefoot' b',' b'and' b'Raffles' b',' b'children' b'related' b'to' b'writing' b'spokesman' b'Humphrey' b'.' b'In' b'this' b'first' b'biography' b'he' b'was' b'to' b'become'
    b'.' b'At' b'1969' b',' b'Crash' b'discussed' b'his' b'play' b'novels' b'for' b'an' b'Durga' b'<unk>' b'...' b'literary' b'films' b'threw' b'a' b'Virampattinam' b'from'
    b'O' b'One' b'Ocean' b',' b'Tennessee' b'.' b'One' b'fun' b'doubles' b'on' b'power' b'at' b'the' b'start' b'of' b'her' b'series' b'of' b'knowledge' b','
    b'bad' b',' b'and' b'Bill' b',' b'an' b'Actor' b'outburst' b'<unk>' b',' b'to' b'be' b'seen' b',' b'and' b'McDougal' b'sent' b'1984' b'in' b'order'
    b'for' b'a' b'Bobcats' b',' b'green' b'subfossils' b'and' b'his' b'dealings' b'from' b'forever' b'.' b'Even' b'in' b'this' b'period' b'points' b'down' b'Browns' b'to'
    b'help' b'monster' b'in' b'a' b'short' b'position' b'in' b'1930' b'.' b'<eos>' b'Brenda' b"'s" b'clause' b'against' b'Joe' b'Beesly' b'was' b'derived' b'for' b'the'
    b'best' b'incumbent' b'story' b'in' b'Australia' b'.' b'In' b'1629' b',' b'it' b'was' b'determined' b'that' b'"' b'it' b'is' b'soon' b'excited' b'to' b'be'
    b'strong' b',' b'a' b'dog' b',' b'it' b'is' b'that' b'Howson' b'is' b'happy' b'to' b'obtain' b'with' b'any' b'of' b'get' b'they' b'were' b'doing'
    b'to' b'kids' b'.' b'"' b'"' b'<unk>' b'"' b'edition' b'one' b'stating' b'the' b'character' b'would' b'have' b'caught' b'in' b'the' b'foreseeable' b'circumstances' b'\xe2\x80\x94'
    b'and' b'enlisted' b'Jekyll' b',' b'with' b'each' b'them' b'and' b'faiths' b'would' b'be' b'named' b'against' b'Ceres' b'or' b'pervasive' b'to' b'leave' b'it' b'in'
    b'first' b'settling' b'near' b'Humphrey' b'the' b'operas' b'of' b'<unk>' b'.' b'During' b'a' b'meeting' b'@-@' b'up' b'interview' b'at' b'a' b'short' b'point' b'with'
    b'map' b"'s" b'networks' b',' b'O' b"'Malley" b'deals' b'after' b'Tessa' b"'s" b'Hands' b'to' b'come' b'in' b'the' b'first' b'certificate' b'.' b'<unk>' b'commented'
    b'that' b'Danny' b'"' b'seems' b'all' b'of' b'his' b'signature' b'or' b'characters' b'"' b'of' b'"' b'He' b'closures' b'effect' b'and' b'Piggott' b'Byung' b'&'
    b'L' b'Congressman' b'<unk>' b'"' b'.' b'<eos>' b'Hornung' b"'s" b'two' b'candidates' b'was' b'told' b'to' b'the' b'Elvira' b'Lotus' b'Hibari' b'posthumously' b'in' b'operation'
    b',' b'after' b'Kund' b'in' b'the' b'1992' b'<unk>' b'rimu' b'League' b',' b'Baltimore' b'Somali' b'Union' b'to' b'support' b'Walpole' b'for' b'acoustic' b'affairs' b'.'
    b'The' b'race' b'moved' b'for' b'glossy' b'frigates' b'to' b'fear' b'le' b'novelist' b'Knowles' b'and' b'took' b'the' b'ground' b'for' b'three' b'reasons' b'.' b'Zaitsev'
    b'initially' b'found' b'directly' b'log' b',' b'and' b'proposed' b'a' b'AQHA' b'secretary' b'friend' b',' b'Raffles' b',' b'woman' b'(' b'died' b'Troops' b')' b','
    b'and' b'Mark' b'J.' b'Rogue' b'(' b'and' b'Chief' b'vacations' b'Smith' b'behalf' b'.' b'Living' b'<unk>' b'<unk>' b'Muangthong' b',' b'as' b'experience' b'were' b'over'
    b'surfaces' b'of' b'not' b'mom' b'Wiseman' b'.' b'The' b'Washington' b'trade' b'agreed' b'to' b'produce' b'control' b')' b',' b'wife' b',' b'D.C.' b',' b'and'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.4
    loss: 5.168
    elapsed time (seconds): 120.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  56.491 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
