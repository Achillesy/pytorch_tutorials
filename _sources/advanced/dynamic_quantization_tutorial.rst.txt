.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'(' b'based' b'<unk>' b',' b'outlying' b'@-@' b'53' b')' b',' b'and' b'articulated' b'two' b'carriers' b'housing' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History'
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'first' b'location' b'in' b'category' b'Nina' b'sporadic' b'race' b'works' b'can' b'be' b'confirmed' b'and' b'put' b'@-@' b'income'
    b'as' b'for' b'their' b'environment' b',' b'because' b'of' b'passing' b'fire' b'turrets' b';' b'there' b'may' b'have' b'been' b'prevented' b'on' b'his' b'rpm' b'and'
    b'worries' b'nicknamed' b',' b'so' b'Taylor' b'Adams' b'criticized' b'the' b'all' b'song' b'.' b'The' b'map' b'is' b'less' b'described' b'.' b'When' b'the' b'treatment'
    b'exist' b',' b'some' b'or' b'widespread' b'or' b'half' b'can' b'be' b'significant' b'.' b'The' b'species' b'hills' b',' b'and' b'the' b'sacrificial' b'importance' b'of'
    b'four' b'lengths' b'is' b'held' b'in' b'minor' b'areas' b',' b'and' b'of' b'beaks' b'for' b'food' b'and' b'very' b'inconsistent' b'feel' b'.' b'This' b'is'
    b'easily' b'extinct' b'than' b'in' b'flattening' b'from' b'Anyone' b'.' b'The' b'birds' b'vary' b'live' b'when' b'they' b'stopped' b'any' b'female' b'been' b'repaired' b'by'
    b'Carol' b"'s" b'successor' b',' b'bombarding' b'machine' b'or' b'two' b'are' b'going' b'.' b'However' b',' b'they' b'they' b'<unk>' b'in' b'they' b'were' b'horrified'
    b'to' b'perform' b'a' b'Victorian' b'arm' b'to' b'understated' b'actual' b'genuinely' b'.' b'These' b'are' b'visible' b'as' b'"' b'during' b'direct' b'physically' b'both' b'"'
    b',' b'becoming' b'exhausted' b'.' b'There' b'are' b'no' b'evidence' b'that' b'they' b'<unk>' b'for' b'fine' b'food' b',' b'preparing' b'by' b'legs' b'that' b'would'
    b'be' b'self' b'@.@' b'3' b':' b'00' b'years' b',' b'with' b'2' b'or' b'4' b'prisoners' b'single' b'.' b'The' b'rectory' b'is' b'diminishing' b'by'
    b'young' b'veto' b'genera' b'and' b'guessed' b',' b'indicating' b'length' b'rather' b'@-@' b'uppermost' b'headed' b'.' b'Those' b'are' b'Shaiva' b'in' b'234' b'with' b'its'
    b'wings' b'.' b'The' b'male' b'holds' b'pale' b'time' b',' b'partly' b'as' b'in' b'before' b'the' b'starling' b'end' b',' b'except' b'few' b'of' b'what'
    b'are' b'exported' b'.' b'Crash' b'Buy' b'is' b'listed' b'as' b'world' b',' b'Entire' b'@-@' b'drawn' b'and' b'when' b'they' b'does' b'not' b'return' b'to'
    b'release' b'.' b'<eos>' b'<eos>' b'=' b'=' b'condom' b'listing' b'=' b'=' b'<eos>' b'<eos>' b'Until' b'other' b'stability' b',' b'several' b'European' b'starlings' b'alluding'
    b'between' b'Monument' b'networks' b',' b'the' b'territory' b'players' b'of' b'<unk>' b'.' b'Joseph' b'Mayo' b'was' b'not' b'named' b'in' b'their' b'youth' b'.' b'The'
    b'harvest' b'fluids' b'they' b'had' b'black' b',' b'throughout' b'on' b'January' b'8' b',' b'1972' b'Mantellisaurus' b'<unk>' b'Magazine' b'<unk>' b'the' b'Victoria' b'trade' b'.'
    b'Last' b'participants' b'traders' b'escapes' b'at' b'numerous' b'schoolhouse' b'sickly' b'land' b',' b'having' b'won' b'the' b'DFC' b'in' b'its' b'<unk>' b'that' b'he' b'wanted'
    b',' b'and' b'an' b'earlier' b'arrangement' b'to' b'Africa' b',' b'but' b'particular' b'all' b'of' b'them' b'.' b'<eos>' b'The' b'1986' b'Directors' b'<unk>' b'dates'
    b'for' b'a' b'estimate' b'of' b'3' b'\xe2\x80\x93' b'2' b'April' b'Beesly' b'of' b'Storrington' b'and' b'Officials' b'.' b'A' b'series' b'called' b'B.' b'P.' b'Douglas'
    b'a' b'section' b'in' b'media' b',' b'had' b'moved' b'to' b'range' b'by' b'the' b'Toronto' b'War' b'formulas' b',' b'to' b'Colby' b'<unk>' b',' b'which'
    b'are' b'not' b'active' b'from' b'from' b'adventurous' b'cities' b'.' b'In' b'recent' b'age' b',' b'one' b'America' b'listed' b'in' b'Japan' b'friendly' b'family' b'Township'
    b'and' b'dissipating' b'with' b'buoys' b'that' b'typically' b'they' b'carried' b'yield' b'of' b'major' b'invasion' b';' b'drifting' b'records' b'indicate' b'that' b'and' b'have' b'developed'
    b'in' b'titled' b'"' b'If' b'ecosystems' b'"' b'has' b'turned' b'to' b'hold' b'mortality' b'such' b'as' b'the' b'Victoria' b'Company' b'and' b'South' b'Korean' b','
    b'\xc2\xb7' b'(' b'utilities' b')' b'and' b'tetroxide' b'(' b'1972' b')' b'.' b'They' b'have' b'suggested' b'to' b'sign' b'section' b'of' b'the' b'Lake' b'Republic'
    b'and' b'the' b'Toronto' b'@-@' b'protecting' b'communities' b"'" b'main' b'Famine' b'.' b'Benson' b'picked' b'the' b'bird' b'in' b'2015' b',' b'in' b'which' b'1779'
    b'may' b'Colonization' b'on' b'a' b'wide' b'harvest' b'path' b'.' b'Further' b',' b'then' b'the' b'common' b'starling' b'bear' b'the' b'Cubs' b'and' b'warned' b'the'
    b'biological' b'starling' b'to' b'face' b'off' b'for' b':' b'<unk>' b',' b'still' b'advocated' b'.' b'Ross' b'encouraged' b'more' b'functional' b'and' b'innovation' b',' b'most'
    b'of' b'which' b'is' b'mean' b'to' b'have' b'those' b'nice' b'or' b'therefore' b'periodically' b'with' b'proper' b'.' b'This' b'learn' b'wrote' b'that' b'the' b'kakapo'
    b'was' b'filled' b'through' b'<unk>' b'and' b'criticised' b'ironclad' b'females' b',' b'in' b'particular' b',' b'the' b'capable' b'of' b'prey' b'through' b'particularly' b'wine' b'pig'
    b'and' b'cavalry' b'models' b'.' b'<eos>' b'One' b'of' b'his' b'greatest' b'study' b',' b'or' b'animal' b',' b'or' b'its' b'ground' b'have' b'their' b'longer'
    b'stop' b'with' b'them' b'.' b'El' b'v.' b'Weyden' b'Joy' b'<unk>' b'had' b'included' b'Victorian' b'potential' b'periods' b'such' b'as' b'conquistadors' b',' b'Kauai' b','
    b'mercury' b',' b'1862' b',' b'while' b'transitive' b',' b'chord' b',' b'workplace' b'or' b'vocal' b'and' b'female' b';' b'and' b'these' b'existence' b'off' b'different'
    b'females' b'to' b'<unk>' b'various' b'periods' b'throughout' b'western' b'Ireland' b'.' b'mitosis' b'notes' b'it' b'was' b'probably' b'Odaenathus' b'in' b'documentary' b'or' b'contain' b'a'
    b'<unk>' b'Rob' b'elsewhere' b'from' b'53' b'.' b'<eos>' b'Scientific' b'birds' b'exactly' b'Nicole' b',' b'displaying' b'prey' b',' b'since' b'due' b'they' b'were' b'aligned'
    b'down' b'on' b'once' b'males' b'.' b'<eos>' b'Founded' b'north' b',' b'east' b'of' b'three' b'vertices' b'at' b'and' b'a' b'their' b'stage' b'it' b'<unk>'
    b'by' b'dry' b',' b'speaking' b',' b'<unk>' b',' b'and' b'her' b'sight' b'Africa' b'.' b'Their' b'subsequent' b'circulation' b'as' b'35' b'%' b'christened' b'normally'
    b'building' b',' b'but' b'several' b'female' b'.' b'A.' b'Solbakken' b',' b'with' b'a' b'steady' b'@-@' b'allusion' b'itself' b',' b'are' b'a' b'oil' b','
    b'15' b'\xe2\x80\x93' b'0' b'intersection' b',' b'and' b'is' b'a' b'drink' b"'" b'heaven' b'of' b'brown' b'and' b'forfeits' b'.' b'The' b'goddess' b'has' b'the'
    b'heaviest' b'characteristics' b'of' b'30' b'@.@' b'5' b'million' b'F' b'(' b'4' b'\xc2\xb0' b'C' b')' b'.' b'The' b'finances' b'of' b'red' b'corresponding' b'euphoria'
    b'is' b'brownish' b';' b'females' b'pass' b'deep' b'and' b'may' b'be' b'confused' b'.' b'A' b'female' b'stem' b'in' b'the' b'<unk>' b'such' b'as' b'both'
    b'an' b'pair' b'of' b'poisons' b'attached' b'to' b'currencies' b'.' b'The' b'flock' b'of' b'female' b'figures' b'1830s' b',' b'particularly' b'under' b'exclusively' b'able' b'before'
    b'another' b'membrane' b'at' b'least' b'37' b'm' b'(' b'0' b'ft' b')' b'multiple' b'eggs' b'in' b'preventing' b'effect' b'.' b'Males' b'totaled' b'a' b'red'
    b'access' b',' b'they' b'used' b'as' b'food' b'occasionally' b',' b'and' b'capture' b'up' b'that' b'the' b'first' b'"' b'solid' b'<unk>' b'"' b'body' b'of'
    b'priority' b'had' b'been' b'most' b'tightly' b'left' b'to' b'drain' b'mammalian' b'culture' b'.' b'Yet' b'for' b'the' b'diversity' b'of' b'advertisement' b'in' b'eastern' b','
    b'filtration' b',' b'some' b'species' b'of' b'Northern' b'concentrations' b'<unk>' b'(' b'reddish' b'Cabinet' b')' b'.' b'Over' b'latex' b'birds' b'do' b'almost' b'be' b'made'
    b'cargo' b'.' b'More' b'people' b'are' b'scheme' b'left' b'<unk>' b'such' b'as' b'W\xc5\x82adys\xc5\x82aw' b'Pit' b',' b'or' b'two' b'symptoms' b',' b'and' b'mansions' b'.'
    b'<eos>' b'Common' b'starlings' b'blocks' b'attributed' b'to' b'accomplished' b'imposed' b'estate' b',' b'and' b'may' b'determine' b'generally' b'one' b'of' b'this' b'though' b'they' b'has'
    b'greater' b'information' b'in' b'the' b'reachability' b'starling' b'\xe2\x80\x94' b'often' b'crushed' b'.' b'Once' b'they' b"'re" b'rather' b'airfield' b',' b'it' b'is' b'little' b'on'
    b'very' b'accessible' b'mates' b',' b'though' b'males' b'can' b'express' b'other' b'or' b'species' b'to' b'people' b'may' b'be' b'.' b'All' b'common' b'chicks' b'can'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.9
    loss: 5.168
    elapsed time (seconds): 121.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  50.641 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
