.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Doping' b'in' b'2005' b'for' b'nuclear' b'MDOT' b'who' b'wanted' b'a' b'constituent' b'and' b'unusually' b'puppet' b',' b'and' b'described' b'by' b'the' b'South' b'African'
    b'Union' b'(' b'below' b'70' b'%' b')' b'.' b'Philippe' b'I' b'helped' b'its' b'opportunity' b'to' b'<unk>' b',' b'and' b'the' b'nation' b"'s" b'<unk>'
    b'Madres' b'lived' b'.' b'<eos>' b'But' b'Tactics' b'two' b'bought' b'transit' b'and' b'theatres' b'from' b'handling' b'enrolled' b'IV' b'spread' b'Adair' b';' b'"' b'on'
    b'core' b'other' b'bodies' b'like' b'about' b'massive' b'land' b'plants' b'to' b'cater' b'his' b'possession' b'of' b'Platform' b',' b'Atl\xc3\xa9tico' b',' b'and' b'black' b','
    b'and' b'a' b'other' b'high' b',' b'business' b'place' b'"' b'and' b'"' b'guitarist' b'at' b'3D' b'rate' b'we' b'had' b'"' b'(' b'there' b'was'
    b'out' b'that' b'the' b'largest' b'absorption' b'aspect' b'of' b'Ben' b'Pitman' b'should' b'have' b'in' b'the' b'same' b'era' b'.' b'However' b',' b'the' b'Panthers'
    b'followed' b'to' b'enhance' b'the' b'kakapo' b'and' b'was' b'able' b'to' b'speculate' b'the' b'player' b'@-@' b'down' b',' b'studios' b',' b'and' b'the' b'imperfections'
    b'of' b'the' b'brand' b'by' b'each' b'other' b'.' b'Built' b'with' b'Manders' b',' b'the' b'Palestinian' b'Eliot' b'is' b'presumed' b'paused' b'.' b'To' b'have'
    b'appearing' b'by' b'Bach' b',' b'the' b'astronomical' b'<unk>' b'improved' b'a' b'comment' b'of' b'the' b'discography' b'forecasting' b'<unk>' b',' b'whose' b'behaviour' b'is' b'composed'
    b'to' b'calculate' b'<unk>' b'<unk>' b',' b'although' b'demonstrate' b'the' b'star' b"'s" b't' b'.' b'Neither' b'administration' b'@-@' b'tree' b'<eos>' b'15' b',' b'do'
    b'not' b'run' b'off' b'the' b'feeding' b'might' b'be' b'a' b"'" b'Nightmare' b'and' b'a' b'planet' b'/' b'else' b'...' b'nor' b',' b'one' b'extending'
    b'.' b'I' b'am' b'coil' b'today' b',' b'usually' b'displayed' b'for' b'party' b',' b'and' b'the' b'costumes' b'are' b'came' b'to' b'practically' b'these' b'a'
    b'miracle' b'I' b'were' b'by' b'their' b'lifestyle' b'"' b',' b'especially' b'when' b'they' b'make' b'a' b'legitimate' b'deal' b'"' b'.' b'It' b'is' b'also'
    b'observed' b'by' b'the' b'<unk>' b'of' b'"' b'stunning' b'<unk>' b'"' b'(' b'died' b'to' b'have' b'disappeared' b'BC' b')' b'to' b'a' b'highly' b'wide'
    b'Junkers' b'Khitans' b'.' b'<eos>' b'The' b'Crusaders' b'of' b'the' b'common' b'starling' b'are' b'Caucasian' b'.' b'"' b'He' b'offers' b'a' b'very' b'love' b'natural'
    b'individual' b'that' b'a' b'claim' b'of' b'acting' b'builds' b',' b'after' b'the' b'average' b'Zabibe' b'itself' b'of' b'its' b'young' b'life' b'"' b',' b'though'
    b'incompetent' b'considering' b'31' b'or' b'more' b'than' b'Gilbert' b'the' b'period' b'riding' b'individual' b'elimination' b'about' b'2' b'@,@' b'Mumaith' b'per' b'registered' b'.' b'Until'
    b'Applewhite' b"'s" b'murder' b',' b'the' b'kakapo' b'represents' b'long' b'of' b'the' b'possibility' b'of' b'prospective' b'loyalists' b',' b'and' b'Vorenus' b'is' b'"' b'looked'
    b'for' b'supplies' b'as' b'such' b'down' b'Paris' b'"' b'.' b'He' b'puts' b'his' b'evidence' b'as' b'"' b'a' b'very' b'pure' b'act' b'and' b'him'
    b',' b'but' b'well' b'next' b'learned' b',' b'Buildings' b';' b'but' b'not' b',' b'a' b'kind' b'too' b'blow' b',' b'and' b'Ernest' b'I' b'think'
    b'about' b'to' b'our' b'head' b',' b'except' b'Albert' b'gigalitres' b'a' b'lot' b'of' b'minute' b',' b'decreasing' b'for' b'the' b'image' b'of' b'both' b'prey'
    b'(' b'one' b'of' b'his' b'maybe' b'Earth' b"'s" b'tasks' b')' b'"' b'.' b'The' b'player' b'did' b'not' b'refer' b'to' b'<unk>' b'towards' b'lose'
    b'<unk>' b'schools' b'in' b'the' b'fission' b',' b'so' b'these' b'involves' b'during' b'many' b'approaches' b'with' b'methods' b':' b'<eos>' b'Directorate' b',' b'but' b'vulnerable'
    b'into' b'a' b'signaling' b'knife' b'brothers' b'\xe2\x80\x94' b'sometimes' b'speed' b'directly' b'.' b'He' b'is' b'jealous' b'at' b'a' b'speed' b'brown' b'near' b'its' b'other'
    b'player' b"'s" b'head' b'.' b'<eos>' b'While' b'Michael' b'Barnes' b'carbon' b'in' b'he' b'believes' b'it' b'is' b'"' b'bucket' b'like' b'that' b'<unk>' b'.'
    b'"' b'When' b'a' b'design' b'leads' b'to' b'some' b'feminist' b'expansions' b',' b'players' b'initially' b'discourage' b'Ulisse' b',' b'when' b'others' b'accused' b'abuse' b'have'
    b'no' b'longer' b'whereas' b'less' b'the' b'male' b'the' b'meaning' b'too' b'<unk>' b'down' b',' b'and' b'for' b'example' b'and' b'professionals' b'the' b'third' b'coming'
    b'.' b'<eos>' b'The' b'player' b'fielding' b'at' b'this' b'point' b'during' b'its' b'Solomon' b'when' b'7' b'years' b',' b'and' b'/' b'survive' b'University' b'became'
    b'merely' b'rising' b'by' b'making' b'criticism' b'.' b'targeted' b'after' b'any' b'people' b',' b'the' b'wife' b'Cabral' b'claimed' b'by' b'Game' b'descent' b'in' b'April'
    b'1941' b'.' b'When' b'this' b'has' b'serious' b'moment' b',' b'the' b'Viscount' b"'s" b'<unk>' b'is' b'held' b'along' b'his' b'name' b'to' b'lose' b'any'
    b'theme' b';' b'most' b'other' b'<unk>' b'burrow' b'has' b'attributed' b'the' b'planet' b'happens' b'and' b'intensely' b'known' b'on' b'Dycroft' b'.' b'This' b'introduction' b'traveler'
    b'into' b'glee' b'levels' b',' b'an' b'Animal' b'army' b',' b'the' b'benefit' b'@-@' b'provisions' b',' b'and' b'parents' b'would' b'be' b'seen' b'1103' b'to'
    b'meet' b'a' b'short' b'kingship' b'to' b'have' b'come' b',' b'suggesting' b'that' b'they' b'have' b'such' b'elaborate' b'Chairman' b'.' b'<eos>' b'Depending' b'of' b'Floods'
    b',' b'female' b',' b'Magdalen' b',' b'and' b'becomes' b'applauded' b'by' b'manning' b',' b'ornaments' b'admits' b'to' b'the' b'Persians' b',' b'and' b'the' b'function'
    b'of' b'Heathrow' b'of' b'its' b'convection' b'sir' b'could' b'allow' b'police' b'or' b'stick' b'activity' b'another' b'.' b'Both' b'steps' b'include' b'aspects' b'Bungie' b'on'
    b'human' b'plants' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Publication' b'concurred' b'=' b'=' b'<eos>' b'<eos>' b'B.' b'Boom' b'Bang' b'!' b',' b'a' b'overall'
    b'short' b'female' b'artist' b'thanks' b'to' b'89A' b'dictator' b'bracelets' b'and' b'moving' b'it' b'to' b'protein' b',' b'the' b'historian' b'!' b'Donaldson' b',' b'but'
    b'is' b'a' b'royalty' b'planet' b'loss' b'.' b'Later' b',' b'in' b'a' b'environment' b'in' b'the' b'Message' b'blog' b',' b'the' b'progenitor' b'that' b'could'
    b'be' b'different' b',' b'but' b'apparently' b'it' b'becomes' b'a' b'substance' b'.' b'<unk>' b',' b'but' b'although' b'clinched' b'available' b',' b'Ashbee' b'feared' b'a'
    b'emotional' b'beak' b'.' b'His' b'father' b'Buoy' b'Pasley' b'wakes' b'in' b'Story' b',' b'and' b'abnormal' b'his' b'father' b',' b'Henry' b'<unk>' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Riddick' b',' b'Inari' b'and' b'Sciences' b',' b'have' b'ratio' b'to' b'be' b'so'
    b',' b'treated' b'by' b'physically' b'has' b'an' b'squat' b'for' b'the' b'Isles' b'.' b'Music' b'nests' b'are' b'a' b'noble' b'fusion' b'.' b'The' b'family'
    b'is' b'noticeable' b'moved' b'across' b'find' b'guilty' b'of' b'antagonists' b'.' b'Tulsi' b'hands' b'toilet' b'eggs' b'briefly' b'on' b'grand' b'freedom' b'of' b'knowledge' b'.'
    b'But' b'this' b'exit' b'@-@' b'winning' b'theorems' b'are' b'connected' b',' b'and' b'on' b'a' b'situation' b'it' b'can' b'be' b'more' b'common' b'.' b'Other'
    b'exception' b'are' b'<unk>' b'and' b'is' b'put' b'that' b'of' b'species' b'martyrs' b',' b'magical' b'value' b'such' b'as' b'<unk>' b'.' b'In' b'the' b'use'
    b'of' b'<unk>' b',' b'Crash' b'created' b'reddish' b'assembly' b',' b'has' b'no' b'roof' b',' b'which' b'he' b'only' b'resides' b'on' b'support' b'by' b'revival'
    b',' b'a' b'good' b'image' b'that' b'would' b'continue' b'pin' b'lines' b'beyond' b'<unk>' b'technique' b'to' b'announce' b',' b'and' b',' b'the' b'smell' b'of'
    b'such' b'527' b'approaches' b'@-@' b'like' b'theaters' b'copyright' b'by' b'air' b'or' b'common' b'insects' b'when' b'they' b'can' b'go' b'large' b',' b'they' b'look'
    b'and' b'persuade' b'its' b'risk' b'.' b'While' b'Dalmeny' b'begins' b'common' b'or' b'<unk>' b'blossom' b',' b'they' b'called' b'being' b'them' b'to' b'lose' b'unnecessary'
    b',' b'invisible' b'and' b'even' b'<unk>' b'.' b'In' b'this' b'small' b'way' b'it' b'was' b'Viva' b'eaves' b',' b'from' b'headland' b',' b'on' b'4'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 188.9
    loss: 5.168
    elapsed time (seconds): 97.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  54.373 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
