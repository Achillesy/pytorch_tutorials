.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'method' b'and' b'clients' b'deal' b'Sea' b'booking' b'as' b'fast' b'as' b'Avon' b'being' b'read' b'by' b'<unk>' b'Fulton' b'corners' b'.' b'However' b',' b'the'
    b'pounders' b'are' b'shown' b'to' b'flow' b'over' b'surveys' b'about' b'literally' b'Revolution' b'.' b'The' b'head' b'by' b'the' b'problem' b'is' b'characterised' b'by' b'an'
    b'village' b'of' b'ascending' b'integral' b'back' b'of' b'some' b'plays' b',' b'but' b'this' b'reopened' b'is' b'still' b'developed' b'.' b'It' b'tutelage' b'The' b'size'
    b'of' b'iris' b'of' b'the' b'<unk>' b'and' b'other' b'nodes' b'depicting' b'their' b'intellectual' b'number' b'of' b'Mandel' b',' b'and' b'Belle' b"'s" b'Leonard' b'decreased'
    b',' b'a' b'reflection' b'that' b'has' b'become' b'married' b'due' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'itself' b'=' b'=' b'<eos>' b'<eos>' b'Plain'
    b'eastern' b'both' b'era' b',' b'achieving' b'by' b'her' b'large' b'economic' b'is' b'<unk>' b',' b'by' b'a' b'latter' b'chicks' b'of' b'about' b'10' b'@,@'
    b'000' b'in' b'1972' b'.' b'It' b'is' b'usually' b'the' b'same' b'of' b'a' b'common' b'separated' b'reason' b'.' b'As' b'of' b'1960' b',' b'the'
    b'smell' b'of' b'Roots' b'showed' b'unique' b'into' b'a' b'Landing' b'exons' b'professional' b'ordering' b'movement' b'.' b'As' b'low' b'or' b'reliant' b'out' b',' b'Douglas'
    b'are' b'<unk>' b'alone' b',' b'although' b'good' b',' b'most' b'spots' b'<unk>' b'including' b'delicate' b'insurgents' b'as' b'one' b'of' b'its' b'TV' b'bend' b'('
    b'comprising' b'the' b'first' b'of' b'the' b'night' b'"' b'one' b'of' b'ashtaka' b'/' b'4' b')' b'and' b'the' b'spawning' b'fledging' b',' b'and' b'distinct'
    b',' b'<unk>' b'or' b'various' b'2' b'\xe2\x80\x94' b'and' b'any' b'accurate' b',' b'and' b'fit' b'as' b'possible' b'include' b'his' b'neck' b'and' b'rays' b','
    b'like' b'even' b'<unk>' b'@-@' b'200s' b',' b'even' b'well' b'to' b'eye' b',' b'"' b'in' b'located' b'.' b'The' b'screening' b'of' b'Ceres' b'ranging'
    b'among' b'timing' b'of' b'radiation' b'Lives' b',' b'which' b'is' b'one' b'of' b'only' b'round' b'breeding' b'starlings' b',' b'and' b'important' b'Irish' b'Catholic' b'age'
    b'fusion' b'spores' b'\xe2\x80\x93' b'including' b'their' b'suspense' b'instead' b'publicised' b'the' b'heaviest' b'habitat' b'of' b'other' b'fans' b',' b'rare' b',' b'weight' b',' b'and'
    b'two' b'younger' b'starling' b',' b'which' b'became' b'generally' b'widely' b'underneath' b'as' b'different' b'.' b'Despite' b'revisions' b',' b'many' b'men' b'may' b'indicate' b'these'
    b'or' b'bulb' b'of' b'its' b'consequences' b'.' b'These' b'bursts' b'pursued' b'numerous' b'nucleus' b'.' b'They' b'are' b'their' b'sex' b'defense' b'predicted' b'young' b'starling'
    b'.' b'Common' b'behaviour' b'dye' b'Irish' b'slabs' b'and' b'Mole' b'plantations' b'where' b'overall' b'Beauty' b'meet' b'macrophages' b'in' b'the' b'ocean' b'.' b'<eos>' b'A'
    b'study' b'that' b"'" b'habitat' b'flies' b'parks' b'of' b'abundance' b'are' b'forever' b'or' b'<unk>' b'there' b'is' b'rapid' b'principle' b'save' b'.' b'There' b'are'
    b'trouble' b'that' b'Trinity' b'the' b'history' b'of' b'immature' b'starlings' b'just' b'call' b'modification' b',' b'and' b'densely' b'APL' b'shaped' b'specialists' b'and' b'wild' b'spiny'
    b'.' b'They' b'of' b'meat' b'of' b'mature' b'techniques' b'are' b'killed' b'in' b'for' b'enzyme' b',' b'West' b',' b'and' b'they' b'are' b'no' b'longer'
    b'.' b'<unk>' b'(' b'fallout' b'in' b'Guards' b'(' b'tawny' b'habits' b')' b'and' b'1219' b'(' b'values' b')' b'states' b'much' b'eggs' b'from' b'comprises'
    b'traditional' b'revision' b'may' b'be' b'seen' b'as' b'possible' b'to' b'slide' b'to' b'yellowish' b'for' b'its' b'behaviour' b'.' b'The' b'<unk>' b'then' b'feed' b'on'
    b'the' b'head' b'of' b'injured' b'droppings' b',' b'such' b'as' b'swan' b'<unk>' b',' b'fast' b'environments' b',' b'and' b'loss' b'in' b'livestock' b'.' b'The'
    b'Saw' b'puddings' b'depends' b'on' b'the' b'<unk>' b'for' b'abundance' b',' b'were' b'prominent' b'as' b'<unk>' b'as' b'black' b',' b'McRae' b',' b'disease' b'and'
    b'<unk>' b'.' b'One' b'animals' b'are' b'rarely' b'obliged' b'by' b'electron' b'<unk>' b'by' b'inheritance' b',' b'<unk>' b',' b'<unk>' b',' b'Truro' b',' b'and'
    b'bulbs' b',' b'and' b'for' b'individual' b'feathers' b'and' b'unfinished' b'to' b'aid' b'or' b'affected' b'clothes' b'who' b'would' b'be' b'@-@' b'stable' b',' b'then'
    b'when' b'it' b'triggered' b'a' b'victim' b'to' b'be' b'assumed' b'to' b'produce' b'<unk>' b'to' b'molecule' b'.' b'tiebreaker' b'have' b'an' b'distinctive' b'marble' b'owl'
    b'off' b'as' b'they' b'will' b'have' b'allowed' b'it' b'even' b'connected' b'.' b'<eos>' b'A' b'rapid' b',' b'<unk>' b'behaviour' b',' b'volume' b',' b'and'
    b'Gatwick' b'steps' b'that' b'are' b'thought' b'to' b'be' b'from' b'separately' b'or' b'or' b',' b'rounded' b',' b'and' b'dried' b',' b'they' b'feed' b'in'
    b'<unk>' b',' b'<unk>' b',' b'western' b'<unk>' b'and' b'141' b'<unk>' b'when' b'it' b'may' b'require' b'only' b'three' b'eggs' b'.' b'<eos>' b'<unk>' b'Rosey'
    b'(' b'Conservation' b')' b'mean' b'that' b'the' b'kakapo' b'is' b'dark' b'isotopes' b'.' b'Among' b'invariably' b'taste' b',' b'the' b'kakapo' b'is' b'only' b'small'
    b'to' b'become' b'called' b',' b'either' b',' b'at' b'first' b'five' b'individuals' b'come' b'up' b'a' b'food' b'problem' b'when' b'it' b'is' b'likely' b'for'
    b'high' b'processing' b',' b'because' b'it' b'includes' b'tables' b'utilizes' b'are' b'long' b'.' b'One' b'of' b'these' b'Nebaioth' b'chicks' b'and' b'diseases' b'are' b'given'
    b'but' b'closely' b'places' b'to' b'remove' b'all' b'other' b'various' b'or' b'<unk>' b'arches' b',' b'which' b'soon' b'produces' b'very' b'elaborate' b'ones' b'.' b'In'
    b'addition' b'to' b'heart' b',' b'non' b'@-@' b'examples' b'are' b'boundary' b'.' b'Along' b'by' b'gills' b',' b'rivers' b'toy' b'or' b'triangular' b'troops' b'have'
    b'an' b'1895' b'typographic' b'belt' b'exceeding' b'Salmana' b'on' b'further' b'usage' b'of' b'Higher' b'courts' b'.' b'The' b'asteroid' b'feathers' b'is' b'celebrated' b'from' b'being'
    b'a' b'signaling' b'species' b'on' b'the' b'IUCN' b'side' b'.' b'The' b'liquid' b'pink' b'is' b'somewhat' b'more' b'seriously' b'in' b'India' b'or' b'one' b'or'
    b'two' b'plants' b'of' b'the' b'eyes' b'before' b'the' b'degraded' b'starling' b'who' b'do' b'not' b'cede' b'.' b'However' b',' b'when' b'it' b'will' b'defeat'
    b'land' b'when' b'they' b'associated' b'to' b'another' b'hand' b',' b'they' b'show' b'.' b'Conservation' b'cycle' b'can' b'be' b'treated' b'by' b'podcast' b',' b'normally'
    b'reducing' b'that' b'they' b'or' b'decrease' b'to' b'other' b'old' b',' b'ordinary' b'vomiting' b'between' b'distinctive' b'value' b'and' b'composition' b'when' b'they' b'are' b'made'
    b'it' b'like' b'other' b'other' b'drowns' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Distribution' b'=' b'=' b'<eos>' b'<eos>' b'The' b'common' b'starling' b'is' b'undrafted'
    b'.' b'<eos>' b'edge' b',' b'pre' b'@-@' b'breeding' b'transcription' b',' b'is' b'a' b'clutch' b'shaped' b'by' b'females' b'that' b'may' b'engage' b'archaic' b'with'
    b'<unk>' b',' b'Moroccan' b',' b'possessing' b'only' b'at' b'least' b'three' b'.' b'The' b'desired' b'destruction' b'of' b'<unk>' b'unstable' b',' b'the' b'rest' b'of'
    b'Woodland' b'and' b'has' b'a' b'male' b'matrix' b'from' b'60' b'\xe2\x80\x93' b'5' b',' b'which' b'they' b'removed' b'with' b'an' b'trunk' b'typists' b'on' b'a'
    b'relatively' b'Achille' b'resentment' b'.' b'It' b'is' b'essentially' b'said' b'to' b'suggest' b'particularly' b'any' b'risk' b'of' b'world' b'and' b'bare' b'associated' b'.' b'It'
    b'will' b'be' b'disturbing' b'by' b'long' b'and' b'often' b'astronomers' b'.' b'Common' b'starlings' b'start' b'only' b'that' b'contain' b'<unk>' b'(' b'this' b'example' b')'
    b',' b'usually' b'pleasing' b',' b'or' b'stowaway' b',' b'instead' b'who' b'meet' b'high' b'example' b'.' b'Three' b'are' b'first' b'allowed' b'to' b'celebrate' b'a'
    b'Backyard' b',' b'with' b'larger' b'or' b'medical' b'monazite' b'while' b'sourced' b'up' b'cultivated' b',' b'continuous' b'technology' b'and' b'shades' b'that' b'they' b'appear' b'in'
    b'large' b'supply' b';' b'plants' b'often' b'<unk>' b'membranes' b'.' b'Over' b'after' b'this' b'male' b':' b'the' b'second' b'frequency' b'eastward' b'is' b'a' b'deep'
    b'<unk>' b',' b'not' b'fully' b'probably' b'"' b'inside' b'that' b'they' b'should' b'continue' b'.' b'If' b'just' b'there' b'is' b'nothing' b'evidence' b'to' b'be'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 210.3
    loss: 5.168
    elapsed time (seconds): 117.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  35.348 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
