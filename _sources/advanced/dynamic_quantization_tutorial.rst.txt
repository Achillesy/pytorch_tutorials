.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'a' b'series' b'of' b'visitors' b',' b'which' b'provides' b'it' b'an' b'pair' b'of' b'food' b'culmination' b'.' b'<eos>' b'<eos>' b'=' b'=' b'mysterious'
    b'life' b'=' b'=' b'<eos>' b'<eos>' b'Although' b'of' b'\xc2\xa3' b'8' b'million' b'this' b',' b'he' b'attended' b'a' b'dark' b'game' b'for' b'nine' b'years'
    b',' b'with' b'70' b'seconds' b',' b'and' b'six' b'children' b'in' b'donated' b'driving' b'O' b"'Malley" b'with' b'a' b'short' b'75' b'%' b'proposed' b')'
    b'.' b'Another' b'margin' b'arrived' b'on' b'a' b'Eastern' b'colour' b'affiliates' b'in' b'a' b'female' b'history' b',' b'marketed' b'to' b'600' b'non' b'@-@' b'uncut'
    b'samples' b'.' b'"' b'The' b'Hollywood' b'Bad' b'Network' b'is' b'attested' b'Spisevognselskapet' b'.' b'"' b'(' b'scoreless' b'security' b'Subsequently' b')' b'was' b'often' b'held'
    b'in' b'May' b'as' b'none' b'of' b'eight' b'the' b'43' b',' b'and' b'is' b'also' b'killed' b'in' b'1995' b'.' b'In' b'other' b'countries' b','
    b'the' b'engines' b'served' b'as' b'a' b'two' b'@.@' b'3' b'%' b',' b'the' b'Sun' b'of' b'five' b'<unk>' b'disengage' b'.' b'Over' b'completing' b'up'
    b'a' b'unruly' b'@-@' b'loop' b'(' b'Liberty' b'incline' b')' b'.' b'Book' b'was' b'named' b'number' b'.' b'Each' b'plan' b'at' b'landfill' b'is' b'a'
    b'24' b'@-@' b'meter' b'filled' b'by' b'favouring' b'draft' b',' b'for' b'which' b'his' b'description' b'a' b'possession' b'of' b'spots' b'in' b'total' b'injuries' b','
    b'with' b'6' b'@.@' b'3' b'million' b'years' b'ago' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Personnel' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'='
    b'=' b'Handwriting' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'two' b'groups' b'of' b'special' b'Christians' b'.' b'Hairan' b'in' b'Dublin' b'is' b'widely' b'acclaimed'
    b'affected' b'by' b'Earth' b'<unk>' b'.' b'Two' b'methods' b'include' b'presenter' b'Waymon' b',' b'corporation' b'<unk>' b'and' b'Cecil' b'<unk>' b'are' b'also' b'able' b'to'
    b'corn' b'catch' b'blinded' b'by' b'S.' b'Rico' b'.' b'stories' b'have' b'designed' b'almost' b'$' b'5' b'million' b',' b'with' b'best' b'roads' b'grew' b'up'
    b'necessary' b'mostly' b'to' b'last' b'sooner' b'after' b'becoming' b'dangerous' b'.' b'In' b'me' b',' b'race' b'services' b'are' b'largely' b'implemented' b'to' b'be' b'married'
    b'and' b'the' b'island' b'should' b'be' b'spotted' b'by' b'community' b',' b'or' b'when' b'it' b'can' b'be' b'reinforced' b'from' b'mercy' b'such' b'as' b'<unk>'
    b'or' b'molecules' b'in' b'different' b'Shuswap' b'sequence' b',' b'found' b'in' b'northern' b'habitats' b',' b'potassium' b'functions' b',' b'<unk>' b'confer' b'in' b'drums' b','
    b'nor' b'Labyrinth' b'for' b'range' b'.' b'Unlike' b'example' b',' b'Research' b'bodies' b'and' b'roll' b'<unk>' b'primarily' b'are' b'a' b'nuclei' b'of' b'B\xc3\xbclow' b'and'
    b'technical' b'bleeding' b'(' b'she' b'<unk>' b'Hill' b')' b'and' b'are' b'<unk>' b'.' b'Khandoba' b'himself' b'observed' b'responsibility' b',' b'<unk>' b',' b'established' b'<unk>'
    b'and' b'<unk>' b',' b'without' b'proteins' b'where' b'they' b'easily' b'framed' b'evidence' b'laws' b'have' b'also' b'been' b'made' b'separate' b'.' b'The' b'C' b'and'
    b'with' b'two' b'distinct' b'predators' b'are' b'now' b'implied' b'they' b'remain' b'.' b'In' b'which' b'many' b'years' b'were' b'focus' b'by' b'(' b'Utah' b')'
    b'and' b'even' b'characterized' b'directly' b':' b'25' b'\xe2\x80\x93' b'4' b'\xce\xbcm' b'was' b'decrease' b'throughout' b'a' b'range' b'of' b'Ypres' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'S' b',' b'walking' b',' b'earning' b'=' b'=' b'<eos>' b'<eos>' b'The' b'renowned' b'toxicity' b'of' b'granite' b'than' b'themselves' b'was' b'temporarily' b'used'
    b'.' b'arrangements' b'can' b'be' b'affected' b'and' b'often' b',' b'more' b'than' b'flightless' b'victims' b'are' b'also' b'made' b'to' b'be' b'in' b'some' b'<unk>'
    b',' b'which' b'may' b'be' b'they' b'could' b'lie' b'off' b'ribosomal' b'messages' b'.' b'Mosley' b'must' b'oriental' b'Heller' b'by' b'their' b'prey' b'(' b'sitting'
    b'as' b'to' b'possibly' b'tables' b')' b',' b'which' b'were' b'discovered' b'by' b'Ramayana' b',' b'but' b'as' b'they' b'lie' b'<unk>' b'when' b'they' b'may'
    b'be' b'fragile' b'by' b'flowers' b'.' b'They' b'suffer' b'include' b'Anita' b'Lopez' b'for' b'DAGs' b',' b'so' b'all' b'of' b'a' b'technique' b'are' b'generally'
    b'accepted' b'with' b'a' b'distance' b'and' b'unconfirmed' b'crops' b'to' b'assemble' b'of' b'underneath' b'or' b'eye' b'eggs' b'with' b'a' b'species' b'of' b'their' b'signaling'
    b'existence' b'.' b'They' b'occur' b'on' b'29' b'Irish' b'species' b'on' b'the' b'ground' b'@-@' b'grey' b'system' b'has' b'stingrays' b'with' b'anything' b'and' b'derided'
    b'admiration' b'to' b'become' b'broods' b'.' b'It' b'may' b'be' b'seen' b'as' b'their' b'distinctive' b'or' b'most' b'variable' b'voyage' b'or' b'non' b'@-@' b'native'
    b'areas' b'and' b'so' b'others' b'decent' b'better' b'force' b'.' b'S.' b'Gaelic' b'lice' b'suggested' b'that' b'the' b'plains' b'lived' b'in' b'on' b'residents' b','
    b'they' b'defeated' b'or' b'are' b'545' b'after' b'tissues' b'and' b'so' b'largely' b'beat' b'but' b'just' b'assigned' b'to' b'his' b'disciples' b'.' b'Because' b'they'
    b'make' b'some' b'birds' b'may' b'be' b'open' b';' b'when' b'if' b'<unk>' b'so' b'food' b',' b'they' b'were' b'<unk>' b'by' b'it' b'before' b'they'
    b'have' b'very' b'different' b'related' b'stages' b'of' b'eye' b'arms' b',' b'cannot' b'be' b'seen' b'as' b'"' b'pose' b'"' b'marks' b'so' b'for' b'freely'
    b'.' b'His' b'true' b'DNA' b'Firebrand' b'has' b'been' b'adapted' b'by' b'their' b'neighbours' b'.' b'The' b'names' b'were' b'also' b'described' b'to' b'have' b'up'
    b'tugboat' b'@-@' b'length' b'exact' b'resistance' b',' b'including' b'flighted' b'over' b'the' b'other' b'battle' b'if' b'it' b'cannot' b'be' b'happening' b'until' b'their' b'1850'
    b'collaborator' b'<unk>' b'to' b'measure' b'piers' b'with' b'vulnerable' b'sails' b'.' b'While' b'they' b'arose' b',' b'they' b'call' b'iris' b'or' b'<unk>' b'into' b'any'
    b'other' b'Russia' b'to' b'sink' b'.' b'Outside' b'they' b'can' b'<unk>' b'from' b'Deccan' b'flying' b'Democratic' b'!' b',' b'the' b'facial' b'male' b'brig' b'<unk>'
    b',' b'for' b'example' b',' b'doubt' b'and' b'<unk>' b'changes' b'purposefully' b',' b'calls' b',' b'often' b'kill' b'in' b'the' b'plant' b'.' b'<eos>' b'Dura'
    b'occurs' b'females' b'may' b'be' b'named' b'.' b'With' b'such' b'books' b'untreated' b'and' b'eucalypts' b'are' b'besieged' b',' b'nationalistic' b',' b'and' b'they' b'lay'
    b'the' b'eggs' b',' b'they' b'are' b'worse' b'into' b'more' b'difficult' b'.' b'Common' b'areas' b'lacks' b'Omar' b',' b'spreading' b',' b'with' b'<unk>' b'them'
    b',' b'now' b'some' b'celestial' b'tools' b',' b'boxes' b'from' b'<unk>' b',' b'<unk>' b',' b'capping' b',' b'servants' b',' b'tape' b',' b'or' b'hitters'
    b'.' b'They' b'Bromwich' b'Nash' b'Joyce' b',' b'warning' b'or' b',' b'common' b',' b'octagonal' b',' b'blue' b'forests' b'(' b'secondary' b'spots' b',' b'have'
    b'short' b'backgrounds' b')' b'.' b'In' b'late' b'\xe2\x80\x93' b'snout' b',' b'their' b'highest' b'intended' b',' b'also' b'limited' b',' b'affected' b'its' b'confronted' b'intensity'
    b',' b'202' b'or' b'181' b',' b'which' b'includes' b'an' b'wide' b',' b'method' b'of' b'<unk>' b',' b'which' b'shows' b'only' b'one' b'surface' b'.'
    b'A' b'tree' b'extended' b'evacuation' b'on' b'a' b'skeleton' b'life' b',' b'<unk>' b'progress' b',' b'naturalized' b'rays' b',' b'and' b'identifying' b'it' b'guilty' b'of'
    b'folklorists' b'that' b'the' b'heads' b'of' b'the' b'greater' b'find' b'may' b'be' b'of' b'associated' b'.' b'Once' b'they' b'can' b'be' b'so' b'hunt' b','
    b'they' b'are' b'Ode' b'.' b'Their' b'abilities' b'tend' b'to' b'be' b'differentiated' b'by' b'Russia' b',' b'such' b'as' b'<unk>' b',' b'Lamar' b'such' b'as'
    b'the' b'Enzymes' b',' b'genes' b'and' b'<unk>' b'actions' b'and' b'non' b'@-@' b'discovery' b',' b'reduce' b'when' b'this' b'species' b'prefers' b',' b'like' b'Brigadier'
    b'God' b'Dark' b'(' b'<unk>' b'.' b')' b',' b'four' b'years' b'distinct' b'then' b'"' b'hated' b'Marmontel' b'"' b')' b'.' b'In' b'one' b'of'
    b'the' b'Uprising' b',' b'Ireland' b"'s" b'son' b'Sullivan' b'(' b'Jack' b'der' b'Weyden' b"'s" b'Wild' b')' b'piece' b'used' b'a' b'late' b'big' b'with'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.7
    loss: 5.168
    elapsed time (seconds): 112.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  33.129 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
