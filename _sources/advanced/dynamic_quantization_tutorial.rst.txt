.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'be' b'translated' b'back' b'this' b',' b'when' b'E.122' b'slender' b'harmonies' b',' b'but' b'storm' b'word' b',' b'...' b'and' b'Jasper' b'@-@' b'or'
    b'@-@' b'S.' b'Lebanon' b"'Malley" b'Lands' b'dystopian' b'mysterious' b',' b'Elias' b'mB\xc3\xb3' b'Jones' b',' b'avoided' b'Arniel' b'in' b'a' b'small' b'blood' b'<unk>' b'on'
    b'blue' b'that' b'lamented' b'along' b';' b'however' b',' b'in' b'Men' b',' b'set' b'funding' b'from' b'proper' b'display' b',' b'users' b'of' b'improvements' b'was'
    b'not' b'regarded' b':' b'it' b'was' b'increased' b',' b'on' b'the' b'setting' b'of' b'four' b'people' b'"' b'Hair' b'"' b'and' b'"' b'Gaines' b'"'
    b',' b'intended' b'to' b'have' b'played' b'almost' b'of' b'a' b'eye' b'.' b'Feeling' b'with' b'missing' b',' b'their' b'above' b'Oscar' b"'" b'alleged' b'reason'
    b'to' b'be' b'spent' b',' b'but' b'said' b'that' b'"' b'there' b'was' b'rays' b'made' b'habitats' b'forth' b'from' b'all' b'up' b'exactly' b'enough' b'.'
    b'"' b'The' b'mainstream' b'writer' b'John' b'Richardson' b"'s" b'Chancellor' b'described' b'for' b'the' b'text' b'and' b'not' b'starred' b'from' b'a' b'game' b"'s" b'own'
    b'efforts' b'.' b'By' b'his' b'first' b'play' b'HBO' b"'s" b'body' b'skirt' b'would' b'be' b'Karros' b'<unk>' b'speed' b',' b'a' b'ongoing' b'giant' b'indigenous'
    b'race' b'cross' b'Meyers' b'.' b'Two' b'M4' b'closed' b'up' b'administrative' b'habitats' b'storage' b'and' b'other' b'arrest' b'as' b'followed' b'by' b'a' b'bundle' b'that'
    b'"' b'dialog' b'Okay' b'"' b'is' b'"' b'Certainly' b'in' b'test' b'incompetence' b'that' b'from' b'getting' b'its' b'permission' b'they' b'easily' b'approached' b'[' b'...'
    b']' b'present' b'girls' b'vary' b'.' b'"' b'\xc4\x80c\xc4\x81rya' b'requests' b'in' b'Tennyson' b"'s" b'difficulties' b'and' b'even' b'have' b'done' b',' b'taking' b'starting' b'to'
    b'raise' b'his' b'racist' b'territory' b';' b'"' b'That' b'heights' b'do' b'a' b'vigorous' b'back' b'"' b'that' b'it' b'pays' b'called' b'Hornung' b',' b'"'
    b'consciously' b'as' b'his' b'Kim' b'the' b"'s" b'planet' b',' b'killed' b'a' b'degree' b'company' b'that' b'is' b'best' b'great' b'when' b'it' b'seems' b'into'
    b'be' b'drained' b'.' b'"' b'Even' b'she' b'performed' b'and' b'son' b'in' b'Global' b'Hornung' b'are' b'among' b'a' b'dramatic' b'means' b'after' b'his' b'final'
    b'distance' b',' b'when' b'of' b'the' b'book' b"'s" b'next' b'young' b'career' b'"' b'cruise' b'paper' b';' b'you' b'is' b'and' b'constantly' b'<unk>' b'one'
    b'@-@' b'great' b'ways' b'of' b'Okay' b';' b'sketchy' b'sheep' b'be' b'given' b'by' b'other' b'influence' b'"' b'.' b'These' b'themes' b'Devon' b'stories' b'involving'
    b'for' b'phones' b':' b'<eos>' b'This' b'years' b'(' b'actually' b'located' b'on' b'his' b'last' b'year' b')' b':' b'"' b'Instead' b',' b'Ingvald' b'and'
    b'wasteland' b'in' b'...' b'<unk>' b'is' b'a' b'<unk>' b'but' b'it' b'was' b'thought' b'that' b'[' b'they' b'is' b'exclusively' b'seen' b'by' b'1807' b'for'
    b'himself' b'.' b'His' b'observation' b'of' b'this' b'suppose' b'come' b'amongst' b'corsage' b'and' b'it' b'because' b'And' b'These' b'artist' b'of' b'The' b'photography' b'<unk>'
    b'<unk>' b'"' b'(' b'The' b'sequel' b'of' b'police' b'have' b'changed' b'to' b'20' b'%' b'crib' b')' b'.' b'The' b'airspace' b'effectiveness' b':' b'"'
    b'I' b'don' b"'t" b'happen' b'down' b'or' b'muscimol' b'.' b'If' b'The' b'rough' b'that' b'is' b'Citibank' b'itself' b'manner' b'and' b'go' b'large' b'generosity'
    b':' b'she' b'is' b'<unk>' b'<unk>' b'.' b'"' b'The' b'type' b'hope' b'of' b'version' b'and' b'Kanata' b'clip' b'at' b'a' b'time' b',' b'for'
    b'example' b',' b'<unk>' b',' b'Carlyle' b'and' b'Si' b',' b'Jain' b'and' b'elves' b',' b'attack' b'Moss' b'Gray' b',' b'use' b'the' b'game' b'to'
    b'Alexander' b'for' b'him' b'to' b'Tracy' b'King' b'I' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Influence' b'=' b'=' b'<eos>' b'<eos>' b'The' b'sixth' b'character'
    b'in' b'The' b'Isles' b'is' b'a' b'door' b'from' b'birth' b'the' b'storyline' b';' b'a' b'inner' b'hop' b'girl' b',' b'atypical' b'it' b'as' b'a'
    b'whole' b'"' b'ridiculous' b'besieging' b'for' b'Mission' b'of' b'knowledge' b'"' b'.' b'Only' b'displaying' b'antibodies' b'he' b'wakes' b'as' b'Academics' b',' b'and' b'long'
    b'musicians' b'may' b'be' b'exported' b'for' b'<unk>' b'.' b'The' b'<unk>' b'panel' b'is' b'the' b'gamma' b'envelope' b',' b'at' b'Asomtavruli' b'airport' b',' b'extinct'
    b'for' b'June' b'11' b'who' b'appears' b'a' b'minor' b'to' b'four' b'months' b'.' b'It' b'is' b'unknown' b'.' b'Fly' b'supporting' b'Gabbar' b'Wilson' b'performing'
    b'a' b'sporadically' b'to' b'face' b',' b'chain' b'Too' b'Castro' b',' b'visited' b'by' b'Mad' b'Unity' b'.' b'The' b'snakes' b'Edgar' b'Collins' b'(' b'imprint'
    b')' b'is' b'assigned' b'to' b'Tracy' b'I' b'(' b'died' b'miles' b'as' b'an' b'background' b'ring' b',' b'and' b'during' b'context' b')' b"'" b'close'
    b'pattern' b'the' b'large' b'female' b'@-@' b'17' b'is' b'more' b'widely' b'correct' b'(' b'stegosaurid' b')' b':' b'they' b'steps' b'to' b'control' b'he' b'did'
    b'not' b'fly' b'the' b'soul' b'with' b'mating' b'.' b'Also' b',' b'supernatural' b'evidence' b'may' b'be' b'seen' b'at' b'<unk>' b'loss' b'from' b'different' b'bird'
    b'singers' b'to' b'give' b'more' b'one' b'forms' b'chelicerae' b'trip' b',' b'with' b'long' b'reflecting' b'or' b'effect' b'exclusively' b'from' b'or' b'gain' b'from' b'foliage'
    b'between' b'flies' b'to' b'New' b'Zealand' b'.' b'Roughly' b'versions' b'of' b'a' b'flock' b',' b'being' b'known' b'out' b'in' b'<unk>' b',' b'attempt' b'to'
    b'placid' b'the' b'Dark' b'AC' b'of' b'Mary' b'(' b'pleas' b')' b'.' b'<eos>' b'<unk>' b'mentions' b'other' b'decreases' b'division' b'in' b'length' b',' b'and'
    b'finds' b'elements' b'of' b'dedication' b'to' b'people' b'.' b'By' b'these' b'expression' b'like' b'his' b'alleged' b'movement' b',' b'female' b',' b'Dre' b',' b'prokaryotes'
    b',' b'picks' b'and' b'sends' b'for' b'atom' b'a' b'patch' b',' b'a' b'reasonable' b'or' b'technologies' b'treatment' b'.' b'The' b'coyote' b'<unk>' b'proposes' b'a'
    b'well' b'Back' b',' b'coupled' b'by' b'V\xc4\x83n' b'laevigatum' b'by' b'Madison' b':' b'Breese' b'fallout' b'or' b'Thailand' b'foreign' b',' b'leaving' b'a' b'barrister' b'repeatedly'
    b'.' b'<eos>' b'The' b'family' b'of' b'Transport' b'maintains' b'strongly' b'of' b'so' b'Poland' b',' b'which' b'represents' b'his' b'mechanical' b'teammates' b'of' b'Sands' b','
    b'by' b'which' b'his' b'<unk>' b',' b'one' b'case' b'of' b'all' b'images' b'of' b'the' b'parallel' b'female' b'from' b'Edmonds' b'.' b'The' b'television' b'fast'
    b'investigation' b'of' b'playing' b'McGwire' b':' b'<eos>' b'According' b'to' b'ceremonies' b')' b'is' b'a' b'child' b',' b'abroad' b',' b'and' b'haridasa' b'one' b','
    b'environment' b',' b'looking' b',' b'and' b'<unk>' b'.' b'"' b'One' b'more' b'Astraeus' b'remain' b'almost' b'somewhat' b'evidence' b'from' b'a' b'"' b'scientific' b'engineering'
    b'"' b',' b'"' b'and' b'make' b'little' b'sins' b',' b'"' b'sad' b'image' b'"' b'Acts' b'racing' b'"' b',' b'"' b'overbearing' b'guys' b'"'
    b'from' b'Seems' b'.' b'Kyle' b'<unk>' b'identified' b'Star' b'Romero' b'as' b'God' b',' b'and' b'"' b'spelling' b'<unk>' b'the' b'migratory' b'hand' b'plumes' b','
    b'how' b'1660' b',' b'to' b'outward' b',' b'naked' b',' b'spaces' b'like' b'nesting' b',' b'membrane' b'or' b'art' b'in' b',' b'at' b'a' b'source'
    b'of' b'Hiberno' b'value' b'not' b'(' b'an' b'good' b'of' b'our' b'veil' b'"' b')' b',' b'and' b'asserts' b'that' b'"' b'One' b'fat' b'arms'
    b'have' b'meant' b'that' b'it' b'might' b'be' b'raised' b'things' b'to' b'be' b'a' b'versatile' b'asteroid' b'Look' b'violation' b'.' b'"' b'In' b'a' b'film'
    b'inscription' b',' b'odor' b'later' b'noted' b'a' b'genus' b'to' b'be' b'recovered' b'with' b'credit' b',' b'and' b'Gall' b'has' b'been' b'driven' b'in' b'29'
    b'%' b',' b'on' b'the' b'occasion' b'by' b'Admiral' b'M.' b'Heinz' b'!' b'.' b'lb' b',' b'Odaenathus' b'laid' b'that' b'he' b'is' b'"' b'a'
    b'style' b'for' b'destroys' b'expressed' b'particle' b'forms' b'a' b'colorless' b'word' b'"' b'.' b'Nonetheless' b',' b'on' b'whites' b'his' b'play' b'claim' b'to' b'"'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.7
    loss: 5.168
    elapsed time (seconds): 129.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  16.224 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
