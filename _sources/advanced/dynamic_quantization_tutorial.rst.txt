.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'athletes' b'from' b'<unk>' b'with' b'70' b'%' b',' b'with' b'FIFA' b'University' b'sold' b'a' b'large' b'friendship' b'during' b'his' b'house' b'.' b'The' b'propaganda'
    b'length' b'of' b'later' b'publishers' b'may' b'be' b'normally' b'inclined' b'to' b'be' b'unstable' b'.' b'Observation' b'that' b'year' b',' b'ultimate' b'Christians' b',' b'such'
    b'as' b'<unk>' b',' b'<unk>' b',' b'Electrical' b',' b'<unk>' b',' b'Western' b',' b'<unk>' b',' b'Oil' b',' b'<unk>' b',' b'<unk>' b',' b'Microscopic'
    b',' b'focal' b',' b'grey' b',' b'pantheon' b',' b'engineering' b'and' b'masked' b'masks' b';' b'possibly' b'for' b'Sons' b'of' b'occasion' b'that' b'changed' b'than'
    b'all' b'eastern' b'.' b'Like' b'non' b'@-@' b'encouraged' b'are' b'one' b'of' b'the' b'latter' b'of' b'TV' b'and' b'Peronism' b'.' b'In' b'addition' b'that'
    b'makes' b'in' b'the' b'floors' b',' b'she' b'wrote' b'"' b'it' b'should' b'be' b'a' b'huge' b'moon' b'.' b'"' b'<eos>' b'clumps' b'and' b'<unk>'
    b',' b'breakfast' b',' b'e' b',' b'<unk>' b',' b'<unk>' b',' b'Herd' b',' b'Beat' b',' b'multiplayer' b',' b'Far' b'bodies' b'Studios' b')' b','
    b'since' b'the' b'Republic' b'of' b'starling' b',' b'a' b'wood' b'staircase' b',' b'is' b'one' b'of' b'the' b'largest' b'religious' b'thought' b'of' b'buff' b'Siberia'
    b'which' b'was' b'planned' b'by' b'endurance' b',' b'rather' b'than' b'an' b'maximum' b',' b'and' b'of' b'third' b'venues' b'are' b'rotation' b'to' b'be' b'important'
    b'as' b'enthusiastic' b'.' b'As' b'tied' b'of' b'<unk>' b',' b'the' b'kakapo' b'was' b'under' b'a' b'psychic' b'design' b'.' b'He' b'enjoyed' b'Wear' b'orbits'
    b'and' b'other' b'halls' b'exist' b',' b'running' b'by' b'committed' b'schools' b'on' b'the' b'right' b'of' b'high' b'say' b'off' b'Sixty' b'surfaces' b'.' b'They'
    b'have' b'also' b'until' b'Amano' b"'s" b'necessary' b'efforts' b'and' b'set' b'at' b'Newport' b',' b'not' b'searching' b'from' b'the' b'space' b'Havilland' b'vote' b'and'
    b'family' b'stories' b'to' b'generate' b'and' b'beer' b'.' b'Throughout' b'there' b'they' b'inhabit' b'the' b'feeling' b'of' b'worldwide' b',' b'most' b'late' b'there' b'are'
    b'precautions' b'(' b'as' b'at' b'least' b'30' b'years' b',' b'that' b',' b'instead' b'of' b'about' b'%' b'is' b'such' b'as' b'a' b'edge' b')'
    b'local' b'measures' b',' b'even' b'entirely' b'reducing' b'when' b'far' b'.' b'8' b'%' b'of' b'melody' b',' b'and' b'can' b'therefore' b'be' b'seen' b'at'
    b'subfamily' b'Island' b'during' b'who' b'differed' b'up' b'of' b'little' b'receptions' b'.' b'The' b'amount' b'of' b'188' b'proposes' b'Ceres' b'to' b'be' b'troop' b'over'
    b'weighing' b'by' b'managerial' b'wind' b'world' b'vegetation' b'.' b'In' b'his' b'clients' b',' b'relative' b',' b'and' b'Arenas' b',' b'it' b'becomes' b'commonly' b'several'
    b'storms' b'.' b'It' b'may' b'be' b'occasionally' b'attested' b'<unk>' b'in' b'Africa' b'when' b'they' b'can' b'have' b'resulted' b'in' b'difficulty' b'by' b'the' b'thy'
    b'IV' b'and' b'<unk>' b'Pass' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Habitat' b'control' b'=' b'=' b'<eos>' b'<eos>' b'Until' b'the' b'first' b'United' b'States'
    b'of' b'Ireland' b',' b'it' b'was' b'new' b'only' b'to' b'be' b'visible' b'by' b'some' b'jaw' b'and' b'Penn' b'executive' b'tune' b',' b'which' b'begin'
    b'to' b'be' b'burned' b'into' b'an' b'winged' b'supply' b'.' b'A' b'philosopher' b'metal' b'builders' b'to' b'become' b'illegal' b',' b'which' b'<unk>' b'a' b'large'
    b'brain' b'.' b'The' b'call' b'is' b'kept' b'from' b'1902' b'thought' b':' b'"' b'But' b'there' b'has' b'moved' b'back' b'an' b'book' b'"' b','
    b'particularly' b'allowing' b'it' b'.' b'Development' b'and' b'prevent' b'their' b'use' b'of' b'spots' b'warning' b',' b'especially' b'as' b'they' b'have' b'properly' b'performed' b','
    b'they' b'should' b'not' b'have' b'to' b'contain' b'poses' b'of' b'their' b'older' b'axles' b'.' b'The' b'caves' b'for' b'the' b'breeding' b'groups' b',' b'Ceres'
    b',' b'Hugh' b'littered' b'and' b'fine' b'astronomical' b'Abd' b'sociologists' b'on' b'other' b'other' b'nesting' b'markets' b',' b'first' b'likewise' b'.' b'Reports' b'are' b'generally'
    b'associated' b'or' b'being' b'right' b'that' b'their' b'young' b'<unk>' b',' b'inhibitors' b'valid' b'as' b'synonymous' b'(' b'<unk>' b')' b',' b'long' b'Sb3' b'earthly'
    b'body' b',' b'grey' b'reddish' b',' b'<unk>' b'(' b'<unk>' b',' b'Witherspoon' b')' b',' b'<unk>' b',' b'butter' b',' b'Montreux' b',' b'sporting' b','
    b'fade' b',' b'<unk>' b',' b'thin' b',' b'and' b'even' b'exists' b'working' b'out' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Development' b'=' b'=' b'<eos>'
    b'<eos>' b'Today' b',' b'<unk>' b'Inocybe' b'leukemia' b',' b'was' b'chosen' b'in' b'school' b',' b'often' b'by' b'one' b'skinned' b'BC' b'/' b'302' b'nests'
    b'compared' b'to' b'Irish' b'GPUs' b',' b'which' b'travel' b'to' b'rocky' b'properties' b'oak' b'in' b'1075' b'.' b'In' b'<unk>' b',' b'the' b'Daily' b"'"
    b'Mycena' b':' b'It' b'is' b'too' b'distinct' b'from' b'watching' b'Hatcher' b'crosses' b'by' b'Senator' b'Makovicky' b'dinosaurs' b',' b'which' b'has' b'a' b'cover' b'role'
    b'of' b'Antigua' b'.' b'The' b'scales' b'may' b'be' b'entirely' b'worried' b'on' b'or' b'develop' b'a' b'larger' b'range' b'for' b'\xe2\x80\x98' b'<unk>' b'.' b'These'
    b'species' b'appear' b'on' b'their' b'own' b'territory' b',' b'refusing' b'to' b'begin' b'up' b'them' b'to' b'be' b'important' b',' b'nor' b'thus' b'Terrorism' b'it'
    b',' b'averaging' b'information' b'as' b'as' b'they' b'columns' b'are' b',' b'even' b'for' b'example' b'to' b'be' b'probably' b'industrial' b'when' b'they' b'was' b'to'
    b'be' b'individually' b'deep' b'.' b'According' b'to' b'<unk>' b'made' b'a' b'bowls' b'on' b'creating' b'3' b'@,@' b'500' b'residents' b'hopeful' b'three' b'explanations' b','
    b'with' b'18' b'studies' b',' b'eye' b'dots' b',' b'especially' b'the' b'1' b'.' b'According' b'to' b'Peter' b'<unk>' b',' b'they' b'will' b'possess' b'fortification'
    b'over' b'about' b'4' b'%' b'of' b'these' b'decades' b',' b'and' b'protection' b'that' b'played' b'depending' b'so' b'.' b'South' b'America' b',' b'however' b','
    b'have' b'six' b'nuclei' b'recognized' b'to' b'five' b'causes' b'.' b'He' b'prefers' b'with' b'an' b'distribution' b'survive' b',' b'scoring' b'to' b'40' b'in' b'('
    b'5' b'@.@' b'8' b'years' b')' b',' b'with' b'1' b'@.@' b'9' b'rebounds' b'while' b'nearly' b'25' b'gods' b'from' b'Gaelic' b'starlings' b'before' b'may'
    b'be' b'lbw' b'after' b'means' b',' b'as' b'further' b'reduced' b'were' b'surprised' b'.' b'It' b'were' b'collected' b'as' b'inferred' b'by' b'angle' b',' b'a'
    b'parody' b'or' b'one' b'by' b'two' b'riders' b'.' b'It' b'may' b'be' b'distinguished' b'by' b'these' b'periods' b'by' b'consumption' b',' b'kakapo' b',' b'varying'
    b'expecting' b',' b'<unk>' b'of' b'nesting' b',' b'which' b'they' b'do' b'Simmons' b'.' b'Condoms' b'are' b'attacking' b'to' b'forming' b'eye' b'food' b',' b'when'
    b'it' b'matures' b'difficult' b'back' b'to' b'a' b'chronicled' b'eye' b'.' b'<unk>' b'unharmed' b'preceded' b'by' b'regions' b',' b'the' b'changes' b'from' b'a' b'multiplicity'
    b'of' b'layer' b',' b'use' b'Norwegian' b'jurors' b',' b'Brown' b',' b'have' b'common' b'nuclei' b'.' b'Daniil' b'transcription' b':' b'Herodianus' b'<unk>' b'<unk>' b'<unk>'
    b'called' b'it' b'a' b'My' b'honeyeater' b'"' b'has' b'<unk>' b'courtship' b'interest' b',' b'and' b'even' b'Walter' b'All\xc4\x81h' b'appears' b'into' b'this' b'dress' b'to'
    b'should' b'die' b'out' b'how' b'they' b'"' b'were' b'continuously' b'able' b'to' b'destroy' b'camping' b'.' b'<unk>' b'<unk>' b',' b'memorandum' b',' b'and' b'<unk>'
    b'were' b'also' b'<unk>' b'due' b'to' b'large' b'speeds' b'of' b'an' b'common' b'complaint' b'.' b'It' b'is' b'known' b'that' b'populations' b'defines' b'affecting' b'age'
    b'losses' b'<unk>' b'.' b'In' b'2007' b',' b'however' b',' b'areas' b'were' b'one' b'of' b'the' b'average' b'species' b'of' b'human' b'crossroads' b'.' b'Their'
    b'beak' b'brought' b'remains' b'at' b'a' b'jurisdiction' b'of' b'Amanda' b'in' b'exclude' b'373' b'roosts' b'.' b'The' b'season' b'itself' b'serves' b'as' b'a' b'natural'
    b'buff' b'from' b'the' b'orbit' b'of' b'food' b'province' b'of' b'a' b'remnant' b'affinity' b';' b'capable' b'of' b'formation' b'strategy' b'steadily' b',' b'hundreds' b'of'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 186.3
    loss: 5.168
    elapsed time (seconds): 98.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  51.874 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
