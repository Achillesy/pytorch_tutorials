.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'the' b'scoreless' b'power' b'to' b'sing' b'.' b'The' b'two' b'stories' b'of' b'common' b'operas' b'will' b'be' b'introduced' b'by' b'oral' b'fat' b',' b'such'
    b'to' b'water' b',' b'and' b'building' b'<unk>' b'.' b'As' b'a' b'combination' b',' b'Danny' b"'s" b'victory' b'would' b'be' b'another' b'first' b'success' b','
    b'four' b'or' b'four' b'years' b'would' b'be' b'considered' b'<unk>' b'.' b'It' b'is' b'mostly' b'a' b'purplish' b'monthly' b'of' b'action' b'that' b'is' b'estimated'
    b'after' b'lime' b'.' b'The' b'heaviest' b'village' b'of' b'this' b'year' b'includes' b'his' b'stark' b'tone' b'is' b'traveling' b'and' b'still' b'terminates' b'its' b'supernatural'
    b'atmosphere' b'.' b'This' b'paintings' b'held' b'overseas' b'during' b'the' b'spring' b'of' b'12' b'.' b'According' b'to' b'it' b'and' b'kilograms' b',' b'and' b'<unk>'
    b',' b'in' b'autumn' b'.' b'(' b'Singers' b')' b'marries' b'a' b'shaped' b'base' b'towards' b'the' b'facades' b'when' b'it' b'is' b'usually' b'similar' b'.'
    b'He' b'is' b'confined' b'to' b'France' b'I' b'freed' b'such' b'as' b'Ecclestone' b',' b'which' b'come' b'up' b'the' b'expand' b'hand' b'.' b'The' b'rib'
    b'is' b'now' b'happy' b'as' b'of' b'driving' b'depressions' b'.' b'In' b'the' b'first' b'night' b',' b'bullet' b'hemmemas' b'may' b'retreat' b'across' b'young' b'regions'
    b',' b'who' b'logs' b'to' b'concentrate' b'up' b'some' b'short' b'@-@' b'level' b'species' b'such' b'as' b'Dad' b'or' b'outside' b'or' b'childhood' b'testing' b'.'
    b'In' b'the' b'amino' b'<unk>' b',' b'it' b'will' b'be' b'working' b'to' b'speak' b'a' b'start' b'for' b'them' b'.' b'Around' b'one' b',' b'the'
    b'smallest' b'starling' b'and' b'her' b'Lithuanians' b'have' b'no' b'kingship' b'winners' b'in' b'that' b'time' b'theatrically' b'.' b'This' b'chapel' b'is' b'Article' b'recited' b'and'
    b'they' b'rarely' b'believe' b'infiltrated' b'the' b'path' b'of' b'each' b'device' b'.' b'It' b'makes' b'them' b'that' b'with' b'this' b'naked' b'call' b'without' b'there'
    b'.' b'is' b'an' b'evidence' b'that' b'there' b'isn' b"'t" b'be' b'known' b'to' b'choose' b'catch' b'<unk>' b'.' b'However' b',' b'he' b'also' b'believes'
    b'tactics' b'of' b'genuine' b'blade' b',' b'when' b'there' b'forms' b'as' b'fatal' b'it' b'talking' b'every' b'planet' b'or' b'stop' b'its' b'upper' b'body' b','
    b'and' b'has' b'their' b'body' b'.' b'"' b'<eos>' b'Chopra' b'have' b'never' b'chance' b'and' b'a' b'evil' b'complex' b',' b'because' b'the' b'Kishon' b'appears'
    b'south' b'who' b'appears' b'to' b'compete' b',' b'one' b'of' b'all' b'aspects' b'@-@' b'fare' b'.' b'A' b'small' b'<unk>' b'is' b'whereas' b'chastity' b'and'
    b'early' b'.' b'As' b'it' b'is' b'tame' b'that' b'scent' b'affects' b'some' b'similar' b'ones' b',' b'seasonal' b'flocks' b'has' b'increased' b'or' b'fast' b'or'
    b'larger' b',' b'going' b'at' b'each' b'to' b'find' b'when' b'they' b'are' b'left' b'.' b'Nataraja' b'can' b'merit' b',' b'on' b'19' b'July' b'1909'
    b'.' b'<eos>' b'In' b'opening' b'attempts' b',' b'food' b',' b'however' b',' b'are' b'credited' b'to' b'plumage' b',' b'looting' b',' b'entertainment' b'.' b')'
    b'are' b'display' b'that' b'an' b'path' b'may' b'be' b'equipped' b'from' b'to' b'do' b'as' b'scientific' b',' b'though' b'this' b'source' b'may' b'be' b'broken'
    b'.' b'<unk>' b'brownish' b'shape' b'nervous' b'at' b'the' b'court' b'with' b'times' b'is' b'close' b'to' b'<unk>' b'and' b'eighteen' b'other' b'distinct' b'molecules' b','
    b'who' b'may' b'be' b'a' b'cause' b'that' b'is' b'long' b'.' b'Because' b'there' b'is' b'also' b'no' b'"' b'significant' b'natural' b'feeding' b'that' b'Ceres'
    b'or' b'wild' b'plants' b',' b'N.' b'<unk>' b'quality' b'was' b'known' b'by' b'explanation' b'of' b'more' b'text' b'.' b'"' b'<eos>' b'Many' b'more' b'kakapo'
    b'letting' b'relationships' b'toward' b'all' b'boiler' b'events' b'to' b'be' b'occurred' b'by' b'birds' b'of' b'predators' b'In' b'their' b'training' b'to' b'dangers' b'appointment' b','
    b'and' b'combination' b'is' b'usually' b'only' b'deep' b',' b'if' b'it' b'will' b'have' b'been' b'called' b'mouths' b'by' b'transcription' b'.' b'<unk>' b'produces' b'that'
    b'a' b'very' b'parallel' b'nest' b'stone' b'arrangement' b'are' b'about' b'87' b'@.@' b'5' b'@.@' b'75' b'years' b',' b'including' b'juveniles' b'and' b'energetic' b'million'
    b',' b'be' b'six' b'times' b',' b'metabolism' b'a' b'interested' b'appearance' b',' b'that' b'are' b'usually' b'superior' b'by' b'fused' b',' b'which' b'in' b'locations'
    b',' b'they' b'are' b'narrow' b'.' b'If' b'the' b'<unk>' b'fuse' b'such' b'4' b'translation' b',' b'only' b'Dubliners' b',' b'however' b',' b'the' b'Gofraid'
    b'less' b'fully' b'read' b'.' b'The' b'bird' b'fewer' b'walled' b'males' b'aware' b'of' b'over' b'1' b'@.@' b'79' b'in' b'(' b'16' b'@.@' b'8'
    b'million' b')' b',' b'which' b'then' b'they' b'depict' b'the' b'knowledge' b'of' b'its' b'female' b'.' b'When' b'when' b'is' b'more' b'amenable' b',' b'these'
    b'female' b'groups' b'can' b'be' b'crushed' b',' b'with' b'doors' b'and' b'the' b'removal' b',' b'with' b'some' b'broods' b',' b'unsuccessful' b'or' b'threads' b'of'
    b'any' b'over' b'12' b':' b'45' b'or' b'three' b'floor' b'.' b'In' b'which' b',' b'the' b'gills' b'are' b'educated' b'on' b'15' b'carries' b','
    b'they' b'do' b'them' b'Campus' b'of' b'feathers' b'up' b'their' b'variety' b'to' b'AD' b'is' b'.' b'It' b'also' b'aluminum' b'its' b'fertilizers' b'separated' b'.'
    b'To' b'be' b'easier' b'to' b'speak' b'about' b'their' b'male' b',' b'they' b'may' b'introduce' b'home' b'trees' b',' b'<unk>' b'copious' b'other' b'trees' b'('
    b'This' b'ancestor' b'and' b'the' b'RNA' b'veil' b')' b',' b'and' b'may' b'feed' b'at' b'various' b'supernatural' b'eggs' b'between' b'any' b'periods' b'.' b'By'
    b'the' b'other' b'climate' b',' b'the' b'birds' b'Zweig' b'upgrade' b'lower' b'Boot' b'in' b'other' b'tubular' b'parts' b'.' b'By' b'forests' b',' b'there' b'are'
    b'two' b'points' b'on' b'ribosomes' b',' b'<unk>' b',' b'zombies' b',' b'even' b'a' b'prognostic' b'predator' b'.' b'readership' b'were' b'spreading' b'on' b'time' b'enzyme'
    b'cutscenes' b',' b'which' b'Ceres' b'has' b'no' b'brief' b'wavelength' b'properties' b'with' b'sea' b'engineer' b'more' b'than' b'by' b'even' b',' b'depending' b'on' b'invisible'
    b',' b'with' b'other' b'of' b'the' b'marital' b'results' b'a' b'second' b'lower' b'eye' b'well' b'that' b'are' b'necessary' b'like' b'he' b'are' b'challenged' b'of'
    b'Precipitation' b'.' b'Each' b'cation' b'are' b'classified' b'as' b'the' b'<unk>' b'comparable' b'of' b'King' b'Sheikh' b'galericulata' b',' b'which' b'she' b'produced' b'will' b'forgive'
    b'them' b'in' b'contact' b'by' b'muscular' b'minor' b'hours' b'.' b'<eos>' b'In' b'the' b'oldest' b'decade' b'in' b'the' b'former' b'structure' b',' b'bird' b'occurs'
    b'with' b'smaller' b'trees' b'and' b'include' b'ribosomal' b'predators' b',' b'of' b'edges' b'and' b'colleagues' b'.' b'They' b'find' b'domains' b'and' b'avoid' b'Umfolozi' b'<unk>'
    b',' b'and' b'others' b'occurs' b'is' b'completely' b'more' b'of' b'Wales' b'.' b'There' b'are' b'rarely' b'widespread' b'species' b'of' b'150' b'birds' b',' b'when'
    b'certain' b'amounts' b'do' b'almost' b'circular' b'<unk>' b'.' b'In' b'the' b'next' b'morning' b',' b'common' b'prey' b'may' b'be' b'good' b'if' b'their' b'beak'
    b'will' b'creates' b'balls' b'one' b'of' b'the' b'six' b'to' b'four' b'@.@' b'2' b'million' b'avian' b'demons' b',' b'it' b'exoplanets' b'in' b'open' b'<unk>'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Bird' b'sexpunctatus' b',' b'below' b'13' b'hours' b',' b'may' b'be' b'stars'
    b'to' b'move' b'to' b'the' b'asteroid' b'system' b',' b'which' b'takes' b'her' b'litter' b'species' b'whose' b'activity' b'is' b'uttered' b'.' b'In' b'returning' b','
    b'these' b'birds' b'associated' b'and' b'omitted' b'Jermaine' b'viewpoints' b'in' b'response' b'to' b'the' b'potential' b'force' b'of' b'seeds' b'.' b'There' b'have' b'effective' b'Mobile'
    b'rain' b'from' b'males' b',' b'<unk>' b',' b'sac' b',' b'deserved' b',' b'\xce\xb1' b',' b'face' b',' b'Tripoli' b',' b'<unk>' b',' b'mandible' b','
    b'<unk>' b',' b'<unk>' b',' b'and' b'eucalypts' b'.' b'When' b'they' b'have' b'passed' b'their' b'pocket' b',' b'this' b'suggestion' b',' b'have' b'varying' b'small'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 202.5
    loss: 5.168
    elapsed time (seconds): 105.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  15.490 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
