.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'A' b'successful' b'Bulim' b'holding' b'prevalent' b'police' b'direction' b'and' b'Rees' b'on' b'the' b'mushroom' b'shifts' b'into' b'Ceres' b',' b'a' b'very'
    b'rich' b'leading' b'player' b'from' b'the' b'Iron' b'Republic' b'.' b'Since' b'its' b'name' b',' b'on' b'odds' b'before' b'Seventeen' b'models' b'believe' b'that' b'vertical'
    b'seas' b'in' b'American' b'frightening' b'different' b'or' b'scientific' b'sites' b'lived' b';' b'"' b'when' b'Casimir' b'Mara' b'misery' b'means' b'nothing' b'the' b'true' b'long'
    b'(' b'like' b'convict' b'up' b'his' b'Mennonites' b')' b'Under' b'"' b'.' b'He' b'breaks' b'for' b'a' b'39' b'mm' b'series' b'intelligence' b',' b'which'
    b'has' b'been' b'moved' b'to' b'Stratton' b'.' b'Together' b',' b'as' b'am' b'of' b'original' b',' b'Ireland' b'stated' b'it' b'should' b'be' b'a' b'<unk>'
    b'upon' b'16' b'shapes' b'that' b'come' b'writing' b'than' b'up' b'ship' b'where' b'they' b'are' b'killed' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Etymology' b'='
    b'=' b'<eos>' b'<eos>' b'Odaenathus' b'called' b'to' b'contract' b'including' b'impressed' b'.' b'The' b'campaign' b'will' b'be' b'avoided' b'at' b'aesthetic' b'teams' b'so' b'which'
    b'<unk>' b'Hilo' b'during' b'a' b'live' b'election' b'.' b'One' b'of' b'individuals' b'describes' b'the' b'bony' b'@-@' b'burgesses' b'another' b'<unk>' b'or' b'<unk>' b'Malcolm'
    b'<unk>' b',' b'Jordan' b'used' b'1' b'in' b'advertisements' b',' b'and' b'was' b'published' b'in' b'August' b'1' b',' b'2006' b'.' b'It' b'moved' b'on'
    b'to' b'pay' b'the' b'nation' b'and' b'use' b'his' b'return' b'in' b'the' b'four' b'islands' b'Glastonbury' b'in' b'the' b'UK' b',' b'and' b'a' b'successful'
    b'school' b'of' b'viewpoints' b'on' b'March' b'13' b',' b'Cambridge' b',' b'a' b'mayor' b'at' b'Q' b'University' b',' b'the' b'character' b'played' b'defeated' b'the'
    b'Douglas' b"'s" b'Quonset' b'subtype' b'.' b'<eos>' b'O' b"'Malley" b"'s" b'curriculum' b'of' b'the' b'world' b'of' b'Venus' b'combined' b'inviting' b'original' b'knowledge' b','
    b'to' b'have' b'periodically' b'received' b'treatment' b'of' b'date' b'celebrated' b'sharp' b'alteration' b'or' b'to' b'these' b'or' b'collapse' b',' b'because' b'they' b'were' b'about'
    b'the' b'digital' b'sense' b'of' b'a' b'planet' b'.' b'resurrect' b'when' b'the' b'Looking' b'version' b'looked' b'in' b'rental' b',' b'Ceres' b'staged' b'Types' b'as'
    b'@-@' b'manoeuvres' b'on' b'the' b'Fox' b'District' b'News' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Habitat' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'organized' b'as'
    b'a' b'full' b'Ceres' b'to' b'save' b'Kedok' b'Macrianus' b'to' b'have' b'dedicated' b'about' b'England' b'.' b'However' b',' b'future' b'Fowler' b'formed' b'play' b'to'
    b'DuMont' b',' b'where' b'his' b'specific' b'100' b'%' b'of' b'Ceres' b'was' b'<unk>' b'.' b'<eos>' b'Australia' b'has' b'comprise' b'three' b'aspects' b'of' b'faced'
    b'hockey' b'songs' b',' b'including' b'his' b'beloved' b'general' b'reproductions' b',' b'is' b'a' b'general' b'odd' b',' b'Garry' b'symbol' b',' b'held' b'a' b'observations'
    b'crew' b'forage' b'toward' b'relativity' b'.' b'Ceres' b'signed' b'Yankovic' b'at' b'Crystal' b'Lake' b"'s" b'opinion' b'in' b'the' b'Party' b'on' b'October' b'16' b','
    b'2010' b'.' b'Although' b'as' b'the' b'series' b'had' b'sold' b'from' b'a' b'novel' b'coach' b'regency' b'on' b'August' b'16' b',' b'2003' b',' b'Mosley'
    b'agreed' b'to' b'gather' b'the' b'game' b',' b'as' b'an' b'result' b'also' b'sent' b'the' b'<unk>' b'position' b'trained' b'clockwork' b'and' b'demise' b',' b'became'
    b'generally' b'successful' b'.' b'Somerset' b'claimed' b'the' b'game' b'could' b'be' b'effective' b'and' b'moved' b'to' b'Blackburn' b',' b'but' b'going' b'to' b'play' b'to'
    b'difficult' b'time' b'to' b'within' b'.' b'O' b"'Malley" b'freezing' b'to' b'begin' b'to' b'be' b'used' b'to' b'write' b'Keyes' b'.' b'The' b'1980' b'election'
    b'was' b'introduced' b'to' b'rhythm' b',' b'authority' b',' b'was' b'confined' b'to' b'him' b'to' b'launch' b'further' b'African' b'teams' b'.' b'Instrumentation' b'focused' b'on'
    b'October' b'21' b',' b'1895' b',' b'where' b'the' b'team' b'opened' b'a' b'invitation' b'in' b'Swaziland' b'due' b'to' b'the' b'studio' b'of' b'Hole' b'Days'
    b'and' b'Gus' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Health' b'-' b'O' b'Gives' b'Bang' b'Wives' b':' b'1900' b"'" b'(' b'1960'
    b')' b'=' b'=' b'=' b'<eos>' b'<eos>' b'On' b'June' b'26' b'to' b'September' b'4' b',' b'2004' b',' b'Mosley' b'made' b'interest' b'with' b'Howard'
    b'Baibars' b'(' b'overlapping' b'Ya' b'Kinney' b'O.' b'Conway' b'and' b'use' b'pushed' b'to' b'become' b'kilograms' b')' b'from' b'high' b'as' b'him' b'never' b'<unk>'
    b',' b'making' b'that' b'they' b'could' b'assume' b'its' b'entire' b'result' b'to' b'win' b'sailors' b'.' b'With' b'this' b'rematch' b'Details' b'both' b'changes' b'and'
    b'sweep' b'erased' b'such' b'games' b'.' b'Reviewer' b'Lynch' b'roadside' b'<unk>' b',' b'Union' b'subgenre' b',' b'and' b'an' b'soft' b'center' b'reaction' b'for' b'air'
    b',' b'and' b'reported' b'that' b'would' b'be' b'due' b'to' b'real' b'animals' b'to' b'conduct' b'@-@' b'2D' b'.' b'O' b"'Malley" b'died' b'in' b'Armagh'
    b'.' b'The' b'head' b',' b'Maeda' b"'s" b'rated' b'new' b'definition' b'were' b'extracted' b'to' b'drive' b'northeastward' b'however' b'for' b'Stokes' b'.' b'<eos>' b'FOCA'
    b'continued' b'to' b'have' b'long' b'funds' b'a' b'day' b'on' b'October' b'1' b',' b'1914' b'.' b'<unk>' b'other' b'homes' b'were' b'estimated' b'cuisine' b'and'
    b'the' b'contestants' b'began' b'to' b'Kingdom' b'Texas' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Meteorological' b'statistics' b'=' b'=' b'<eos>' b'<eos>' b'Following' b'games' b'to'
    b'show' b'their' b'apparent' b'state' b',' b'Mosley' b'introduced' b'to' b'<unk>' b'<unk>' b',' b'Washington' b',' b'despite' b'many' b'funding' b'to' b'verify' b'.' b'<eos>'
    b'As' b'a' b'planet' b'<unk>' b'to' b'focus' b'on' b'its' b'third' b'decades' b'Ecclestone' b"'s" b'main' b'interests' b'were' b'announced' b',' b'St.' b'Young' b'Arts'
    b'reported' b'the' b'force' b'of' b'becoming' b'specially' b"'s" b'primary' b'system' b'.' b'Because' b'of' b'a' b'major' b'download' b'<unk>' b'would' b'be' b'confused' b'about'
    b'heavily' b'approved' b'tactics' b'after' b'Valkyria' b'Rico' b'.' b'Mosley' b'finished' b'a' b'air' b'front' b'of' b'#' b'4' b'hurricane' b'for' b'his' b'character' b'play'
    b',' b'while' b'Cambridge' b'ended' b'crossroads' b',' b'topic' b'gets' b'clause' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'A' b'portal' b'@-@' b'setting' b'history' b'='
    b'<eos>' b'<eos>' b'Odaenathus' b'season' b'(' b'"' b'New' b'Year' b'"' b'is' b'a' b'Mill' b'planet' b"'" b'series' b'at' b'exit' b'Square' b',' b'1998'
    b',' b'starring' b'Now' b',' b'on' b'November' b'2' b',' b'1919' b'.' b'It' b'was' b'folded' b'from' b'cars' b'to' b'stop' b'a' b'notable' b'villain'
    b'to' b'keep' b'it' b'holding' b',' b'to' b'You' b'in' b'1962' b'.' b'The' b'final' b'mention' b'begins' b'by' b'<unk>' b'Massey' b'made' b'like' b'and'
    b'the' b'announcement' b'I' b'feel' b'on' b'.' b'Due' b'to' b'Banksia' b'David' b'<unk>' b',' b'South' b'poet' b'moor' b'morel' b'Mykelti' b'and' b'jewelry' b','
    b'in' b'2007' b',' b'were' b'played' b'in' b'2004' b'in' b'<unk>' b'as' b'the' b'International' b'Defensive' b'Film' b'(' b'courtesy' b'of' b'Moritzian' b'relations' b')'
    b'.' b'<eos>' b'The' b'first' b'heard' b'feminist' b'place' b'private' b'samples' b'of' b'the' b'game' b'in' b'grinder' b'single' b',' b'hybrid' b'FM' b'.' b'The'
    b'race' b'was' b'punt' b'for' b'innovations' b',' b'Miley' b'consent' b',' b'and' b'Manaus' b',' b'but' b'some' b'birds' b'with' b'directors' b'or' b'artists' b'as'
    b'one' b'of' b'the' b'most' b'famous' b'\xe2\x80\x94' b'puddings' b'.' b'The' b'1980s' b'who' b'opposed' b'up' b'the' b'power' b'wing' b'will' b'be' b'put' b'to'
    b'hide' b'out' b'of' b'its' b'performances' b',' b'as' b'an' b'classic' b',' b'even' b'successfully' b'locally' b'@-@' b'grey' b'or' b'liked' b'.' b'The' b'role'
    b'of' b'Popular' b'cannot' b'be' b'known' b'to' b'find' b'a' b'mild' b'indigenous' b'@-@' b'<unk>' b'consume' b'cooking' b',' b'with' b'<unk>' b'on' b'a' b'angle'
    b'that' b'<unk>' b'overcrowding' b'has' b'two' b'real' b'effects' b'.' b'<eos>' b'In' b'<unk>' b',' b'South' b'Carolina' b'announced' b'All' b'to' b'four' b'million' b'costumes'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 179.2
    loss: 5.168
    elapsed time (seconds): 98.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  44.597 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
