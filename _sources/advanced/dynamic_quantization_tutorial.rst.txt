.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'pay' b'titled' b'Bell' b'@-@' b'bearing' b',' b'<unk>' b'and' b'<unk>' b'.' b'Based' b'as' b'part' b'of' b'a' b'group' b'of' b'globular' b'society'
    b',' b'West' b',' b'eucalypts' b',' b'Kazimierz' b'Worldwide' b'identity' b',' b'backing' b'hetman' b'eggs' b',' b'<unk>' b',' b'Florida' b',' b'<unk>' b',' b'<unk>'
    b',' b'Stefan' b',' b'comfort' b',' b'curator' b',' b'Engineering' b',' b'colourful' b'B.' b'pursuant' b'and' b'other' b'Bogot\xc3\xa1' b'by' b'oneself' b'insert' b'between' b'L'
    b'Curtis' b',' b'and' b'Herd' b'shrubby' b'maintenance' b'680' b'.' b'Both' b'Socialist' b',' b'emitted' b',' b'Dalmatia' b',' b'<unk>' b'three' b'games' b'Tripoli' b','
    b'<unk>' b'and' b'Dollodon' b':' b'<unk>' b'work' b'during' b'the' b'argument' b'of' b'vitro' b')' b',' b'flying' b'defeat' b'Opening' b'Creek' b',' b'Songwriters' b'('
    b'testing' b')' b'.' b'From' b'a' b'<unk>' b'<unk>' b'<unk>' b'and' b'mule' b'East' b'rows' b',' b'this' b'election' b'seems' b'to' b'be' b',' b'so'
    b'most' b'more' b'games' b'are' b'thought' b'to' b'be' b'(' b'<unk>' b')' b'.' b'<eos>' b'alphabet' b'Brutus' b',' b'which' b'is' b'<unk>' b',' b'Palestinian'
    b',' b'and' b'suppression' b'have' b'been' b'administered' b'by' b'<unk>' b',' b'which' b'has' b'breaking' b'a' b'mayor' b'that' b'children' b'filled' b'.' b'"' b'As'
    b'remarkably' b'"' b',' b'he' b'takes' b'the' b'kakapo' b'for' b'The' b'pounds' b',' b'the' b'currently' b'nickname' b'of' b'119' b'years' b'ago' b',' b'says'
    b',' b'"' b'A' b'stroke' b'is' b'genre' b',' b'and' b'that' b'venerable' b'or' b'<unk>' b'that' b'would' b'be' b'Area' b'.' b'"' b'Hornung' b'later'
    b'said' b'it' b'won' b'praise' b'singing' b'divorce' b'to' b'teach' b'literature' b'.' b'In' b'addition' b',' b'Dheera' b'NX' b'Sauber' b'hosted' b'the' b'characteristics' b'of'
    b'funds' b'and' b'wrote' b'a' b'specific' b'Marlow' b'force' b',' b'and' b'in' b'contrast' b'to' b'the' b'beautiful' b'old' b'rock' b'game' b',' b'"' b'Wind'
    b'gaming' b'"' b'is' b'printed' b'and' b'<unk>' b'industries' b'.' b'In' b'his' b'accounts' b'of' b'Alkan' b"'s" b'southern' b'style' b',' b'"' b'I' b'please'
    b'on' b'hard' b'vocal' b'from' b'a' b'<unk>' b'pre' b'@-@' b'innovative' b'inner' b'village' b'"' b'of' b'"' b'...' b'Business' b'Story' b'in' b'Tower' b'End'
    b'Blue' b'"' b'(' b'M.' b'Brighton' b')' b',' b'which' b'is' b'turned' b'into' b'Tigernach' b'salmon' b',' b'"' b'Me' b'(' b'cello' b')' b'"'
    b',' b'primarily' b'in' b'the' b'history' b'of' b'1840' b'<unk>' b'Lord' b'<unk>' b'.' b'Peulan' b'speculates' b'that' b'sales' b'of' b'his' b'existence' b'have' b'lowered'
    b'deal' b'June' b'43' b'or' b'38' b'on' b'Saturday' b'penultimate' b'in' b'total' b'of' b'Japan' b'to' b'music' b'@-@' b'scale' b'love' b'.' b'It' b'handled'
    b'another' b'point' b'approximately' b'except' b'at' b'unrealistic' b'times' b'behind' b'the' b'periodical' b"'" b'Graphic' b'Association' b'Federal' b'Film' b'Awards' b'.' b'It' b'also' b'has'
    b'four' b'walks' b'came' b',' b'and' b'in' b'her' b'1993' b'notes' b',' b'Raffles' b'was' b'infatuated' b'for' b'at' b'Personal' b'autumn' b'campaign' b'.' b'The'
    b'play' b'was' b'recorded' b'once' b'on' b'the' b'gross' b'dictator' b'.' b'<eos>' b'In' b'2003' b'her' b'Television' b'Boom' b'Bang' b'!' b'a' b'demonstration' b'in'
    b'his' b'1897' b'book' b'shirt' b'came' b'into' b'the' b'first' b'game' b'of' b'the' b'Spanish' b'Agreement' b'(' b'Mark' b'Huey' b')' b'.' b'<eos>' b'Magnetic'
    b',' b'Canada' b',' b'1890s' b'success' b',' b'and' b'his' b'personal' b'nationalists' b',' b'are' b'that' b'one' b'of' b'the' b'remaining' b'shafts' b'cost' b'significantly'
    b'and' b'pairs' b'of' b'their' b'sister' b'and' b'lack' b'of' b'Little' b'Places' b':' b'24' b'@.@' b'5' b'%' b'appeared' b'on' b'a' b'inscription' b'composer'
    b',' b'which' b'interprets' b'a' b'average' b'star' b',' b'as' b'seen' b'on' b'back' b'it' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'='
    b'<eos>' b'<eos>' b'The' b'additional' b'hypothesis' b'are' b'adequate' b'for' b'few' b'decades' b'claimed' b'by' b'multiple' b'types' b'of' b'anglers' b',' b'with' b'expecting' b'one'
    b'million' b'usually' b'in' b'two' b'groups' b'and' b'a' b'race' b'.' b'As' b'of' b'October' b'17' b',' b'2007' b',' b'Alabama' b'introduced' b'severe' b'funding'
    b';' b'having' b'sold' b'as' b'booby' b'Snow' b',' b'Cheese' b'S' b',' b'and' b'<unk>' b'.' b'Layne' b'Joseph' b'Patrick' b'criticized' b'his' b'large' b'review'
    b',' b'as' b'follows' b'against' b'Oso' b'Bang' b'Laboratory' b'in' b'1959' b'.' b'Her' b'voice' b'2002' b'discography' b'joined' b'Cantrell' b'in' b'260' b',' b'orbit'
    b'in' b'1999' b';' b'the' b'Beverly' b'Philosophy' b'basins' b'with' b'the' b'latter' b'@-@' b'generated' b'DVDs' b',' b'said' b'it' b'was' b'titled' b'"' b'short'
    b'God' b'I' b'look' b'after' b'<unk>' b'or' b'I' b'can' b'give' b'things' b'having' b'moved' b'to' b'that' b'aggressor' b',' b'and' b'used' b'premieres' b'by'
    b'something' b'time' b'...' b'wanting' b'to' b'begin' b'to' b'give' b'an' b'way' b'in' b'it' b'...' b'the' b'game' b'gives' b'all' b'I' b'can' b'to'
    b'much' b'their' b'nature' b'I' b'get' b'bank' b'out' b'.' b'"' b'Tessa' b'was' b'practiced' b'to' b'mention' b'1999' b'with' b'stories' b'from' b'the' b'Final'
    b'century' b',' b'such' b'as' b'strategist' b'Connery' b',' b'a' b'mission' b'them' b'since' b'those' b'head' b'design' b',' b'because' b'positioned' b'sixty' b'@-@' b'Christian'
    b'monthly' b'moves' b'.' b'The' b'stance' b'selling' b'rapper' b'a' b'limited' b'@-@' b'skin' b'planet' b'game' b'after' b'she' b'enjoyed' b'in' b'fiction' b'Genre' b'McGwire'
    b',' b'and' b'"' b'Although' b'their' b'man' b']' b'feels' b'It' b'sounds' b'to' b'me' b'of' b'.' b'"' b'Both' b'people' b'substituted' b'by' b'their'
    b'opponent' b'in' b'spinoff' b'Crash' b'O' b'\xe2\x80\x99' b'Kritschgau' b'Development' b'West' b',' b'the' b'Irish' b'effort' b',' b'and' b'crew' b'.' b'If' b'he' b'select'
    b'teaching' b'his' b'aim' b'on' b'the' b'instructional' b'of' b'mainstream' b'were' b'selected' b'because' b'Prime' b"'Malley" b'says' b'that' b'this' b'"' b'instructions' b'and' b'poets'
    b'of' b'CNN' b'have' b'to' b'record' b'known' b'a' b'few' b'pair' b',' b'it' b'would' b'be' b'with' b'a' b'military' b'feeling' b'party' b'"' b'.'
    b'In' b'1925' b',' b'a' b'widow' b'singer' b'<eos>' b'<eos>' b'<eos>' b'=' b'the' b'Emmy' b'Reservoir' b'Race' b'=' b'<eos>' b'<eos>' b'The' b'streets' b'into'
    b'Odaenathus' b'has' b'opened' b'the' b'Arabic' b'Republican' b'Dunnstown' b'Cup' b'primary' b'Romanian' b'Games' b'!' b'1922' b'Part' b'Performance' b',' b'the' b'United' b'States' b','
    b'broadcast' b'with' b'Activision' b',' b'and' b'the' b'PlayStation' b'Zealand' b'record' b'wide' b'Olympics' b'.' b'In' b'Britain' b'20' b'games' b',' b'the' b'change' b'consisted'
    b'of' b'above' b'\xc2\xa3' b'24' b'million' b'worldwide' b'killed' b'on' b'Canada' b',' b'starting' b'<unk>' b'with' b'1797' b'.' b'The' b'incidence' b'of' b'the' b'kakapo'
    b'and' b'a' b'female' b'in' b'the' b'Star' b'Republic' b'was' b'officially' b'found' b'.' b'<eos>' b'Critical' b'quarter' b'critics' b'previously' b'called' b'higher' b'members' b','
    b'Scotland' b'and' b'<unk>' b',' b'prompting' b'the' b'Common' b'astronomer' b'<unk>' b'Little' b'Bang' b'Hall' b'.' b'It' b'is' b'a' b'small' b'city' b',' b'although'
    b'the' b'foundation' b'River' b'letters' b'into' b'Bath' b'produces' b'their' b'share' b'to' b'the' b'European' b'Edwin' b'Plot' b'as' b'delivery' b'(' b'Philosophy' b')' b'in'
    b'the' b'world' b',' b'who' b'spent' b'a' b'suitable' b'discovery' b'of' b'rich' b'native' b'and' b'absorb' b'northbound' b'places' b'at' b'Gibson' b'.' b'In' b'the'
    b'1990s' b',' b'it' b'is' b'due' b'to' b'special' b'green' b',' b'slow' b',' b'food' b',' b'and' b'African' b'Colborne' b',' b'all' b'significant' b'members'
    b'of' b'its' b'length' b',' b'immediately' b'bubble' b'guidelines' b'as' b'<unk>' b',' b'<unk>' b',' b'Castle' b',' b'<unk>' b',' b'<unk>' b',' b'calls' b','
    b'<unk>' b',' b'Caldwell' b',' b'coin' b',' b'Iberia' b',' b'mountain' b'Level' b'and' b'grasses' b'.' b'<eos>' b'On' b'1937' b',' b'a' b'average' b'process'
    b'known' b'as' b'what' b'the' b'land' b'form' b'attained' b'up' b'across' b'Antiquaries' b',' b'It' b'is' b'shown' b'that' b'he' b'dealt' b'a' b'series' b'of'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 190.0
    loss: 5.168
    elapsed time (seconds): 100.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  57.893 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
