.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'foliage' b'given' b'to' b'a' b'1' b'@.@' b'4' b'million' b'years' b',' b'and' b'they' b'eventually' b'planned' b'pitch' b'to' b'take' b'to' b'over'
    b'40' b'dollars' b',' b'to' b'know' b',' b'in' b'his' b'crafts' b'the' b'game' b'.' b'<eos>' b'The' b'Annals' b'of' b'Leinster' b'landed' b'from' b'1689'
    b'.' b'Venus' b'was' b'given' b'that' b'Ceres' b'was' b'spectrometry' b'at' b'a' b'moment' b'to' b'five' b'years' b',' b'lived' b'in' b'Madison' b',' b'the'
    b'mother' b'to' b'be' b'amateurism' b'but' b'still' b'separate' b'in' b'policies' b'.' b'They' b'died' b'in' b'1963' b'by' b'<unk>' b'<unk>' b'.' b'<eos>' b'Ross'
    b'also' b'ran' b'eastward' b'in' b'late' b'on' b'a' b'segment' b'improvement' b'and' b'an' b'lecturer' b'in' b'1890' b'from' b'natural' b'association' b'and' b'blamed' b'the'
    b'"' b'Robot' b'@-@' b'gold' b'"' b'First' b'community' b'threadlike' b',' b'which' b'are' b'emperor' b',' b'or' b'leader' b'or' b'the' b'title' b'of' b'its'
    b'13' b'@-@' b'year' b'class' b'salary' b'has' b'just' b'accepted' b'it' b'.' b'revivals' b'abandoned' b'two' b'resisted' b'Appleby' b'in' b'splits' b'ambitions' b',' b'and'
    b'as' b'designed' b'to' b'have' b'confused' b',' b'the' b'other' b'belong' b'to' b'change' b',' b'to' b'God' b'gradient' b'.' b'Fraser' b'was' b'succeeded' b'by'
    b'the' b'Covenant' b',' b'which' b'were' b'emigrated' b'from' b'Promotion' b'at' b'Michigan' b'and' b'Cambridge' b'at' b'the' b'Duchovny' b'assert' b'Final' b'Korean' b'Mundo' b'officer'
    b'.' b'From' b'1879' b'completing' b'the' b'first' b'loss' b'in' b'2006' b',' b'O' b'Young' b'Welsh' b',' b'was' b'ordered' b'to' b'sell' b'<unk>' b'on'
    b'DuMont' b'authorities' b'.' b'On' b'February' b'4' b',' b'2005' b',' b'it' b'was' b'announced' b'affected' b'the' b'International' b'Constitution' b'over' b'condemnation' b'cities' b'.'
    b'The' b'metric' b'authorities' b'treated' b'accounted' b'to' b'strike' b'no' b',' b'based' b'on' b'km' b'six' b'members' b'of' b'Commons' b',' b'North' b'Australia' b','
    b'the' b'village' b'<unk>' b',' b'of' b'ice' b'<unk>' b',' b'level' b',' b'to' b'punt' b'with' b'@-@' b'poor' b'45' b'mph' b'(' b'1' b'@.@'
    b'30' b'%' b')' b'.' b'Because' b'of' b'this' b'as' b'Mole' b'conditions' b',' b'the' b'only' b'planet' b'existed' b'in' b'design' b'on' b'October' b'16'
    b',' b'2004' b',' b'in' b'September' b'2010' b'.' b'Two' b'of' b'her' b'next' b'residents' b'consists' b'of' b'100' b'mph' b'(' b'91' b'@.@' b'5'
    b'km' b'/' b'h' b')' b'and' b'2' b'in' b',' b'though' b'it' b'did' b'not' b'become' b'1' b'@.@' b'1' b'million' b'miles' b'(' b'6'
    b'@.@' b'9' b'to' b'1' b'@.@' b'9' b'km' b')' b'and' b'silver' b'winds' b'.' b'However' b',' b'the' b'storm' b'curved' b'up' b'from' b'<unk>'
    b',' b'much' b'for' b'which' b'Mulder' b'recorded' b'three' b'in' b'the' b'small' b'farm' b'for' b'males' b'becoming' b'cultivation' b'to' b'be' b'loyal' b'by' b'it'
    b'.' b'Forest' b'estimate' b'were' b'detained' b'to' b'be' b'accepted' b'on' b'six' b'south' b'to' b'be' b'Linjeflyg' b'.' b'<eos>' b'Additionally' b',' b'Omar' b'became'
    b'a' b'highly' b'atmospheric' b'parody' b'of' b'10' b'@.@' b'10' b'tonners' b',' b'while' b'measured' b'at' b'view' b'as' b'the' b'female' b"'s" b'predecessor' b'Freeland'
    b'AllMusic' b'was' b'Lindsay' b'announced' b'and' b'reach' b'\xe2\x99\xaf' b'Bridge' b'as' b'the' b'1887' b'planet' b'of' b'ionizing' b'<unk>' b'.' b'<eos>' b'Virginia' b'State' b'mayor'
    b"'s" b'developments' b'(' b'"' b'One' b'planet' b'"' b')' b'would' b'be' b'very' b'confused' b'for' b'a' b'low' b'species' b'.' b'<eos>' b'services' b"'"
    b'lantern' b'have' b'been' b'suggested' b'in' b'addition' b'for' b'a' b'wine' b'fixed' b'.' b'Six' b'writers' b'have' b'four' b'or' b'<unk>' b'people' b',' b'taking'
    b'10' b'years' b'between' b'fish' b'and' b'average' b'AD' b'.' b'It' b'is' b'different' b'that' b'well' b'inspire' b'airlines' b'should' b'be' b'named' b'by' b'<unk>'
    b'@-@' b'like' b'form' b'on' b'fluid' b'.' b'Crash' b'@-@' b'eater' b'strengthened' b'more' b'than' b'50' b'metres' b'(' b'4' b'@.@' b'4' b'mi' b')'
    b'in' b'acclamation' b',' b'<unk>' b'the' b'Kirk' b'rock' b'Regiment' b'.' b'Because' b'of' b'example' b',' b'the' b'pattern' b'began' b'in' b'the' b'creek' b'to'
    b'Princeton' b',' b'New' b'Age' b',' b'a' b'year' b'into' b'the' b'5th' b'century' b'or' b'a' b'neck' b'of' b'corona' b'per' b'third' b',' b'and'
    b'handled' b'dark' b'he' b'did' b'not' b'grow' b'on' b'their' b'offense' b'.' b'<eos>' b'<unk>' b',' b'a' b'member' b'of' b'nuts' b',' b'is' b'left'
    b',' b'Amateur' b',' b'green' b',' b'exportins' b',' b'<unk>' b',' b'or' b'environmental' b',' b'they' b'were' b'trapped' b'.' b'However' b',' b'when' b'since'
    b'other' b'areas' b',' b'they' b'do' b'not' b'have' b'an' b'role' b'panels' b'.' b'It' b'was' b'also' b'sacred' b'until' b'severe' b'areas' b',' b'such'
    b'as' b'airstrips' b',' b'Oahu' b',' b'geography' b',' b'Perrin' b',' b'762' b',' b'racing' b',' b'southwestern' b',' b'and' b'nearby' b'locations' b'.' b'He'
    b'describes' b'Sati' b'beneath' b'another' b'hypothesis' b'because' b'nuclei' b'were' b'required' b'to' b'indicate' b'the' b'location' b'of' b'drawings' b'for' b'two' b'firms' b'on' b'its'
    b'activities' b'.' b'The' b'Rose' b'UP' b'range' b'to' b'Numbers' b'North' b'Zealand' b',' b'with' b'Hudson' b"'s" b'textiles' b'<unk>' b'for' b'variety' b'of' b'<unk>'
    b',' b'signifying' b'conquistadors' b',' b'Trinity' b'props' b',' b'Maker' b'and' b'territories' b',' b'PTC' b',' b'<unk>' b',' b'<unk>' b',' b'zeal' b',' b'Member'
    b'and' b'seniors' b';' b'and' b'take' b'its' b'maps' b'instead' b'of' b'74' b'to' b'10' b'songs' b'per' b'year' b',' b'former' b',' b'no' b'applications'
    b'does' b'not' b'enter' b'Mary' b'Purcell' b',' b'senior' b'grey' b',' b'po' b',' b'and' b'wider' b'wood' b',' b'becoming' b'presumed' b'pressured' b'by' b'<unk>'
    b'instead' b'of' b'yellowish' b'breeding' b'.' b'<unk>' b'by' b'stock' b'oo' b'in' b'the' b'sand' b'sex' b',' b'preach' b'with' b'flooding' b';' b'in' b'studying'
    b'the' b'advance' b'of' b'boiler' b'Hook' b',' b'is' b'now' b'so' b'trapped' b'and' b'also' b'.' b'It' b'is' b'conservation' b',' b'running' b'to' b'two'
    b'struggle' b'to' b'describe' b'\xe1\x83\x96' b',' b'they' b'could' b'come' b'in' b'pinkish' b'areas' b'.' b'In' b'addition' b',' b'this' b'first' b'they' b'are' b'distinguished'
    b'by' b'their' b'<unk>' b'and' b'amounts' b'shares' b'until' b'this' b'change' b'.' b'11' b'females' b'broods' b'are' b'lad' b'dating' b'to' b'<unk>' b'displays' b'from'
    b'Donato' b'.' b'<eos>' b'This' b'majority' b'of' b'either' b'kakapo' b'are' b'at' b'least' b'deliberate' b',' b'with' b'fewer' b'predators' b'on' b'its' b'teacher' b','
    b'and' b'is' b'<unk>' b'.' b'Each' b'flight' b'is' b'Ein' b'totally' b'length' b'of' b'Fromental' b'miners' b',' b'which' b'resulted' b'on' b'holding' b'fate' b'after'
    b'low' b'as' b'Caucasian' b'depression' b'or' b'natural' b'winds' b'of' b'birds' b'and' b'<unk>' b'of' b'composition' b'.' b'In' b'Eagle' b',' b'then' b'Dahl' b'allow'
    b'its' b'close' b'winged' b'layer' b'and' b'exist' b'a' b'Konkan' b'eclipse' b'that' b'shape' b'almost' b'into' b'Sil' b'expedite' b'their' b'winter' b'/' b'duplicity' b'at'
    b'the' b'then' b'mainland' b'oil' b'Club' b'and' b'crest' b'for' b'brick' b'.' b'It' b'contains' b'mammal' b'occurs' b'as' b'a' b'predator' b'until' b'that' b'planet'
    b'appears' b'.' b'If' b'he' b'decides' b'for' b'in' b'circular' b'areas' b',' b'it' b'was' b'<unk>' b'contend' b'from' b'foraging' b'population' b'.' b'Both' b'old'
    b'chicks' b'contain' b'all' b'strengthening' b'or' b'prevent' b'them' b'from' b'such' b'one' b'Hendrie' b'to' b'being' b'the' b'cause' b'of' b'the' b'Irish' b'<unk>' b'<unk>'
    b'but' b'"' b'foraging' b'as' b'they' b'first' b'being' b'isolated' b'<unk>' b'in' b'this' b'same' b'year' b'"' b'(' b'closer' b'to' b'the' b'American' b'<unk>'
    b'Cuu' b'Pirate' b'de' b'Laney' b'"' b',' b'all' b'Death' b'"' b')' b'\xe2\x80\x94' b'"' b'Ireland' b'serve' b'to' b'have' b'a' b'whole' b'<unk>' b'"'
    b'while' b'"' b'"' b'"' b'could' b'be' b'1605' b'when' b'all' b'psychedelic' b'invisible' b'so' b'in' b'particular' b'@-@' b'game' b',' b'but' b'there' b'has'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 199.0
    loss: 5.168
    elapsed time (seconds): 102.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  9.616 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
