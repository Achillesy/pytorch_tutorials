.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'Jayma' b'909' b'and' b'Wilson' b'Tamba' b',' b'<unk>' b'trains' b',' b'called' b'<unk>' b'.' b'The' b'girls' b'were' b'aimed' b'in' b'both' b'Scotland'
    b'.' b'<eos>' b'stands' b',' b'they' b'can' b'be' b'much' b'native' b'to' b'exhausted' b';' b'they' b'were' b'never' b'growing' b'.' b'This' b'<unk>' b'is'
    b'white' b',' b'which' b'offered' b'five' b'lonely' b'odes' b'of' b'each' b'value' b'of' b'Liberal' b'Union' b',' b'though' b'versions' b'led' b'by' b'his' b'large'
    b'rosary' b',' b'have' b'some' b'students' b'in' b'their' b'sales' b'.' b'One' b'of' b'these' b'kinds' b'of' b'false' b'are' b'white' b',' b'reaching' b'a'
    b'further' b'range' b'of' b'two' b'dozen' b'patients' b',' b'communicated' b'as' b'a' b'venue' b';' b'typical' b'races' b'are' b'possible' b'anticyclone' b'Production' b',' b'the'
    b'combined' b'farming' b'with' b'larger' b'characters' b',' b'course' b'or' b'other' b'.' b'Like' b'the' b'light' b',' b'the' b'bird' b'ruled' b'another' b'core' b'description'
    b'of' b'about' b'16' b'@.@' b'18' b'million' b'barrels' b'(' b'18' b'after' b'gorgeously' b')' b',' b'and' b'a' b'decision' b'near' b'conservative' b'females' b'.'
    b'There' b'are' b'no' b'more' b'found' b'factors' b'to' b'find' b'higher' b',' b'and' b'their' b'range' b'should' b'consult' b'an' b'warning' b',' b'including' b'protection'
    b',' b'iron' b',' b'version' b'and' b'teeth' b',' b'circulation' b'<unk>' b',' b'common' b'incremental' b',' b'and' b'the' b'wood' b'into' b'Woman' b'so' b'Salisbury'
    b'are' b'completely' b'<unk>' b'.' b'A' b'male' b'concept' b'of' b'the' b'nest' b'mostly' b'feeds' b'on' b'an' b'2016' b'average' b'white' b'mechanism' b'was' b'nothing'
    b',' b'but' b'<unk>' b'overflowed' b'this' b'with' b'span' b'.' b'Utah' b'(' b'which' b'is' b',' b'as' b'a' b'male' b'@-@' b'rich' b'form' b')'
    b',' b'was' b'recurved' b'that' b'it' b'learned' b'over' b';' b'most' b'of' b'the' b'most' b'fresh' b'pursuers' b'find' b'least' b'members' b'of' b'the' b'species'
    b'from' b'easily' b'.' b'After' b'its' b'last' b'seasons' b',' b'they' b'exist' b',' b'Tito' b'Bruyn' b'is' b'their' b'authority' b'with' b'an' b'maternal' b'screen'
    b'diminishing' b'by' b'the' b'Escorial' b'Qedar' b'.' b'He' b'set' b'M.' b'Allah' b'to' b'fill' b'something' b'tavern' b'.' b'The' b'second' b'extent' b'may' b'be'
    b'in' b'Hamar' b',' b'and' b'has' b'no' b'black' b'of' b'some' b'bird' b'Delaunay' b'Brew' b',' b'infected' b'within' b'sailor' b',' b'whose' b'donors' b'is'
    b'spoken' b',' b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'070' b'shipbuilding' b',' b'or' b'movements' b'planets' b'.' b'They' b'indicate' b'members' b'of' b'#'
    b'2' b'as' b'11' b'\xe2\x80\x93' b'10' b'(' b'Canaan' b')' b',' b'though' b'the' b'male' b'receives' b'Shampain' b',' b'once' b'quite' b'specialized' b'with' b'reddish'
    b'purposes' b'.' b'Only' b'that' b',' b'like' b'mating' b',' b'are' b'that' b'they' b',' b'their' b'eyes' b'<unk>' b'unless' b'doubt' b',' b'<unk>' b','
    b'or' b'\xe2\x80\x98' b'for' b'core' b'nests' b',' b'they' b'were' b'computed' b'in' b'a' b'diameter' b'for' b'essentially' b'used' b'.' b'1845' b'may' b'be' b'abundant'
    b'without' b'financial' b'specialized' b'and' b'animals' b';' b'it' b'cannot' b'be' b'working' b'on' b'any' b'other' b',' b'and' b'may' b'occur' b'as' b'they' b'may'
    b'interact' b',' b'stem' b'plains' b'back' b'to' b'be' b'necessary' b'.' b'<eos>' b'The' b'mouth' b'of' b'diet' b'can' b'be' b'the' b'subject' b'of' b'Ceres'
    b'necessary' b',' b'forming' b'that' b'they' b'contributed' b'to' b'running' b'up' b'kilometres' b'in' b'a' b'Marian' b'<unk>' b'as' b'they' b'make' b'it' b'also' b'in'
    b'that' b'time' b'.' b'The' b'evidence' b'is' b'the' b'common' b'starling' b'(' b'the' b'<unk>' b'mineral' b')' b',' b'as' b'a' b'colour' b'"' b'Ry\xc5\xabjinmura'
    b'"' b'<unk>' b',' b'which' b'is' b'required' b'to' b'do' b'a' b'error' b'facility' b',' b'which' b'<unk>' b'410' b'marble' b',' b'fatigue' b',' b'settled'
    b'(' b'plagiarism' b'today' b'and' b'and' b'<unk>' b')' b',' b'daily' b'with' b'forecastle' b'.' b'The' b'popularity' b'of' b'postulated' b'perished' b'hammer' b'cultural' b'starlings'
    b'is' b'brought' b'much' b'<unk>' b'for' b'him' b'to' b'kill' b'alternative' b'prints' b',' b'so' b'<unk>' b'or' b'a' b'discharge' b'target' b'of' b'201' b'@.@'
    b'5' b'%' b',' b'can' b'be' b'more' b'robust' b',' b'so' b'by' b'23' b'@.@' b'5' b'percent' b'of' b'males' b'no' b'male' b'such' b'as'
    b'contact' b'they' b'have' b'their' b'own' b'clothing' b'.' b'She' b'can' b'will' b'be' b'demonstrated' b'with' b'foreigners' b'in' b'environments' b'being' b'unable' b'to' b'eat'
    b'New' b'Zealand' b'.' b'He' b'appears' b'occur' b'in' b'place' b'.' b'Instead' b',' b'in' b'they' b'consider' b'measuring' b'these' b',' b'the' b'eggs' b'enforced'
    b'food' b',' b'whose' b'<unk>' b'have' b'send' b'Defiant' b'to' b'date' b',' b'they' b'allowed' b'their' b'greenish' b'Accounts' b'.' b'Rowley' b'(' b'M.' b'Cooke'
    b')' b'begins' b'its' b'penis' b',' b'but' b'lost' b'up' b'a' b'vision' b'of' b'save' b'base' b'.' b'<eos>' b'One' b'glans' b'made' b'to' b'be'
    b'part' b'of' b'Austin' b'females' b',' b'by' b'another' b'disk' b'for' b'inhibits' b'non' b'years' b',' b'Manders' b',' b'or' b'yellowish' b',' b'<unk>' b','
    b'(' b'formerly' b'requests' b'to' b'show' b'4' b'@.@' b'5' b'%' b'of' b'100' b'<unk>' b')' b'.' b'<eos>' b'The' b'birds' b'on' b'the' b'diet'
    b'is' b'especially' b'a' b'elderly' b'sulfide' b'within' b'Wren' b'and' b'Stewie' b',' b'including' b'some' b'population' b'between' b'known' b',' b'that' b'other' b'physical' b'frames'
    b'are' b'well' b'@-@' b'gravity' b'.' b'The' b'powered' b'range' b'telegraph' b'resulting' b'on' b'well' b'(' b'or' b'engineers' b')' b'migrated' b'TBSA' b',' b'male'
    b'Fisherman' b',' b'which' b'are' b'subjected' b'to' b'.' b'There' b'are' b'four' b'fewer' b'tails' b',' b'with' b'a' b'male' b'downstream' b'(' b'<unk>' b')'
    b',' b'with' b'goddesses' b'14' b'kg' b'/' b'h' b'(' b'rarely' b'14' b'\xe2\x80\x93' b'52' b'\xe2\x80\x93' b'12' b'@.@' b'3' b'\xce\xbcm' b')' b'.' b'They'
    b'Aldean' b'finds' b'her' b'first' b'cap' b'(' b'comparison' b'to' b'other' b',' b'and' b'can' b'be' b'found' b'to' b'be' b'due' b'to' b'render' b'another'
    b'topological' b'keel' b'and' b'her' b'third' b'eye' b'with' b'just' b'deep' b'females' b'to' b'be' b'distinguished' b'until' b'its' b'1761' b')' b'of' b'karyopherins' b'.'
    b'They' b'do' b'so' b'give' b'to' b'have' b'a' b'study' b'of' b'pursuers' b'.' b'This' b'bird' b'long' b'makes' b'food' b'and' b'sufficiently' b'bite' b'.'
    b'Because' b'data' b'literary' b'predators' b'were' b'sufficiently' b'even' b'on' b'one' b'ever' b'walk' b'and' b'fade' b'throughout' b'males' b'.' b'<unk>' b',' b'such' b'as'
    b'incompatible' b'<unk>' b'(' b'sometimes' b'Koreans' b')' b'or' b'<unk>' b',' b'are' b'small' b'off' b'over' b'night' b'their' b'length' b'by' b'prey' b',' b'and'
    b'had' b'been' b'defined' b'by' b'symptomatic' b',' b'and' b'tend' b'to' b'Sur' b'reveal' b',' b'when' b'the' b'female' b'activity' b'extends' b'out' b'.' b'By'
    b'a' b'main' b'life' b',' b'an' b'male' b'goes' b'in' b'hours' b',' b'with' b'their' b'length' b'of' b'transept' b'secondary' b'on' b'a' b'Rhine' b'town'
    b',' b'and' b'a' b'common' b'adequate' b'eye' b'from' b'the' b'head' b'of' b'<unk>' b'encounters' b'.' b'They' b'were' b'just' b'enlisted' b'through' b'females' b'bring'
    b'by' b'their' b'only' b'affects' b'<unk>' b'.' b'Lanois' b'have' b'large' b'stolen' b'methods' b'to' b'have' b'or' b'readily' b'change' b',' b'usually' b'greatly' b'to'
    b'avoid' b',' b'so' b'they' b'drive' b',' b'<unk>' b'they' b'already' b'correct' b'.' b'If' b'it' b'is' b'<unk>' b'their' b'close' b',' b'they' b'can'
    b'be' b'lost' b',' b'when' b'these' b'birds' b'argued' b'that' b'their' b'external' b'diseases' b'were' b'mobilised' b';' b'to' b'greater' b'historians' b'liquid' b'interacting' b'habitat'
    b',' b'however' b',' b'every' b'boat' b'Gopal' b'cluster' b'are' b'dark' b'.' b'<unk>' b',' b'however' b',' b'the' b'Amateur' b'envelope' b',' b'should' b'be'
    b'stylish' b'with' b'them' b'or' b'arc' b'.' b'<eos>' b'Only' b'fused' b'activity' b'provide' b'some' b'birds' b',' b'food' b',' b'parrot' b',' b'or' b'creatures'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 206.2
    loss: 5.168
    elapsed time (seconds): 116.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  30.454 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
