.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'complete' b'.' b'<eos>' b'The' b'supernatural' b'criticism' b'of' b'warming' b'includes' b'of' b'the' b'patronage' b'of' b'the' b'accumulated' b'era' b'of' b'North' b'Angeles'
    b'.' b'<unk>' b'standards' b'are' b'set' b'when' b'Proto' b'Lead' b'Conservation' b'is' b'observed' b'to' b'be' b'small' b'.' b'The' b'begins' b'between' b'their' b'expanded'
    b'existence' b'and' b'evolution' b'was' b'difficult' b'to' b'seek' b'sufficient' b'investments' b'to' b'18' b'%' b'of' b'the' b'occurring' b'contributed' b'to' b'their' b'bright' b'ability'
    b'.' b'The' b'eggs' b'residing' b'in' b'the' b'orbits' b'of' b'votes' b',' b'many' b'and' b'more' b'species' b'they' b'discover' b',' b'and' b'brother' b'Barbie'
    b'proceeded' b'to' b'be' b'described' b'as' b'Commander' b'of' b'<unk>' b',' b'trails' b',' b'and' b'David' b'Traill' b'.' b'Those' b'funding' b'can' b'be' b'used'
    b'on' b'a' b'mycorrhizal' b'section' b'of' b'the' b'Sighting' b'primary' b'.' b'achieving' b'of' b'these' b'men' b',' b'on' b'a' b'break' b'of' b'the' b'belt'
    b'of' b'limiting' b'dynamic' b'<unk>' b'if' b'these' b'are' b'supplemented' b'by' b'them' b'that' b'<unk>' b'bone' b',' b'the' b'bones' b'give' b'the' b'kakapo' b'147'
    b'itself' b'during' b'Montreux' b'.' b'But' b'more' b'develops' b'of' b'intense' b'wings' b'long' b'so' b'severe' b'into' b'open' b',' b'food' b'and' b'4' b'inches'
    b'(' b'4' b'@.@' b'8' b'in' b')' b'in' b'the' b'space' b'.' b'It' b'are' b'that' b'or' b'they' b'need' b'to' b'make' b'O' b'miners'
    b'to' b'be' b'his' b'habit' b'to' b'extend' b'up' b'from' b'a' b'Simon' b'Cushing' b'and' b'pet' b'their' b'<unk>' b',' b'which' b'threatened' b'James' b','
    b'Ha' b'of' b'time' b',' b'<unk>' b'Leone' b'and' b'Neptune' b'from' b'work' b'to' b'work' b'the' b'gameplay' b'<unk>' b'<unk>' b'.' b'The' b'2015' b'parrot'
    b'opening' b',' b'but' b'a' b'Swiss' b'star' b'will' b'be' b'suddenly' b'or' b'hypothesis' b',' b'has' b'to' b'be' b'found' b'.' b'When' b'the' b'building'
    b'dark' b',' b'according' b'to' b'the' b'possibility' b'can' b'be' b'showing' b'the' b'Manhattan' b'spots' b',' b'water' b'ice' b'in' b'destiny' b',' b'causing' b'from'
    b'unfit' b'made' b'when' b'it' b'may' b'be' b'heard' b'.' b'A' b'female' b'eagle' b'may' b'have' b'exchanged' b'@-@' b'brick' b',' b'and' b'accurate' b'yardage'
    b'can' b'also' b'be' b'used' b'.' b'<eos>' b'Historian' b'Cassandra' b'lusts' b'<unk>' b"'s" b'hyphae' b'on' b'Dubliners' b',' b'preventing' b'the' b'creation' b'of' b'many'
    b'sort' b'of' b'Hindu' b',' b'such' b'as' b'Panel' b'Hindu' b'Herd' b',' b'or' b'attend' b'a' b'second' b'position' b'that' b'may' b'be' b'maintained' b'.'
    b'Inside' b'a' b'number' b'of' b'methods' b'on' b'these' b'tales' b',' b'whose' b'host' b'forms' b'state' b'they' b'would' b'be' b'used' b'for' b'the' b'death'
    b'of' b'half' b'.' b'A' b'observation' b'that' b'might' b'cause' b'ring' b'food' b'repetitive' b'for' b'fewer' b'female' b'whalebone' b'<unk>' b'.' b'More' b'common' b'consequence'
    b'have' b'valid' b'jam' b'.' b'Males' b'may' b'be' b'absorbed' b'down' b'in' b'literature' b'(' b'their' b'<unk>' b')' b'depending' b'in' b'the' b'common' b'starling'
    b',' b'control' b'as' b'they' b'fail' b'\xe2\x80\x94' b'and' b'.' b'Koi' b',' b'Odaenathus' b'ticks' b',' b'matted' b'Udaynath' b',' b'and' b'1804' b'such' b'as'
    b'playoff' b'pleasure' b'are' b'direct' b'to' b'assume' b'Witu' b'in' b'fit' b',' b'rather' b'than' b'cash' b'thousand' b'.' b'<unk>' b'conditions' b'are' b'declared' b'top'
    b'by' b'script' b'fallow' b'.' b'They' b'are' b'white' b'(' b'see' b'the' b'droppings' b')' b'when' b'backward' b'especially' b'emergency' b'numbers' b'of' b'Kanata' b'or'
    b'feral' b'areas' b'(' b'and' b'atherfieldensis' b')' b'backwards' b'throughout' b'several' b'grassland' b'surface' b'trees' b',' b'background' b'white' b',' b'white' b',' b'Common' b'origin'
    b',' b'utilities' b',' b'tissue' b'rhymes' b',' b'working' b'against' b'<unk>' b',' b'repellent' b',' b'technique' b',' b'<unk>' b',' b'<unk>' b',' b'kakapo' b','
    b'exile' b',' b'clay' b',' b'Illinois' b',' b'Hertfordshire' b',' b'<unk>' b'Strike' b',' b'unearthed' b',' b'ex' b'\xe2\x80\x93' b'Fletch' b',' b'Hungary' b',' b'cigarettes'
    b',' b'and' b'dogs' b',' b'the' b'<unk>' b',' b'IAU' b'and' b'Republic' b'.' b'<eos>' b'parasites' b'particularly' b'@-@' b'resolution' b',' b'also' b'may' b'be'
    b'defined' b'in' b'revolutionary' b'areas' b',' b'as' b'well' b'as' b'curriculum' b'of' b'low' b'points' b'on' b'new' b'drifting' b'features' b'.' b'A' b'male' b'section'
    b'occurs' b'as' b'<unk>' b',' b'unwillingness' b'to' b'measure' b'National' b'and' b'royal' b'puzzles' b'and' b'they' b'also' b'partly' b'acyclic' b'prey' b'.' b'One' b'an'
    b'large' b'female' b',' b'proteins' b',' b'and' b'welcome' b'he' b'enjoyed' b'the' b'matter' b'<unk>' b',' b'under' b'well' b'au' b'Oval' b'.' b'There' b'is'
    b'their' b'own' b'evidence' b'that' b'activist' b'Iran' b'ends' b'and' b'proportional' b',' b'a' b'ice' b'source' b'of' b'far' b'at' b'this' b'phase' b'or' b'Royton'
    b'.' b'Other' b'more' b'insects' b'camera' b'are' b'heavily' b'shown' b'.' b'logged' b'that' b'derives' b'afterwards' b',' b'they' b'are' b'stuck' b'raised' b'or' b'make'
    b'tibia' b',' b'there' b'is' b'no' b'fresh' b'ones' b'of' b'her' b'quest' b'to' b'lose' b'good' b'concentration' b'of' b'males' b'.' b'After' b'the' b'very'
    b'most' b'dominant' b'protein' b',' b'there' b'are' b'no' b'important' b'<unk>' b'or' b'poaching' b',' b'and' b'it' b'is' b'very' b'careful' b'the' b'students' b'Mahatma'
    b'T.' b'<unk>' b'falsely' b'owed' b'forth' b'outside' b'only' b'to' b'bring' b'on' b'to' b'90' b'years' b'.' b'Traill' b',' b'it' b'also' b'found' b','
    b'glamour' b',' b'even' b'fighting' b'practice' b'assent' b',' b'to' b'<unk>' b'into' b'the' b'unpaid' b'layers' b'of' b'<unk>' b',' b'Odaenathus' b',' b'<unk>' b','
    b'<unk>' b',' b'genitive' b',' b'Winnberg' b',' b'135Xe' b',' b'Xingyi' b',' b'etc' b',' b'Mumia' b'explicit' b'assembly' b',' b'but' b'the' b'bird' b'may'
    b'feature' b'one' b'back' b'to' b'<unk>' b'by' b'they' b'occur' b'to' b'free' b'more' b'.' b'<eos>' b'leukemias' b'are' b'a' b'beads' b'for' b'running' b'control'
    b',' b'<unk>' b'represents' b'boycott' b'past' b'motor' b'sentences' b'that' b'if' b'this' b'parrot' b'brought' b'a' b'perfectly' b'role' b'will' b'be' b'consumed' b',' b'particularly'
    b'before' b'being' b'monogamous' b'.' b'The' b'male' b'which' b'is' b'very' b'already' b'present' b',' b'however' b',' b'"' b'will' b'Plata' b'are' b'something' b'tied'
    b'.' b'A' b'deity' b'(' b'1679' b')' b'may' b'remain' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'='
    b'=' b'=' b'First' b'language' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'of' b'Ceres' b',' b'upon' b'<unk>' b',' b'Siberia' b'as' b'myeloblast' b','
    b'Adams' b',' b'<unk>' b',' b'were' b'introduced' b'of' b'approximately' b'<unk>' b',' b'with' b'numerous' b'sub' b'@-@' b'Norman' b'expression' b'.' b'It' b'has' b'been'
    b'suggested' b'that' b'"' b'when' b'such' b'the' b'same' b'as' b'to' b'some' b'1125' b',' b'power' b'is' b'their' b'image' b'in' b'a' b'way' b'!'
    b'"' b'<unk>' b'there' b'was' b'noted' b'less' b'negative' b'than' b'that' b',' b'in' b'the' b'other' b'environmental' b'suspense' b'there' b'was' b'no' b'evidence' b'that'
    b'1811' b',' b'still' b'included' b'Ceres' b'and' b'laugh' b'down' b'.' b'If' b'there' b'are' b'no' b'ages' b'of' b'useful' b'females' b',' b'the' b'<unk>'
    b'relapsed' b'Hope' b'and' b'Beetham' b'aggression' b'this' b'splash' b'and' b'have' b'about' b'considerable' b'venom' b',' b'but' b'is' b'very' b'pure' b'.' b'They' b'allowed'
    b'transcription' b'females' b',' b'deliberately' b'Jifna' b'cell' b',' b'like' b'long' b'complexes' b'of' b'JGT' b'and' b'other' b'planet' b'edges' b',' b'are' b'connected' b'inside'
    b'in' b'Nova' b'compare' b'.' b'A' b'Cajal' b'clutch' b'can' b'be' b'seen' b'by' b'mRNA' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Release' b'='
    b'=' b'=' b'<eos>' b'<eos>' b'O' b'galericulata' b',' b'which' b'are' b'also' b'described' b'in' b'the' b'Taoist' b'town' b'(' b'<unk>' b')' b',' b'also'
    b'is' b'known' b'as' b'a' b'rapid' b'sensation' b',' b'but' b'many' b'birds' b'have' b'noted' b'particularly' b'potentially' b'7000' b',' b'and' b'this' b'is' b'enriched'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.8
    loss: 5.168
    elapsed time (seconds): 121.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  46.322 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
