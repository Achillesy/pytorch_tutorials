.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'@-@' b'up' b'bands' b'a' b'few' b'years' b',' b'provided' b'the' b'policeman' b'to' b'appoint' b'that' b'"' b'balls' b'"' b'the' b'post' b'@-@' b'five'
    b'@-@' b'old' b'<unk>' b'were' b'running' b'at' b'feeding' b'.' b'In' b'June' b'2015' b',' b'the' b'rehabilitated' b'institutions' b'worked' b'<unk>' b'the' b'same' b'play'
    b'in' b'deliberations' b'.' b'Another' b'amount' b'of' b'the' b'blue' b'hormone' b'gave' b'part' b'Belle' b'cleared' b'that' b'grassland' b',' b'but' b'is' b'known' b'to'
    b'be' b'created' b'acceptable' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Formats' b'for' b'Baltimore' b'Actor' b'=' b'<eos>' b'<eos>' b'The' b'Survivor' b'Race' b'(' b'shooting'
    b'Canada' b')' b'<eos>' b'No' b'languages' b'are' b'particularly' b'profitable' b',' b'and' b'in' b'1803' b',' b'in' b'order' b'to' b'explore' b'seal' b'atoms' b'in'
    b'round' b'units' b'.' b'<eos>' b'By' b'his' b'home' b'magnitude' b'he' b'was' b'from' b'omnivorous' b'Tax' b'<unk>' b',' b'Massachusetts' b'.' b'On' b'mid' b'June'
    b'2010' b'that' b'Ceres' b'controls' b'propaganda' b',' b'in' b'1882' b',' b'they' b'ripped' b'a' b'customer' b'fluency' b'for' b'force' b'management' b'.' b'In' b'February'
    b'of' b'they' b'resulted' b'with' b'spruces' b',' b'being' b'trying' b'to' b'grow' b'with' b'carbon' b',' b'where' b'the' b'team' b'entered' b'on' b'to' b'die'
    b'without' b'his' b'three' b'other' b'institutions' b'as' b'they' b'are' b'repelled' b'number' b'to' b'be' b'effective' b'.' b'From' b'2000' b',' b'the' b'call' b'has'
    b'undergone' b'an' b'"' b'three' b'Geologists' b'"' b',' b'28' b'@-@' b'unit' b',' b'and' b'appears' b'several' b'to' b'leave' b'citizens' b'from' b'a' b'point'
    b'of' b'the' b'Final' b'century' b'extension' b'to' b'provide' b'reports' b'of' b'a' b'backstory' b'by' b'one' b'sepulchral' b'length' b'of' b'public' b'life' b'.' b'<eos>'
    b'Brat' b'teaching' b'the' b'game' b',' b'representing' b'many' b'prominent' b'responses' b'and' b'players' b'of' b'body' b'made' b'between' b'Hollywood' b'and' b'Australia' b'.' b'<eos>'
    b'O' b'Crash' b'!' b'!' b'John' b'1567' b'discovered' b'in' b'the' b'streaming' b'flight' b'asymmetrical' b'by' b'Mayer' b'members' b',' b'the' b'St.' b'Gama' b'series'
    b'Chronicles' b'foxes' b',' b'to' b'become' b'the' b'Oscar' b'.' b'With' b'the' b'election' b'of' b'all' b'of' b'those' b'matters' b',' b'Mast' b'action' b'at'
    b'times' b'proved' b'increasingly' b'words' b'to' b'influence' b'critics' b'.' b'Ceres' b'Arthur' b'Welles' b'has' b'traditional' b'riffs' b'who' b'declared' b'the' b'country' b'250' b'\xe2\x80\x93'
    b'4' b'%' b'episode' b'tasting' b'Chinese' b'resistance' b',' b'which' b'united' b'short' b'changes' b'to' b'roughly' b'400' b'%' b'of' b'wet' b'troops' b'.' b'The'
    b'primary' b'chicken' b'team' b',' b'and' b'The' b'event' b'or' b'the' b'internet' b'to' b'South' b'Africa' b'runs' b'on' b'each' b'other' b',' b'and' b'fluid'
    b'display' b'independent' b'to' b'escape' b',' b'this' b'research' b'occurs' b'sixth' b'on' b'the' b'Earth' b'.' b'Publishers' b'numbers' b'also' b'do' b'not' b'convert' b'about'
    b'any' b'lower' b'links' b',' b'which' b'would' b'be' b'believed' b'to' b'pull' b'solely' b'towards' b'this' b'other' b',' b'though' b'there' b'does' b'not' b'feel'
    b'fuel' b'fire' b'.' b'However' b',' b'when' b'Burns' b'conducted' b'their' b'little' b'politicians' b'eating' b'smell' b'in' b'the' b'more' b'experiences' b'to' b'be' b'passed'
    b'to' b'a' b'jetty' b'for' b'multiple' b'years' b',' b'such' b'light' b'patches' b'have' b'need' b'that' b'their' b'magnum' b'representative' b'should' b'handle' b'different' b','
    b'at' b'getting' b'and' b'by' b'Mid' b'27' b'\xe2\x80\x94' b'2008' b'.' b'With' b'other' b'discussed' b'reverse' b'damage' b',' b'other' b'males' b'were' b'the' b'most'
    b'destroyed' b'bird' b'facility' b'.' b'The' b'Karen' b'Race' b'was' b'created' b'at' b'warriors' b'that' b'became' b'a' b'fastest' b'genital' b'Force' b':' b'"' b'Early'
    b'life' b'sons' b'were' b'-' b'Welsh' b'familiar' b'reflected' b'martial' b'historians' b'of' b'bobcat' b'caused' b'it' b'so' b'often' b'ages' b'\xe2\x80\x94' b'smell' b'.' b'"'
    b'negligible' b'Catholicism' b'spread' b'the' b'games' b'with' b'long' b'systems' b'and' b'affects' b'individual' b'films' b'and' b'<unk>' b'attention' b'.' b'For' b'example' b',' b'metres'
    b',' b'kakapo' b',' b'compile' b'over' b'tourism' b',' b'a' b'parasite' b'on' b'its' b'archives' b',' b'by' b'19' b'February' b'1999' b',' b'year' b'their'
    b'<unk>' b'being' b'a' b'terrible' b'<unk>' b'riding' b'.' b'<eos>' b'In' b'the' b'same' b'year' b',' b'umpires' b'decreases' b'a' b'long' b'motion' b'about' b'15'
    b'%' b'of' b'a' b'month' b'before' b'taking' b'.' b'O' b'Petit' b'Bang' b'is' b'not' b'placed' b'15' b'by' b'16' b'inches' b'(' b'50' b'ft'
    b')' b'within' b'a' b'portion' b'.' b'As' b'of' b'2005' b',' b'in' b'conjunction' b',' b'it' b'is' b'located' b'along' b'any' b'of' b'these' b'other'
    b'species' b'.' b'Europium' b'tip' b'on' b'Ceres' b'that' b'were' b'designated' b'as' b'thus' b'one' b'of' b'its' b'father' b'made' b'the' b'assigns' b'world' b'of'
    b'non' b'@-@' b'<unk>' b'teeth' b'from' b'their' b'own' b'cell' b'download' b',' b'so' b'that' b'it' b'was' b'introduced' b'by' b'open' b'stellar' b'starlings' b'in'
    b'<unk>' b',' b'they' b'start' b'atop' b'.' b'Several' b'holotype' b'features' b'of' b'theories' b'facing' b'paths' b'from' b'chicks' b'can' b'be' b'heard' b'.' b'They'
    b'can' b'have' b'normally' b'conditioning' b',' b'most' b'labeled' b'Madras' b'that' b'will' b'have' b'only' b'annually' b'Count' b'.' b'This' b'kakapo' b'has' b'been' b'farming'
    b',' b'however' b',' b'while' b'attackers' b'could' b'have' b'many' b'regions' b'up' b',' b'while' b'though' b'so' b'they' b'males' b'Novo' b'59' b'in' b'1873'
    b'.' b'Likewise' b',' b'birds' b'O.W.C.A.' b'antiquarian' b'sect' b'washed' b'its' b'own' b'status' b'around' b'the' b'operation' b'around' b'its' b'own' b'image' b'and' b'signalled'
    b'a' b'<unk>' b'compound' b',' b'as' b'abusive' b'food' b',' b'analyzed' b',' b'are' b'<unk>' b'sticks' b'to' b'express' b'the' b'nest' b',' b'instead' b'of'
    b'a' b'developing' b'administrative' b'for' b'higher' b'organs' b'.' b'The' b'modelled' b'mechanism' b'of' b'this' b'solar' b'meaning' b'underwent' b'Quarterback' b'LEDs' b',' b'a' b'variant'
    b',' b'<unk>' b',' b'Rica' b',' b'<unk>' b',' b'furniture' b',' b'dense' b'drenched' b',' b'1563' b',' b'<unk>' b',' b'<unk>' b',' b'bipedal' b','
    b'and' b'Celtic' b',' b'sometimes' b'sequenced' b'as' b'they' b'are' b'deprived' b'.' b"'" b'first' b'images' b'of' b'lined' b'occur' b'before' b'poverty' b'are' b'determines'
    b',' b'but' b'delay' b'.' b'<eos>' b'Plum' b'starlings' b'cannot' b'merge' b'on' b'place' b'and' b'even' b'improperly' b'further' b'@-@' b'scale' b'sprites' b',' b'though'
    b'they' b'claim' b'so' b'they' b'used' b'chroniclers' b'with' b'fewer' b'nest' b'birds' b'that' b'may' b'be' b'to' b'assemble' b'the' b'amount' b'of' b'abdomen' b'.'
    b'They' b'remain' b'their' b'prediction' b'and' b'thus' b'they' b'have' b'long' b'more' b'shorter' b'or' b'thick' b'.' b'On' b'their' b'closest' b'partner' b',' b'ocean'
    b',' b'damage' b',' b'collectively' b',' b'planets' b',' b'difficult' b'steaming' b'the' b'variable' b'towers' b'.' b'<unk>' b'including' b'trees' b'are' b'farther' b'from' b'502nd'
    b'blotches' b',' b'including' b'rare' b'fertilization' b'as' b'they' b'decrease' b'such' b'six' b'giant' b'species' b'among' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Gameplay'
    b'=' b'=' b'<eos>' b'<eos>' b'As' b'of' b'2003' b',' b'no' b'flight' b'mentions' b'.' b'The' b'common' b'candidates' b'exist' b'in' b'Phantom' b'snowberry' b'.'
    b'Ceres' b'produced' b'<unk>' b'in' b'standby' b',' b'signs' b'of' b'spots' b',' b'such' b'as' b'RNA' b',' b'<unk>' b',' b'Arikaree' b',' b'and' b'<unk>'
    b',' b'<unk>' b',' b'Latin' b',' b'violence' b',' b'beauty' b'and' b'clothing' b'from' b'Las' b'Rico' b'.' b'They' b'have' b'suggested' b'several' b'thought' b'suggested'
    b'that' b'by' b'many' b'retirement' b'increased' b'each' b'squat' b'came' b'to' b'permit' b'North' b'America' b'or' b'fauna' b'<unk>' b'and' b'mercenaries' b',' b'but' b'the'
    b'oldest' b'often' b'species' b',' b'although' b'it' b'will' b'be' b'prepared' b'to' b'gain' b'large' b'behaviour' b'when' b'they' b'believed' b'may' b'be' b'put' b'into'
    b'Distribution' b'to' b'interpret' b'moisture' b'.' b'Since' b'this' b'role' b'allow' b',' b'they' b'appear' b'across' b'the' b'species' b'.' b'It' b'is' b'sign' b'that'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.8
    loss: 5.168
    elapsed time (seconds): 119.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  40.703 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
