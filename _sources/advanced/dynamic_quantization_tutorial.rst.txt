.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'lifetime' b'comes' b';' b'they' b'make' b'seen' b'longer' b',' b'not' b'problems' b'it' b'to' b'write' b'or' b'avoid' b'take' b'to' b'have' b'held' b'so'
    b'series' b'in' b'1998' b'.' b'with' b'so' b'handbag' b'was' b'included' b'in' b'collaboration' b'from' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Gameplay' b'='
    b'=' b'<eos>' b'<eos>' b'During' b'the' b'development' b'of' b'it' b'guns' b',' b'Jesus' b'and' b'France' b'were' b'incomplete' b'as' b'precipitation' b'of' b'the' b'prequel'
    b'to' b'a' b'hooked' b'academic' b'annex' b',' b'which' b'inspire' b'the' b'glued' b'or' b'modal' b'Raton' b'description' b'.' b'Now' b'they' b'spent' b'one' b'with'
    b'a' b'much' b'aggressive' b'phase' b',' b'but' b'later' b'auditioned' b'.' b'Despite' b'his' b'previous' b'time' b'ranging' b'property' b'to' b'meet' b',' b'they' b'have'
    b'the' b'most' b'slower' b'head' b'ball' b'where' b'they' b'received' b'two' b'the' b'production' b'party' b',' b'he' b'm' b'a' b'role' b'@-@' b'northwestward' b','
    b'or' b'that' b'Assassination' b'distorted' b'made' b'its' b'parrot' b'lacked' b'by' b'making' b'a' b'bright' b'circuit' b',' b'whereas' b'it' b'declined' b'at' b'a' b'level'
    b'@-@' b'43' b'or' b'the' b'rear' b'dollar' b'.' b'Though' b'he' b'had' b'monarchs' b'rectilinear' b',' b'it' b'was' b'planes' b'during' b'the' b'1954' b'debate'
    b'that' b'selects' b'short' b'art' b'look' b',' b'showing' b'him' b'for' b'Mulder' b',' b'and' b'on' b'Dublin' b'compulsory' b'more' b'than' b'60' b'%' b'per'
    b'year' b'.' b'These' b'researchers' b'continued' b'to' b'\xc3\x98' b'due' b'to' b'the' b'development' b'that' b'Crash' b'is' b'a' b'vernacular' b'player' b'will' b'kill' b'against'
    b'background' b'them' b',' b'which' b'lasted' b'loyal' b'to' b'which' b'one' b'sign' b'could' b'allow' b'it' b'into' b'the' b'Test' b',' b'fortified' b'an' b'night'
    b'change' b'.' b'Both' b'that' b'they' b'last' b'fall' b'herself' b'that' b'"' b'If' b'most' b'of' b'his' b'Donlan' b'is' b'a' b'violent' b'difference' b'"'
    b',' b'while' b'they' b'were' b'made' b'from' b'the' b'Japanese' b'snake' b'.' b'The' b'film' b'includes' b'were' b'inaugurated' b'in' b'and' b'newly' b'1770' b','
    b'the' b'kakapo' b'.' b'A' b'regiment' b'reserved' b'sending' b'a' b'object' b'1351' b'to' b'prevent' b'his' b'planet' b'crews' b',' b'and' b'tells' b'his' b'<unk>'
    b',' b'or' b'never' b'their' b'works' b'.' b'Vargas' b'Power' b'!' b"'s" b'regiment' b'will' b'be' b'sent' b'to' b'Sun' b'Barnes' b',' b'but' b'considered'
    b'it' b'better' b'a' b'abducts' b')' b',' b'so' b'on' b'its' b'feeling' b'<unk>' b'starting' b'for' b'Bridgeport' b',' b'successfully' b'sets' b'into' b'the' b'power'
    b'after' b'neural' b'their' b'focus' b'between' b'Earth' b'and' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'Kitsune' b'have'
    b'catch' b'a' b'public' b'98' b'\xe2\x80\x93' b'DVD' b'MeV' b',' b'when' b'the' b'kakapo' b',' b'in' b'which' b'@-@' b'colour' b'can' b'be' b'one' b'of'
    b'the' b'tested' b',' b"'" b'as' b'he' b'has' b'.' b'Power' b'triumph' b'have' b'been' b'explained' b'on' b'many' b'supporters' b',' b'hearing' b'Conrad' b'versa'
    b'(' b'Japanese' b'ambition' b')' b'samples' b',' b'and' b'their' b'wives' b',' b'and' b'Satisfied' b'Terrence' b'and' b'Power' b'spiritual' b'.' b'Everything' b'praised' b'Millais'
    b"'s" b'Bibles' b'for' b'many' b'outstandingly' b'features' b'having' b'played' b'history' b',' b'but' b'used' b'"' b'until' b'depleted' b',' b'free' b'Ivo' b'made' b'mind'
    b'a' b'planet' b',' b'though' b'Passage' b'of' b'animals' b'represented' b'.' b'Similarly' b',' b'with' b'lordship' b',' b'and' b'the' b'cloth' b'The' b'lions' b'<unk>'
    b'in' b'respect' b'that' b'it' b'involves' b'Disc' b'about' b'.' b'Ross' b'Laud' b'still' b'explained' b'reinforced' b'.' b'"' b'He' b'Bhai' b'commented' b'that' b'his'
    b'intent' b'"' b'was' b'technically' b'armed' b',' b'so' b'by' b'which' b',' b'and' b'there' b'would' b'be' b'<unk>' b',' b'you' b'will' b'be' b'a'
    b'wholly' b'problem' b'in' b'this' b'life' b'"' b'.' b'bright' b'students' b'became' b'physically' b'able' b'to' b'create' b'up' b'microscope' b'if' b'it' b'will' b'be'
    b'completely' b'drawn' b'to' b'buy' b'.' b'But' b'they' b'were' b'monitored' b'that' b'may' b'be' b'killed' b'information' b'on' b'a' b'lasting' b'fusion' b'.' b'<eos>'
    b'Great' b'company' b'is' b'rarely' b'observed' b'with' b'its' b'"' b'sad' b'"' b'.' b'The' b'221' b'Race' b'is' b'nice' b'with' b'spherical' b',' b'making'
    b'it' b'an' b'low' b'angle' b'.' b'The' b'placement' b'of' b'Milk' b'is' b'spherical' b',' b'namely' b'their' b'<unk>' b'on' b'the' b'Sacirbey' b';' b'she'
    b'wait' b'as' b'a' b'proton' b'.' b'It' b'can' b'be' b'"' b'<unk>' b'Lea' b'"' b'by' b'words' b'a' b'or' b'@-@' b'food' b'ideas' b'with'
    b'magical' b'lose' b'.' b'When' b'they' b'would' b'have' b'been' b'interpreted' b'for' b'future' b',' b'no' b'vassals' b'is' b'<unk>' b'by' b',' b'which' b'was'
    b'wet' b'the' b'same' b'before' b',' b'rebels' b',' b'Pacific' b',' b'<unk>' b',' b'[' b'it' b'tends' b'to' b'be' b'rolled' b'out' b'.' b'They'
    b'may' b'require' b'or' b'extend' b'on' b'up' b'with' b'grass' b'or' b'male' b'.' b'This' b'increases' b'up' b'above' b'the' b'readmitted' b'in' b'response' b'to'
    b'some' b'low' b'thermal' b'eggs' b'.' b'They' b'feels' b'them' b'solemn' b',' b'blue' b'are' b'avian' b',' b'though' b'these' b'or' b'jumping' b'extensive' b'when'
    b'both' b'grey' b'would' b'be' b'are' b'apparently' b'observed' b'.' b'Despite' b'its' b'chicks' b'for' b'bird' b'populations' b',' b'and' b'the' b'light' b'pattern' b'of'
    b'<unk>' b',' b'usually' b'greater' b'particles' b'have' b'agitation' b'onwards' b'.' b'The' b'female' b'is' b'<unk>' b'and' b'is' b'seen' b'as' b'<unk>' b',' b'and'
    b'may' b'be' b'more' b'understood' b'for' b'them' b'and' b'their' b'mechanical' b'methyl' b',' b'or' b'in' b'case' b',' b'in' b'particular' b'.' b'When' b'Torpedo'
    b'methods' b'may' b'return' b'to' b'Self' b'after' b'they' b',' b'to' b'be' b'another' b'movement' b',' b'they' b'are' b'overtly' b'injuries' b',' b'have' b'therefore'
    b'Hilton' b'their' b'horn' b'eggs' b'.' b'<eos>' b'Brown' b',' b'a' b'Counter' b'man' b',' b'kills' b'designed' b'dead' b'with' b'posture' b'as' b'containing' b'six'
    b'alarm' b'nightmare' b':' b'Wolfgang' b',' b'<unk>' b',' b'agriculture' b',' b'and' b'mythical' b'Kahn' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'='
    b'<eos>' b'<eos>' b'Originally' b'a' b'given' b'closely' b',' b'1833' b',' b'Struensee' b',' b'a' b'field' b'dependent' b'on' b'Venus' b'for' b'Brazilian' b'foods' b','
    b'have' b'Commissioners' b'activity' b'that' b'the' b'eggs' b'in' b'specific' b'species' b'was' b'needed' b'.' b'adopt' b'Harsha' b'restore' b'its' b'significant' b'short' b'test' b'of'
    b'Lucius' b'theorems' b'systems' b',' b'and' b'leading' b'losses' b'to' b'species' b'that' b'muscimol' b'depends' b'in' b'<unk>' b',' b'as' b'as' b'most' b'as' b'main'
    b'contributions' b',' b'have' b'so' b'widespread' b'during' b'a' b'regular' b'season' b';' b'they' b'is' b'rabbits' b'.' b'The' b'country' b'is' b'usually' b'known' b'as'
    b'one' b'of' b'a' b'blood' b'or' b'black' b'organization' b',' b'but' b'is' b'actually' b'differentiated' b'to' b'produce' b'their' b'mild' b'another' b'fast' b'appearance' b'.'
    b'Although' b'the' b'may' b'extend' b'in' b'dark' b',' b'it' b'may' b'also' b'be' b'used' b'by' b'threats' b'of' b'brown' b',' b'most' b'such' b'adorned'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Development' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'If' b'voices' b'are' b'known' b'to' b'be' b'only' b'significantly' b'before'
    b'they' b'are' b'<unk>' b',' b'they' b'become' b'Scarborough' b',' b'one' b'and' b'posed' b'for' b'dorsal' b'pain' b'.' b'As' b'quite' b'once' b'audiences' b','
    b'it' b'has' b'been' b'more' b'variable' b'Cheyenne' b',' b'or' b'T.' b'P.' b'\xce\xbaB' b',' b'6' b'near' b'<unk>' b',' b'booby' b'proportionate' b'and' b'Wang'
    b'beryllium' b'and' b'structures' b'under' b'Vanstabel' b',' b'redundant' b',' b'by' b'similar' b'users' b'how' b'the' b'heat' b'winter' b'excluded' b',' b'and' b'its' b'<unk>'
    b',' b'often' b'accepted' b'by' b'them' b'.' b'Common' b'starlings' b'can' b'be' b'discerned' b'to' b'be' b'road' b'.' b'Anek\xc4\x81ntav\xc4\x81da' b'usually' b'be' b'found' b'to'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 195.1
    loss: 5.168
    elapsed time (seconds): 105.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  7.764 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
