.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'inspect' b'Draper' b'for' b'Bronx' b'on' b'nations' b'.' b'On' b'the' b'same' b'eighth' b'years' b'he' b'<unk>' b'up' b'any' b'west' b'of' b'<unk>' b'recalls'
    b'knowing' b'themselves' b'to' b'construct' b'67' b'lines' b',' b'but' b'the' b'flame' b'was' b'reclaimed' b'by' b'the' b'younger' b'nature' b'of' b'Maugham' b'.' b'Upon'
    b'which' b'several' b'other' b'underground' b'actions' b'are' b'sent' b'to' b'Tomas' b'Westerns' b',' b'it' b'provoked' b'only' b'question' b'of' b'intensification' b'.' b'As' b'in'
    b'the' b'24th' b'century' b',' b'it' b'invites' b'performing' b'80' b'\xc2\xb0' b'years' b'and' b'its' b'plan' b';' b'the' b'Molecular' b'market' b'and' b'other' b'groups'
    b'were' b'already' b'<unk>' b'.' b'The' b'footage' b'remained' b'to' b'make' b'over' b'$' b'12' b'million' b'along' b'when' b'pre' b'@-@' b'111' b'researchers' b'are'
    b'identical' b'.' b'The' b'first' b'due' b'to' b'fired' b'developed' b'in' b'1923' b'and' b'Turkey' b'involved' b'in' b'be' b'boundary' b'in' b'the' b'efforts' b'of'
    b'romance' b',' b'though' b'his' b'consternation' b'allowed' b'them' b'to' b'establish' b'it' b'in' b'<unk>' b'society' b'in' b'Confederation' b'.' b'Joaqu\xc3\xadn' b'remaster' b'and' b'Magic'
    b'grounds' b'have' b'taught' b'rivers' b'such' b'and' b'O' b'Muldaur' b',' b'his' b'making' b'Wiccen' b'of' b'body' b'axe' b',' b'subsidy' b',' b'Zeebrugge' b'Matthew'
    b'W.' b'<unk>' b',' b'Hotel' b'<unk>' b',' b'Alfred' b'<unk>' b',' b'William' b"'Cruz" b',' b'Frank' b'<unk>' b',' b'and' b'The' b'rest' b'of' b'some'
    b'Peshkin' b'\xe2\x80\x93' b'electric' b',' b'<unk>' b',' b'and' b'humans' b',' b'or' b'of' b'inconsistent' b'to' b'a' b'novel' b'@-@' b'clockwise' b'drive' b'subspecies' b'.'
    b'The' b'criminal' b'term' b'wild' b'was' b'crushed' b'from' b'commercial' b'fields' b',' b'but' b'is' b'based' b'in' b'bearing' b'over' b'600' b'million' b'%' b'to'
    b'12' b'@.@' b'3' b',' b'been' b'directed' b'by' b'HIV' b',' b'Roman' b'Unit' b'and' b'ibis' b';' b'each' b'means' b'of' b'the' b'eight' b'novels'
    b',' b'which' b'confirmed' b'that' b'year' b'by' b'original' b'are' b'unknown' b'.' b'However' b',' b'at' b'times' b'in' b'the' b'Republic' b'of' b'Ulster' b','
    b'in' b'1897' b',' b'height' b'is' b'well' b'IOC' b'.' b'This' b'Eppley' b'thought' b'that' b'"' b'all' b'of' b'its' b'all' b'spiders' b'were' b'exponential'
    b'as' b'mobbing' b'or' b'there' b'is' b'good' b'such' b',' b'one' b'of' b'it' b'is' b'100' b'children' b',' b'at' b'what' b'they' b'have' b'no'
    b'completing' b'a' b'year' b'following' b'her' b'or' b'God' b'or' b'convection' b'\xe2\x80\x94' b'"' b'and' b'"' b'during' b'some' b'occasions' b'of' b'some' b'we' b'view'
    b'"' b'.' b'Jesus' b'has' b'already' b'become' b'in' b'many' b'legal' b'Liberator' b'and' b'other' b'fade' b'of' b'affections' b'to' b'the' b'abundance' b'of' b'habitat'
    b'in' b'South' b'Korea' b'and' b'Boise' b'City' b'.' b'Until' b'1885' b',' b'by' b'1906' b',' b'Guinness' b'has' b'been' b'developed' b'by' b'parrot' b'from'
    b'ABC' b',' b'which' b'would' b'be' b'given' b'with' b'a' b'moment' b'leading' b'to' b'hitherto' b'in' b'.' b'milestones' b'reached' b'his' b'longer' b'election' b'for'
    b'the' b'character' b'for' b'14' b'mph' b'(' b'4' b'@.@' b'4' b'in' b')' b'with' b'seven' b'cases' b',' b'planned' b'for' b'their' b'assassination' b'and'
    b'river' b'differences' b'.' b'He' b'seemed' b'to' b'manage' b'the' b'other' b'spots' b'on' b'all' b'I' b',' b'with' b'mostly' b'even' b'have' b'tobacco' b'vegetable'
    b'storage' b',' b'so' b'59' b'%' b'are' b'seated' b'in' b'the' b'Kaifeng' b'cause' b'.' b'Gaelic' b'starred' b'and' b'eight' b'other' b'name' b'favored' b'an'
    b'certain' b'R\xc3\xa9union' b'effect' b'to' b'identify' b',' b'accounting' b'their' b'961' b'metabolism' b',' b'but' b'as' b'it' b'claimed' b'fabulous' b'solely' b'.' b'Several' b'other'
    b'snakes' b'names' b'indicate' b'characters' b'from' b'a' b'deep' b'depends' b'between' b'Merenre' b'galericulata' b'.' b'Twenty' b'themes' b'needed' b'to' b'write' b'their' b'flight' b'"'
    b'necessitated' b'to' b'one' b'body' b'in' b'creative' b'they' b'eat' b'about' b'10' b'smaller' b'people' b'being' b'excuse' b'to' b'some' b'figure' b'and' b'other' b'British'
    b'and' b'beautiful' b'outlets' b'"' b'.' b'In' b'earlier' b',' b'the' b'kakapo' b'is' b'found' b'by' b'18' b'\xe2\x80\x93' b'51' b'\xce\xbcm' b',' b'and' b'supporting'
    b'@-@' b'lined' b'speculation' b',' b'constituting' b'it' b'a' b'case' b'into' b'Scientology' b'such' b'as' b'Omar' b'and' b'12' b'kilometres' b'(' b'<unk>' b'ft' b')'
    b'long' b'for' b'<unk>' b'sediment' b'which' b'achieved' b'a' b'star' b'@-@' b'up' b'or' b'force' b'switch' b'to' b'less' b'successful' b'.' b'<unk>' b'of' b'his'
    b'current' b'Hudson' b'is' b'allowed' b'to' b'be' b'a' b'rarity' b'.' b'Because' b'channeled' b'a' b'smooth' b'loop' b'or' b'some' b'other' b'officers' b',' b'the'
    b'female' b'was' b'heavily' b'impressed' b'in' b'2008' b',' b'seems' b'to' b'give' b'any' b'other' b'personalities' b'to' b'distract' b'@-@' b'bound' b'homes' b',' b'although'
    b'their' b'path' b'of' b'to' b'facing' b'the' b'ring' b'has' b'substantially' b'eat' b'reddish' b'owl' b',' b'largely' b'morale' b'over' b'their' b'own' b'gravitational' b'behaviour'
    b',' b'albeit' b';' b'to' b'have' b'fewer' b'females' b'they' b'could' b'be' b'of' b'disappear' b'.' b'Most' b'birds' b'were' b'killed' b'away' b'in' b'its'
    b'banks' b'.' b'<unk>' b'with' b'<unk>' b',' b'Jenna' b'sterile' b'the' b'physicist' b'of' b'Michigan' b',' b'but' b'is' b'display' b'of' b'the' b'fusion' b'expression'
    b',' b'despite' b'food' b'being' b'<unk>' b',' b'they' b'causes' b'patriarchal' b'flies' b'of' b'sexual' b',' b'moving' b'to' b'sheep' b'.' b'Meddings' b'attempts' b'to'
    b'develop' b'grouse' b'travelling' b'slightly' b'into' b'their' b'Word' b'\xe2\x80\x94' b'"' b'banning' b'their' b'feeling' b'recovering' b'calls' b'or' b'only' b'the' b'most' b'red' b'side'
    b',' b'a' b'reflection' b'arose' b'in' b'brass' b'.' b'"' b'Howson' b'came' b'on' b'.' b'An' b'same' b'combination' b'was' b'difficult' b'to' b'tell' b'anything'
    b'who' b'have' b'increased' b'down' b'an' b'relative' b'mention' b'instead' b'immediately' b',' b'which' b'are' b'reason' b'off' b'with' b'universal' b'parasites' b'that' b'can' b'commit'
    b'substance' b'.' b'They' b'gather' b'capabilities' b'from' b'both' b'flooding' b',' b'stamped' b'their' b'behaviour' b'to' b'control' b'well' b'.' b'The' b'resulting' b'range' b','
    b'relayed' b'in' b'him' b'located' b'problems' b';' b'<unk>' b'upon' b'iron' b'or' b'sucked' b'fireworks' b'in' b'the' b'form' b'for' b'raising' b'high' b'populations' b'of'
    b'kakapo' b'.' b'A' b'localization' b'of' b'breeding' b'measures' b'is' b'bowler' b"'s" b'neck' b',' b'a' b'female' b'@-@' b'core' b'lifestyle' b'curved' b'inside' b'a'
    b'bit' b'for' b'driver' b'Conrad' b'laureate' b'and' b'in' b'Shore' b',' b'concluded' b'to' b'have' b'been' b'known' b'by' b'distinct' b'.' b'<eos>' b'At' b'least'
    b'one' b'@-@' b'third' b'logs' b'were' b'broken' b'as' b'into' b'<unk>' b',' b'Germany' b',' b'blasting' b',' b'and' b'sporadic' b'Revival' b'.' b'The' b'same'
    b'known' b'necessary' b'players' b',' b'and' b'those' b'of' b'the' b'ground' b'being' b'introduced' b'by' b'4' b'million' b'\xc2\xb5m' b',' b'and' b'30' b'metres' b'('
    b'0' b'@.@' b'4' b'in' b')' b',' b'meaning' b'about' b'178' b'%' b'of' b'the' b'top' b'<unk>' b'rifle' b'hill' b'.' b'Where' b'other' b'of'
    b'its' b'way' b',' b'O' b'females' b'may' b'require' b'their' b'considerable' b'season' b'and' b'high' b'body' b'.' b'There' b'was' b'often' b'much' b'diminished' b'when'
    b'males' b'may' b'apply' b'to' b'accumulate' b',' b'with' b'other' b'justify' b'masses' b'plan' b'on' b'sized' b'stages' b'spread' b'.' b'Only' b'common' b'schools' b'('
    b'sometimes' b'highly' b'known' b'or' b'arc' b',' b'especially' b'small' b'yellow' b'ne' b'(' b't1' b')' b'.' b'The' b'foliage' b'themselves' b'said' b'that' b'"'
    b'soft' b',' b'acres' b',' b'krypton' b'and' b'vintner' b'asks' b'plastic' b',' b'and' b'have' b'hockey' b'crescendo' b',' b'development' b',' b'they' b"'m" b'interact'
    b'to' b'15' b'years' b',' b'at' b'attributed' b'a' b'tract' b'of' b'stuck' b'.' b'"' b'<eos>' b'In' b'the' b'common' b'language' b',' b'probably' b'the'
    b'small' b'symbol' b'goal' b'in' b'2012' b',' b'primarily' b'rebellions' b'who' b'may' b'enjoy' b'place' b'in' b'cellular' b'starlings' b'.' b'jackrabbit' b'consume' b'common' b'methods'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 211.8
    loss: 5.168
    elapsed time (seconds): 114.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  33.851 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
