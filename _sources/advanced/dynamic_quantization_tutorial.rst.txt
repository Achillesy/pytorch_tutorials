.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'" b'2004' b'uncle' b'Biographer' b'Chris' b'amphorae' b':' b'"' b'commas' b'"' b',' b'Richard' b'satisfaction' b',' b'and' b'Wally' b'Shoten' b'to' b'actually' b'Flemington'
    b'just' b',' b'and' b'has' b'"' b'Madison' b'impossible' b'"' b'focused' b'in' b'any' b'film' b'head' b'form' b'margin' b'.' b'The' b'show' b'is' b'a'
    b'anonymous' b'study' b'of' b'historian' b'branded' b'Liszt' b'as' b'of' b'the' b'end' b'of' b'All' b'centuries' b'.' b'Crash' b'realizes' b'"' b'routine' b'and' b'Those'
    b'frightening' b'good' b'critics' b',' b'"' b'Roddenberry' b'subalpine' b'Brian' b'<unk>' b'acquired' b'that' b'in' b'written' b'the' b'first' b'species' b'suggested' b'taken' b'preferred' b'of'
    b'<unk>' b'jani' b',' b'even' b'<unk>' b'aside' b'by' b'once' b'a' b'transit' b'of' b'Bohemia' b'at' b'a' b'Christian' b'age' b'into' b'a' b'independent' b'institution'
    b'and' b'one' b'or' b'which' b'are' b'an' b'Chevalier' b'permission' b'to' b'be' b'lowered' b'within' b'the' b'Konkan' b'coastline' b'.' b'It' b'has' b'potentially' b'spent'
    b'the' b'game' b':' b'The' b'Strait' b'is' b'a' b'people' b'of' b'Ceres' b'a' b'planet' b'"' b'formed' b'on' b'a' b'sound' b'of' b'characters' b'at'
    b'the' b'relation' b'"' b'and' b'a' b'"' b'French' b',' b'facto' b'metal' b'"' b'.' b'The' b'full' b'investigation' b'Guan' b',' b'also' b'yet' b'as'
    b'a' b'planet' b',' b'leaving' b'a' b'Anfield' b'female' b'defensive' b'plane' b',' b'which' b'can' b'have' b'well' b'X' b'activities' b',' b'speak' b'cross' b'several'
    b'children' b'.' b'The' b'island' b'version' b'it' b'has' b'been' b'able' b'by' b'Sampson' b'for' b'Shinnok' b',' b'which' b'still' b'describes' b'Lamar' b',' b'annal'
    b',' b'and' b'other' b'<unk>' b'the' b'last' b'dumped' b'factor' b'there' b'.' b'The' b'term' b'can' b'be' b'distributed' b'as' b'"' b'150th' b'"' b'nuclei'
    b',' b'and' b'it' b'is' b'few' b'historical' b'numbers' b'.' b'<eos>' b'Using' b'early' b'to' b'have' b'mounted' b'the' b'species' b'for' b'a' b'golden' b'season'
    b',' b'his' b'large' b'home' b'older' b'@-@' b'predators' b'adopted' b'Kurt' b'Leslie' b'cottages' b',' b'which' b'concluded' b'past' b'demonstrators' b'.' b'<eos>' b'In' b'an'
    b'controversy' b'@-@' b'year' b'Dota' b'Bowl' b',' b'over' b'spherical' b'eggs' b',' b'records' b',' b'cation' b',' b'error' b'and' b'thoughts' b'are' b'better' b'Liszt'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Education' b'=' b'=' b'<eos>' b'<eos>' b'Kitsune' b'have' b'harden' b'elements' b'and' b'remarkable' b'new' b'ornamentation' b'stable' b'for'
    b'characters' b'such' b'as' b'v.' b'Salmon' b',' b'which' b'seems' b'to' b'be' b'arrested' b'when' b'the' b'gesture' b'shows' b'they' b'were' b'turn' b'by' b'megalithic'
    b'or' b'<unk>' b'.' b'Heavy' b'species' b'serve' b'as' b'Convergence' b'<unk>' b',' b'Antonius' b'Agnes' b'Anneke' b'<unk>' b',' b'and' b'gunfire' b'<unk>' b'.' b'<eos>'
    b'Its' b'studies' b',' b'which' b'humiliation' b'the' b'name' b'active' b',' b'every' b'fictional' b':' b'No' b'gene' b'propulsion' b'"' b'<unk>' b'"' b'in' b'the'
    b'sky' b'and' b'sometimes' b'argues' b'that' b'they' b'might' b'the' b'lot' b'of' b'Precipitation' b'.' b'The' b'dark' b'people' b'goes' b'up' b',' b'not' b'when'
    b'(' b'or' b'some' b'are' b'so' b'set' b'of' b'Joe' b'Becker' b',' b'and' b'when' b'in' b'all' b'orbit' b'behind' b'this' b'voice' b'is' b'an'
    b'name' b'that' b'he' b'Elvis' b'softened' b'at' b'a' b'head' b')' b',' b'they' b'could' b'overthrow' b'the' b'show' b'.' b'A' b'unusual' b'Indiana' b'shrine'
    b'is' b':' b'Dr.' b'<unk>' b'and' b'<unk>' b'<unk>' b'(' b';' b'Males' b'<unk>' b')' b'coincided' b'at' b'Argentina' b'on' b'the' b'ground' b'.' b'He'
    b'be' b'smooth' b'to' b'protect' b'dressed' b'beyond' b'exotic' b'acres' b'.' b'<eos>' b'Further' b'notices' b'together' b'at' b'how' b'nest' b'trapping' b'becomes' b'the' b'natural'
    b'type' b'of' b'Antioch' b'"' b'vacancy' b'model' b'...' b'and' b'free' b'the' b'Puritans' b'we' b"'ve" b'him' b'so' b'to' b'be' b'If' b'it' b'somehow'
    b'agree' b'in' b'all' b'his' b'life' b'near' b'a' b'little' b'"' b'filter' b'feeling' b'for' b'whereas' b'other' b'<unk>' b'have' b'seen' b'.' b'They' b'discuss'
    b',' b'executing' b'stanza' b'publisher' b'Phylogeny' b'(' b'TFG' b'and' b'First' b'carpentry' b')' b'and' b'"' b'<unk>' b'Eu2O3' b'"' b'notes' b'Kurt' b'B.' b'<unk>'
    b'.' b'In' b'the' b'Whole' b'World' b'War' b',' b'God' b'<unk>' b'based' b',' b'his' b'host' b'as' b'his' b'agent' b',' b'whereas' b'is' b'revealed'
    b'by' b'art' b'or' b'<unk>' b',' b'however' b'.' b'The' b'same' b'role' b'is' b'forced' b'to' b'tell' b'mythology' b'for' b'a' b'female' b'(' b'EuS'
    b')' b'containing' b'a' b'white' b'ridiculous' b'or' b'commissioner' b'bird' b'.' b'However' b',' b'it' b'followed' b'it' b'prevail' b',' b'despite' b'mathematics' b'in' b'particular'
    b'.' b'Males' b'will' b'made' b'MPs' b'to' b'their' b'many' b'times' b'of' b'leakage' b',' b'and' b'felt' b'that' b'they' b'are' b'dark' b'(' b'asks'
    b'with' b'Kombat' b'Gandhi' b'Quraysh' b')' b',' b'in' b'which' b'privileged' b'larvae' b'comes' b'to' b'his' b'twigs' b'.' b'<eos>' b'The' b'vision' b'of' b'Ceres'
    b'are' b'classified' b'to' b'have' b'been' b'mistaken' b'to' b'detail' b';' b'they' b'may' b'be' b'written' b'by' b'Whittaker' b',' b'such' b'as' b'nomads' b','
    b'or' b'hail' b'.' b'According' b'to' b'clicking' b',' b'necessary' b'are' b'sometimes' b'grows' b',' b'without' b'her' b'intention' b'that' b'God' b'believes' b'another' b'mixture'
    b'of' b'Ceres' b'that' b'she' b'studied' b'there' b'.' b'People' b"'s" b'eyes' b'lived' b'by' b'the' b'foul' b'planet' b'and' b'may' b'continue' b'to' b'be'
    b'the' b'same' b'as' b'an' b'sort' b',' b'with' b'some' b'is' b'easy' b',' b'with' b'many' b'species' b'of' b'their' b'<unk>' b',' b'which' b'often'
    b'proposes' b'a' b'width' b'prior' b',' b'or' b'as' b'"' b'IR8' b'"' b'.' b'resided' b',' b'they' b'made' b'also' b'conservation' b'rates' b'of' b'them'
    b'where' b'their' b'faith' b'<unk>' b'of' b'300' b'%' b'of' b'Ceres' b'(' b'such' b'as' b'concurrent' b'during' b'modern' b'parents' b'and' b'a' b'large' b'landings'
    b')' b'.' b'One' b'females' b'gave' b'survey' b'that' b'the' b'female' b'object' b'with' b'the' b'dark' b',' b'a' b'Chulkhurst' b',' b'or' b'pair' b'of'
    b'three' b'Melody' b'specimen' b',' b'FITs' b',' b'two' b'months' b',' b'surrounded' b'trees' b'remarked' b'that' b'making' b'him' b'"' b'present' b'.' b'"' b'<eos>'
    b'When' b'urges' b'by' b'pinkish' b'beings' b',' b'when' b'Grisham' b'explains' b'dark' b'attitude' b',' b'they' b'emerged' b'towards' b'doping' b'on' b'going' b'that' b'or'
    b'"' b'they' b'get' b'the' b'head' b'of' b'starling' b'and' b'not' b'<unk>' b'obviously' b'.' b'"' b'Females' b'in' b'foreigner' b'spawning' b'"' b'The' b'domain'
    b'of' b'<unk>' b'"' b'.' b'When' b'was' b'Zinc' b',' b'as' b'another' b'son' b',' b'Rory' b'of' b'<unk>' b'Robinson' b',' b'is' b'listed' b'by'
    b'30' b'Morris' b',' b'to' b'a' b'total' b'of' b'Statement' b'.' b'As' b'a' b'result' b'comprise' b'due' b'to' b'<unk>' b',' b'he' b'replies' b'that'
    b'"' b'it' b'/' b'not' b'a' b'deep' b'conversations' b'and' b'a' b'fascination' b'no' b'<unk>' b',' b'without' b'them' b'those' b'fly' b',' b'to' b'narrower'
    b'people' b',' b'albeit' b':' b'Christian' b'life' b',' b'most' b'sort' b'of' b'causes' b'vary' b'before' b'this' b'Burger' b'is' b'albeit' b'significantly' b'.' b'"'
    b'<eos>' b'fonts' b'was' b'raised' b'from' b'hypotheses' b'being' b'known' b'by' b'<unk>' b',' b'Kawai' b'.' b'There' b'are' b'highly' b'no' b'spots' b'of' b'any'
    b'life' b'as' b'"' b'very' b'painful' b'habitats' b'of' b'Parvati' b'.' b'"' b'Power' b'<unk>' b'describes' b'Frustrated' b'<unk>' b'such' b'as' b'Ceres' b'(' b'Amanita'
    b'Cross' b'<unk>' b':' b'"' b'One' b'Doctor' b',' b'breast' b'and' b'<unk>' b')' b'and' b'<unk>' b',' b'were' b'a' b'gills' b'of' b'sex' b'and'
    b'dog' b'@-@' b'scrub' b'sports' b'\xe2\x80\x93' b'Those' b',' b'and' b'they' b'can' b'have' b'captured' b'the' b'<unk>' b'of' b'other' b'<unk>' b'as' b'commercialism' b','
    b'work' b'with' b'pre' b'@-@' b'fold' b',' b'with' b'<unk>' b'Michael' b';' b'<unk>' b'him' b'always' b've' b'tree' b'.' b"'" b'The' b'<unk>' b'involve'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.1
    loss: 5.168
    elapsed time (seconds): 141.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  0.514 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
