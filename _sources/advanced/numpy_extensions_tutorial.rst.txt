.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.0560,  2.0176,  5.4872,  8.9496,  2.8411],
            [ 7.7003,  3.9708,  9.9880, 18.1787,  2.7685],
            [ 8.0876,  5.8372,  8.4886,  5.4669,  6.2396],
            [ 8.7047, 10.1094,  4.9253, 10.7692, 11.8888],
            [ 8.5042,  9.6633,  3.4880,  4.5430,  3.7789],
            [ 8.7047, 15.4274,  5.9236,  6.5500, 11.8888],
            [ 8.0876,  8.9701,  6.4490,  2.0625,  6.2396],
            [ 7.7003,  2.3434,  6.9790,  6.5591,  2.7685]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7820, -0.1573,  0.3028, -0.0555, -0.3583, -0.5898,  2.0104, -1.1383],
            [-1.5034, -0.5000, -0.9443,  0.9567, -1.4941,  0.1665, -0.9471, -0.3616],
            [ 0.6442,  0.1951, -0.1831, -0.8970,  1.3214,  0.1831,  0.3597,  1.0707],
            [ 1.0596, -0.7635, -0.2964, -0.2970, -0.4248, -0.7641, -1.9782,  0.0701],
            [-0.4687, -1.1888,  0.7227,  0.6486,  0.8738,  0.9962, -2.5517,  0.5125],
            [-1.2939, -0.3309,  0.1690, -1.8076, -0.0089, -0.3091,  1.1523,  2.0522],
            [-0.4124,  1.2151,  2.0854,  0.9212, -0.0292, -0.3278, -1.4386,  0.2396],
            [ 0.4935,  1.2185, -0.3763,  0.0586,  1.0161, -1.3123,  1.3317,  1.1884]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1624, -0.3755, -0.3739],
            [-0.1585,  0.4519,  0.2928],
            [ 0.4201, -0.8326, -0.3391]], requires_grad=True), Parameter containing:
    tensor([[-0.4359]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.6392, -1.9644, -0.1019, -0.4674, -1.6808, -1.1408, -0.8933,  0.6486],
            [ 0.9429,  0.4614, -0.4708,  0.0139, -1.1853, -0.0823,  0.6601, -1.1452],
            [ 0.4201, -1.2357, -1.7413, -0.1934, -0.6760,  0.1469,  0.8320, -0.7640],
            [-1.2150, -1.3398,  0.0974, -0.1344, -2.4951,  0.5983, -1.9262, -0.6848],
            [ 2.6200, -0.2253, -1.5580,  0.6524, -0.1560, -0.9318,  1.8983,  0.0679],
            [-1.6068,  2.3904,  1.0367, -1.2439, -0.9983,  3.0297, -0.4532, -1.4043],
            [ 0.1701, -2.2764, -0.7379, -0.5708, -1.8295, -1.9472,  0.6915, -0.1009],
            [ 1.7318,  0.0805, -0.5452,  1.5261,  2.5438,  0.6511, -0.3885, -0.5357]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.9498e-01, -5.0805e-01, -6.3051e-01,  6.1734e-02,  5.5161e-01,
              7.6336e-01,  3.8573e-01,  7.3571e-01,  4.8301e-01,  2.1137e-01],
            [-1.5891e-01,  5.8930e-01,  6.1832e-01,  6.4304e-01, -7.6792e-01,
             -1.8228e-01,  2.1864e-03, -1.0713e-01, -1.0484e-01, -8.2022e-03],
            [ 5.9027e-01, -1.0361e+00, -1.1604e+00, -1.7969e+00,  1.7414e+00,
              7.1317e-01,  1.3691e+00,  1.3292e+00,  5.6499e-01,  5.0662e-01],
            [-1.7650e-02, -6.1995e-01, -2.7980e-03, -2.5022e-01,  1.9883e-02,
              3.2834e-01, -1.0541e+00, -9.6289e-03, -3.3229e-01, -9.6818e-01],
            [-1.0807e-01,  9.2034e-01,  5.0766e-01,  1.4271e+00,  6.1918e-01,
             -9.8243e-01,  2.8243e+00, -4.4556e-01,  1.6403e+00,  9.8484e-01],
            [-2.7439e-01,  4.5931e-01, -2.3725e+00, -2.3464e+00, -7.8035e-01,
              1.1352e-01, -5.1133e-01,  1.2703e+00, -1.5703e+00, -2.6213e-01],
            [-2.9983e-01,  1.9749e-01,  9.0565e-01,  1.2374e+00,  1.0968e-01,
             -1.2964e-01, -7.2761e-01,  9.9735e-01,  1.7095e-02, -7.5829e-01],
            [ 7.2128e-01, -1.9608e+00, -3.2898e-01,  7.3460e-01,  3.3182e-01,
             -6.3436e-01,  1.5082e+00, -2.2193e+00,  3.7725e-01,  9.4739e-01],
            [-1.2114e-01,  5.9568e-01, -6.2353e-01,  6.0505e-01, -2.1277e-01,
             -1.6905e+00, -1.5615e+00,  2.3261e+00, -3.1915e-01, -5.6288e-01],
            [ 7.0126e-02,  1.4230e-01, -7.2453e-01, -3.5241e-01,  7.5080e-01,
              4.5978e-01,  3.4216e-01, -1.5827e+00,  4.3407e-02,  2.1674e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.843 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
