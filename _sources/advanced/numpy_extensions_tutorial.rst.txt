.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.4803,  0.5775,  0.9656, 14.3128,  1.2022],
            [ 5.1878,  1.4166,  3.8377,  3.8222,  5.6533],
            [ 9.0133,  6.0989,  8.1558,  9.8437,  9.8788],
            [13.1294, 11.5469,  7.5066,  7.4406, 10.6146],
            [14.6972, 10.2379, 11.6854, 11.7195,  6.8193],
            [13.1294,  3.1583,  2.6007,  8.2820, 10.6146],
            [ 9.0133,  2.5579,  6.9184,  1.5480,  9.8788],
            [ 5.1878, 10.3353, 10.7638,  7.8201,  5.6533]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.5864,  0.5616, -1.5994,  0.4450,  0.5254,  1.2220, -0.4418, -1.6443],
            [ 0.4041, -0.0782,  0.2396,  1.3790, -1.2911, -0.3688, -0.9083,  0.2256],
            [-0.2381, -0.7615,  0.4447,  0.0333,  0.2333,  0.6580,  0.9022, -0.0603],
            [-0.7778, -0.0542, -0.0399, -0.0311, -0.2779,  0.9084,  0.6079,  0.8169],
            [ 1.2123, -0.1012, -0.3249,  0.3087,  0.4607, -0.1661,  0.7252,  0.0241],
            [ 0.2557, -2.4672, -1.0890,  1.2199, -3.7067, -0.7708, -0.9444, -0.3151],
            [ 1.6805,  0.8762,  1.1582, -0.3695,  1.6317,  0.5986, -0.8250, -0.4747],
            [ 2.2716, -0.5691, -0.1594, -0.6387, -1.7496, -0.4249,  0.3654, -1.6206]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8921, -2.1399, -0.9800],
            [ 0.9141, -0.6256, -1.6888],
            [-0.7885,  0.4062,  0.6155]], requires_grad=True), Parameter containing:
    tensor([[-0.4333]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8026,  1.4119,  0.7520, -5.5634,  1.4824, -2.1293,  2.5482,  3.3864],
            [ 3.2355, -1.3469,  4.3544,  0.7636, -0.5476,  2.9260, -3.6860,  0.5070],
            [-2.8828,  1.9814, -1.6521,  1.6954,  0.2656,  1.7835, -1.2219, -6.5301],
            [-4.2868, -3.7698,  4.4968,  0.0651,  3.9905, -2.8962, -4.4673,  1.0400],
            [-1.7852, -0.7873,  5.2084,  2.1436, -1.3374, -6.9332, -0.5971,  6.9498],
            [-0.6081,  0.7996, -0.0707, -0.9487,  1.4525, -4.3539,  1.4288,  0.1104],
            [ 0.7791,  2.4805, -1.1964, -0.2248,  5.1431,  0.6750, -5.3528, -5.8449],
            [-3.3822,  2.3279, -1.1897,  0.3513,  1.8733,  1.3401, -0.8930, -5.4807]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.0772e-01, -1.5226e-01,  1.3039e+00,  2.0022e+00,  1.9667e+00,
             -6.4940e+00,  3.3999e+00,  1.9053e+00,  9.3460e-01,  4.4853e-01],
            [-1.0622e+00,  1.6562e+00,  1.3823e+00,  5.4028e-01,  1.4050e+00,
             -1.9427e+00, -1.2685e+00,  3.1863e+00, -7.7027e-01,  4.4570e-01],
            [-2.8350e-01,  1.6175e+00, -1.6372e+00, -3.9060e+00, -8.6217e-01,
              1.6869e+00,  1.8851e+00, -1.3178e+00,  3.0222e+00,  7.4564e-01],
            [ 1.2483e+00, -3.8089e-01, -6.8097e-01, -2.2793e+00,  1.8945e+00,
             -1.4841e+00,  5.3373e-01, -1.1804e+00,  2.2423e+00,  3.4246e+00],
            [-1.1835e+00,  2.3654e+00, -3.7416e+00,  3.4680e+00, -1.8245e-01,
             -7.0699e-01,  2.1404e+00, -5.9109e-03, -2.2812e+00, -1.0162e-01],
            [-2.0014e+00,  7.2272e+00, -3.2291e+00, -2.9727e+00, -4.2715e+00,
              7.6249e-02, -6.8348e-01,  1.2747e-01, -1.5839e+00, -6.8127e-01],
            [-8.0627e-01,  1.6405e+00,  1.9256e+00, -2.1288e+00,  2.4239e+00,
             -3.4120e-01,  2.2357e+00, -1.8326e+00, -4.4371e-02, -6.4543e-01],
            [ 4.6820e-01, -4.8221e-01, -9.7600e-01, -6.5902e+00,  2.1151e+00,
              5.2146e+00,  5.1973e+00,  1.0177e+00, -2.2147e-01,  1.2356e+00],
            [ 7.4120e-01,  2.0618e-01, -6.6626e-01, -3.7505e-02, -2.3399e+00,
             -2.1504e+00,  6.8198e-01,  2.6994e+00,  1.0556e+00,  5.5103e-01],
            [-1.8259e-01, -7.0498e-01,  2.8464e-02,  1.0421e+00,  8.0054e-01,
              8.4691e-01, -8.3706e-01, -6.7308e-01, -2.8972e-01, -2.6598e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.812 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
