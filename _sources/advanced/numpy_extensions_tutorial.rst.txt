.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0637,  3.0662,  6.9502,  6.6968,  1.4698],
            [ 6.6188,  6.1580,  5.3132,  8.6248,  4.0515],
            [17.6546,  6.8934,  5.0325,  6.7132,  4.9420],
            [ 5.0334,  2.5547,  2.9695,  2.3299,  7.7198],
            [ 0.5994, 13.4455, 14.5598,  3.4925,  0.8098],
            [ 5.0334,  8.8838,  4.5635,  5.5555,  7.7198],
            [17.6546,  6.7470,  9.7899,  3.1509,  4.9420],
            [ 6.6188,  9.2348, 15.9192,  2.1321,  4.0515]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3476, -0.4416, -0.9606,  1.7319,  1.1119,  0.1437, -1.9604, -0.5124],
            [-0.1014, -0.8830, -0.8819, -1.8429, -1.5107,  1.3842,  0.1654, -0.6507],
            [ 1.0025,  2.1661,  0.6959, -0.9710,  0.8301, -0.5677, -0.6870,  0.1910],
            [-1.5656,  0.3581,  0.5324, -0.1258, -0.6500,  0.2690,  0.8352,  1.5696],
            [-0.5671, -0.9146, -0.4695,  0.2301, -0.6210, -2.4977, -1.0552,  0.0161],
            [-0.7544,  0.4144,  0.6247, -1.0584, -1.1608, -1.0317,  0.2719,  0.6588],
            [ 0.2013, -0.0264,  0.6655,  1.1993,  0.8549, -1.0077,  0.7753,  1.0599],
            [ 0.1105, -0.4962,  0.2673,  0.8827,  1.0439, -0.2637,  1.5378,  0.7198]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.3581,  0.5133, -0.7527],
            [ 0.9134,  0.5717,  0.2244],
            [ 1.2156,  0.6510, -0.6266]], requires_grad=True), Parameter containing:
    tensor([[0.8896]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0621,  1.2196, -2.5983,  3.3658,  0.8462,  2.6609,  2.7208,  1.3548],
            [ 1.8668, -1.2113,  1.2294, -1.6479,  1.3864, -3.3741, -1.2246, -2.4114],
            [-1.3228, -1.2686, -0.4126,  1.7388, -4.5138,  8.0235,  1.0410,  6.2376],
            [ 2.9593,  0.5818,  0.2537, -0.3189,  3.3482,  1.3159,  0.4231,  1.4464],
            [ 3.9039,  4.0290,  1.8872, -3.4234,  0.7935, -2.1391, -4.2363, -1.9884],
            [-1.3109,  3.0226,  2.0360,  0.7639, -1.1325,  1.7664,  0.2285,  1.0548],
            [-1.7478,  6.5939,  5.4982,  3.2054,  6.4849,  1.4942,  6.3594,  2.3694],
            [-1.7303,  1.4406, -3.4785, -1.2688,  0.5803,  0.8789, -2.7702,  3.7505]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.3240,  0.7349, -2.3617,  2.5879, -2.3751,  2.2673,  2.1850,  0.0792,
              1.3900,  0.3862],
            [ 1.1821,  0.7239, -0.5755,  1.2850, -3.0453,  0.4152, -2.0546,  3.6898,
             -2.4981,  3.2609],
            [ 2.1955,  0.4016,  0.9261,  0.9990, -2.4841,  3.4506, -3.3484, -3.7897,
             -1.5986,  0.6501],
            [-2.2779,  0.7729, -2.8991, -0.0716, -0.2396, -0.2368, -3.2650, -6.9567,
             -4.5719,  3.4620],
            [-0.9154, -2.5643,  3.0508,  2.4936, -3.1744,  3.0940, -5.0615, -2.9768,
             -1.3124,  1.3357],
            [ 2.8299,  0.8537,  1.4896,  0.3852,  5.0256, -2.0520,  1.9408, -2.5208,
             -1.8846,  1.2198],
            [-0.6236, -0.0098, -2.4216, -0.2690,  6.9509,  4.2811, -0.9280, -2.4659,
              0.0410, -0.2861],
            [-1.6582, -1.6431, -0.4116,  5.1367,  3.0427, -4.7065,  1.5902, -3.7146,
             -0.1578,  0.1679],
            [ 0.7491, -0.5997, -0.6558,  2.1255,  0.0214,  0.7342,  1.1462,  2.1549,
              1.2056, -0.3574],
            [ 0.6200, -0.2360, -1.1277,  0.5215,  0.0883,  2.6265,  2.3350, -0.6824,
              0.1431, -0.3555]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.539 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
