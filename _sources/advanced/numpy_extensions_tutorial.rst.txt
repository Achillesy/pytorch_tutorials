.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.9442,  4.5119, 13.6178,  3.0672,  0.5067],
            [ 5.5350,  4.9648,  3.7592,  2.3034,  3.7553],
            [ 7.9261, 13.2264, 14.2754,  7.1659,  6.6106],
            [ 2.9258,  6.9457,  2.8975,  4.3845, 10.7902],
            [10.9403, 10.2672,  9.3476,  7.1801,  5.2966],
            [ 2.9258,  7.1278,  3.5520,  2.8319, 10.7902],
            [ 7.9261,  4.7694,  6.4311,  4.8048,  6.6106],
            [ 5.5350,  1.4427,  7.5453,  4.0393,  3.7553]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7454,  0.7284,  0.6583,  0.8194,  0.5193,  0.7276,  0.4223, -0.1299],
            [ 0.3048,  1.4855,  0.5193, -0.0566, -0.6294, -0.3482, -0.5826, -0.3285],
            [ 0.7530, -0.3256, -0.9219, -0.9010,  0.6488, -0.1463,  1.0613, -0.4255],
            [-2.0589, -0.9489,  1.6226, -0.0589, -1.5395,  0.8704, -0.4691, -0.5253],
            [-0.2809,  1.7718,  0.8492, -0.7874, -0.9009,  1.0505, -0.0854,  0.7313],
            [ 0.6291,  0.0944,  0.5607, -0.2048, -1.1391, -1.2916, -0.6646, -1.3763],
            [-0.5501, -0.3233, -1.0492, -0.8610, -0.6219,  0.2064,  0.5449,  0.5610],
            [-0.4528, -1.8345,  1.5913, -0.2438, -1.5470, -1.0560,  1.3347,  0.4011]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0579, -1.2446,  0.8830],
            [ 0.1655,  1.8147,  0.9072],
            [ 1.3619, -1.5026, -2.0797]], requires_grad=True), Parameter containing:
    tensor([[-0.2234]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.4180, -1.1962, -3.4346,  2.0418,  0.4181,  1.5595, -0.2098, -5.3137],
            [ 2.5336,  1.1606, -4.1091, -6.1686,  1.2295, -3.5625,  2.6004,  1.6871],
            [-1.3276, -2.2730, -0.8639,  2.3384,  0.4603,  2.6474, -4.3527, -7.6741],
            [ 1.5906,  0.1909,  7.7569, -2.7039, -1.9550,  2.1475, -1.3611, 11.7300],
            [ 2.9872, -0.6087, -5.5183, -2.7734,  2.5387,  0.2450,  2.7738, -8.4183],
            [-4.3915, -4.9128, -3.2621,  4.4444,  1.5819, -0.6586, -1.1712, -1.5669],
            [-0.3682,  6.2461,  5.6941,  1.0970, -5.8598, -4.0131,  2.1030, -1.9723],
            [-1.3030, -1.2557, -3.7238,  0.3966,  2.4449,  0.8742,  2.4695,  2.2664]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -0.0579,  -1.2029,   1.7620,  -0.1682,   0.5621,   2.0241,  -2.9841,
               1.4752,   1.3973,  -1.2748],
            [  0.2351,   3.1680,  -2.2143,  -3.5441,  -1.4210,  -2.2540,  -1.5329,
               1.6091,  -5.3603,  -0.3363],
            [  1.0516,  -6.9147,  -0.0997,   7.0155,   1.4346,   8.0225,   1.2964,
              -2.2900,   3.4707,   3.4310],
            [ -1.2751,   7.2104,   7.6851,  -6.9144,  -3.7937,  -4.8963,  -1.0850,
              -1.5854,  -2.6507,  -2.5995],
            [  2.4462,  -3.5502, -10.3002,   2.0993,  -0.6644,   1.2007,   1.1957,
              -2.1021,   3.3417,   3.1225],
            [ -1.4115,  -2.7675,   7.8994,   0.9018,   0.6155,  -0.5237,  -4.0432,
               5.1663,   2.3452,   0.5276],
            [ -0.5402,   4.5405,   2.5040,  -2.0810,  -5.0854,   0.9633,   5.9362,
               0.7688,  -7.8784,  -3.1698],
            [  1.4024,  -2.0695,  -2.7905,  -1.5448,   1.2125,   2.8937,  -8.0343,
              -1.6696,   7.4200,   1.2990],
            [ -0.7134,   1.4300,   0.9801,   1.8004,  -2.1394,  -5.5608,   2.3312,
               7.2479,   0.6819,  -1.8231],
            [  0.0362,   0.6257,  -0.8206,  -0.6734,  -2.4770,   2.2654,   5.0451,
              -3.1074,  -2.8169,   0.4846]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.502 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
