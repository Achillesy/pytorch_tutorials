.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.9793,  5.6556, 11.1960, 11.0949,  7.3047],
            [10.9661,  5.9856,  8.4554,  6.7845, 13.0336],
            [ 8.0049,  3.8655,  4.6821,  8.1223, 10.8366],
            [ 2.0472, 20.1915,  2.4571,  3.4249,  2.6003],
            [ 7.7220, 10.7754,  3.0141,  5.7559,  3.1095],
            [ 2.0472,  8.9774,  9.3635,  5.9243,  2.6003],
            [ 8.0049,  0.9265,  6.0204,  3.9788, 10.8366],
            [10.9661,  3.8655, 12.5340,  4.1588, 13.0336]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8027, -0.2997,  0.4090, -0.4916,  0.2921, -0.6381, -1.2632,  0.8571],
            [ 1.0513,  0.3876,  0.1819, -1.2713,  0.2563,  0.8331,  0.0377, -0.2935],
            [-0.2873, -1.3825,  1.9026, -0.9178,  1.0314, -0.0303, -1.4477, -1.8653],
            [ 0.9411,  0.8931,  0.0670, -2.3696,  0.7268,  0.3515,  1.3417,  0.6345],
            [-2.5292,  1.5416,  1.6968,  0.8744,  1.2754,  2.0478,  0.6201, -0.5012],
            [ 1.2061,  1.6298,  0.5164,  1.6461, -0.7349,  0.6218, -0.1165,  0.6601],
            [ 0.7233,  0.4930, -0.9269, -0.6478,  0.7188,  0.0798, -0.9049,  0.8959],
            [ 0.6230, -0.1031,  1.0481, -0.3019,  1.5154, -0.4045, -1.1325, -0.5919]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9683,  0.2958,  0.1583],
            [-0.8206,  0.3977,  0.0817],
            [ 0.6205, -0.3146,  0.7764]], requires_grad=True), Parameter containing:
    tensor([[-1.3957]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.3754, -1.2373, -0.3589, -2.6761,  1.2929, -1.3202, -2.3016, -3.9169],
            [ 0.4282, -2.0550,  0.5010, -1.0514, -0.7934, -4.1144, -4.6418, -1.9360],
            [-3.3585,  0.9591, -1.0645, -3.3477, -1.1308, -3.9873, -3.0812,  0.4007],
            [-0.2815, -3.2069, -1.4880, -3.4692, -2.8016, -4.6316, -0.1966,  0.2249],
            [-1.1200, -2.6079,  0.5954, -1.0194, -3.1490, -5.0444,  1.8440, -1.9061],
            [-3.6918,  0.0412, -4.5492,  2.1894, -1.0499, -2.6508, -5.5600, -1.3550],
            [-1.5533, -3.9109, -4.2273, -0.7771, -0.9795, -4.8081, -4.1756,  0.5445],
            [ 2.1868, -3.1388, -1.0429, -2.7530,  0.3329, -2.5148, -0.0593, -1.2769]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.8301, -0.4494,  0.9882,  0.2961, -0.7056, -1.1237,  1.0866,  0.6624,
             -0.1744, -0.0561],
            [ 0.8047, -0.7687,  3.5868, -1.0725,  1.8757,  0.4028,  2.0231,  2.4297,
             -0.7119, -0.2395],
            [-4.6478,  4.8145, -2.3681, -1.1161,  0.5760,  2.9706, -3.1309,  3.2036,
             -0.8825, -0.5376],
            [-0.9636,  2.9594, -4.7502,  1.9521, -3.6214,  3.1273, -1.2503, -1.8770,
             -0.4272, -0.9694],
            [ 3.6081, -5.0040,  2.7198,  0.1612, -1.1140, -1.1784,  0.4222, -3.7420,
              2.0342, -0.6130],
            [-1.3389,  0.8027,  6.4569, -0.6095,  3.1241, -4.5149,  1.9658,  1.5664,
             -1.1389,  0.6353],
            [-0.0837,  3.4315, -1.6207,  1.5538,  5.4486, -3.6642,  2.9187, -2.6158,
              0.7655,  0.5376],
            [ 0.5861,  0.0922,  0.3735, -0.4276,  0.1232, -2.6227, -1.1008,  2.3325,
             -0.4875, -0.5693],
            [-0.5515,  0.0706,  1.5892, -2.6329,  1.1472, -1.2398, -1.1875,  2.5805,
             -1.4235,  1.1652],
            [ 0.1386, -0.2448, -0.5984,  0.6247, -1.9787,  1.6219, -1.4911,  0.2112,
              0.1415, -1.0745]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.525 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
