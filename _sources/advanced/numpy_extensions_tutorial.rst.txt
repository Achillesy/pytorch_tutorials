.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0630, 13.6754, 14.9896, 10.1354,  3.9992],
            [ 5.9020,  3.6461, 16.9572,  9.5120, 11.8516],
            [ 2.6375,  7.6639,  3.6598, 14.1120,  4.8964],
            [13.4965,  4.0012,  4.5461,  5.3210,  3.5366],
            [ 9.4761, 12.5433,  4.7083,  9.6477,  7.3042],
            [13.4965,  1.7788,  6.1763,  4.0654,  3.5366],
            [ 2.6375,  6.4225,  4.3812,  5.3618,  4.8964],
            [ 5.9020,  9.8730,  5.8667,  3.9225, 11.8516]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6666, -0.3352, -0.1432, -0.7349,  0.7817,  1.0686,  0.0330, -1.0821],
            [-0.3680,  0.4324,  1.0239,  1.0490,  1.5554, -1.5714,  0.3387, -0.8192],
            [-0.7102, -0.6634,  0.6345, -0.5168,  0.8175, -0.5260,  0.1791,  0.1500],
            [-1.0395,  0.5511, -0.8176,  0.9025, -1.6770, -1.4410,  0.8554, -0.8345],
            [ 0.1546,  0.6162,  0.2785, -0.8705, -0.2139,  1.8952,  1.0086, -0.4376],
            [-1.9748,  1.4801,  0.8832, -1.2139, -0.7403,  0.1401, -2.9678, -1.3522],
            [-1.5768,  2.0594,  1.4885, -0.9113,  0.8618,  0.9352, -0.2477,  0.3803],
            [-0.7711,  1.7401, -0.7705,  0.9981,  1.4089,  1.1162, -0.6496, -1.2363]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4061,  0.9645, -0.2266],
            [-0.5618,  2.0094,  0.6842],
            [ 0.6147,  0.3648,  0.1002]], requires_grad=True), Parameter containing:
    tensor([[1.5104]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.9937,  0.7226,  0.8986,  2.5420,  1.4405,  6.0665,  2.7810, -4.5160],
            [ 6.0353, -0.2417,  1.4725,  3.5521,  0.8960,  5.3623, -5.8880, -4.2092],
            [ 1.0201, -2.5252,  1.7177,  3.6682, -1.3057,  1.6392, -3.0983, -1.3185],
            [-1.7636,  3.4200, -0.0660,  2.7579,  0.3464, -0.4888,  2.4682,  1.6013],
            [-0.9528, -0.9995,  0.8678,  0.5068, -2.5985,  1.2144,  0.9495,  3.8573],
            [ 3.4484, -3.6587, -3.6160,  0.9469, -0.9670,  3.5007,  1.6966,  7.2930],
            [ 0.6439, -1.5425, -2.3410,  0.7911,  2.3043, -1.5870,  0.9748,  0.5436],
            [-0.7345, -1.2221,  3.1262,  1.0619,  0.4178,  3.2980,  4.2925, -0.3748]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5080,  2.0055, -2.1572,  0.8027, -1.3798,  0.7563,  0.3463,  1.2154,
             -0.9965,  0.1701],
            [-0.8352,  3.1289, -1.4068, -0.6324, -3.1011,  0.3733,  1.5671,  4.9116,
             -2.5688, -0.0933],
            [ 0.8989, -2.0070,  3.4153,  2.1828, -0.7557,  0.7726, -2.6823,  2.3882,
             -4.3610, -1.1778],
            [ 0.2077,  1.0790, -0.5359,  1.2188, -0.7543,  0.5096,  0.3008, -1.7397,
             -1.6168, -0.7624],
            [-1.4815,  3.1540, -0.6308,  0.8332, -1.5477, -3.3108,  3.3965,  2.7984,
             -0.5527,  0.3355],
            [-0.0508,  1.6738,  1.5086,  1.8061, -2.5012,  1.2733, -0.2674,  1.5387,
             -0.9648, -0.4087],
            [ 0.0211,  2.0707,  1.9565, -0.4216, -0.1592,  0.7942,  2.4775, -3.0562,
             -1.6366, -0.4626],
            [-0.9177,  3.6448,  1.6194, -0.1584, -2.5321, -0.7206, -1.7074, -3.3532,
              0.7108, -0.2409],
            [ 0.0304,  2.6668,  1.4946, -1.6601, -3.8202, -1.0749, -1.6657, -0.9492,
              2.9235,  0.9792],
            [ 0.7131,  0.5413, -0.3149, -1.0173, -0.4875, -0.3415, -0.0183,  0.8944,
              0.5315,  0.1407]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.880 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
