.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.9044,  8.1806,  7.4061, 13.1574,  7.7023],
            [ 7.2729, 13.6988,  4.9410,  7.2878,  3.4351],
            [11.5501,  1.5027,  5.0359,  2.2705,  8.4319],
            [ 7.3136, 10.8605,  0.6345,  5.3463,  6.2606],
            [ 4.6673,  9.3247,  9.7045,  4.9198,  2.4767],
            [ 7.3136, 11.6464,  3.6850,  7.9178,  6.2606],
            [11.5501,  2.9888,  6.9054,  4.0793,  8.4319],
            [ 7.2729, 12.6530,  9.2981,  4.3670,  3.4351]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.4108, -0.1214,  1.0571, -0.8337, -1.6370,  0.4516,  0.1329,  1.4683],
            [ 0.2222,  0.2648, -1.0701, -0.9520, -1.7858,  0.7205, -0.1302,  1.6062],
            [-0.6572, -0.5260,  1.5807,  0.1802, -0.0163,  0.3536,  0.4871,  1.9684],
            [ 2.1798, -0.2063,  0.9553,  0.1449,  0.1802, -1.4446, -0.3247,  1.4801],
            [-2.1688, -1.5207,  0.3403,  0.3647,  0.3178,  0.7159, -1.5823, -1.1590],
            [ 0.3119,  0.3885, -0.3053,  0.2494,  0.0297,  0.2009, -1.3478,  0.2026],
            [ 1.4241, -0.0023,  0.1025,  1.3574, -0.7224,  0.0447, -0.5665, -0.6261],
            [ 1.1456,  0.2232, -0.3889,  0.2697,  1.0647,  0.8730, -0.1384,  1.6666]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8153, -1.6213,  0.6353],
            [ 2.6258, -0.1701,  0.3408],
            [-0.2277,  1.2164,  0.2923]], requires_grad=True), Parameter containing:
    tensor([[0.7870]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5970,  0.3153,  0.6491, -1.9263,  3.2222, -1.5496, -0.5063,  3.4060],
            [ 0.3866,  2.4843,  3.5095,  0.1443,  0.8199,  6.0785, -0.8177, -0.8489],
            [ 9.2554,  4.0821, -2.2862,  3.6917,  0.5660,  1.6320,  0.9785, -2.2096],
            [-3.9024,  5.9026, -1.4458, -2.1131,  3.9841, -2.1275,  5.2337, -4.7966],
            [-2.0028,  4.6761, -8.4716, -3.7489, -6.6470, -1.0337,  5.0945,  3.5003],
            [-2.6914,  1.6745,  2.6860, -4.2122, -4.5234, -1.8154, -1.1148,  1.6371],
            [ 4.6398, -3.4919,  9.9120, -1.3166,  0.8060, -2.3794,  2.3425,  5.1579],
            [ 6.0600,  0.2398, -5.9657,  9.3716, -2.8013, -1.6126,  0.7746,  0.7489]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -0.7568,   0.4775,   2.3730,  -4.0795,   4.2974,  -2.6519,   1.0609,
              -0.4821,  -0.0350,   0.0889],
            [ -1.8512,  -2.3734,  -0.4584,  -2.7083,  -0.4138,   2.8468,  -2.2024,
               1.0160,   0.9707,  -0.3495],
            [  1.1882,   6.7188,  -0.9720,   3.1147,  -2.5889,   5.2559,  -2.2751,
              -0.2539,  -0.3342,   0.1143],
            [ -3.3885,  -1.5491,   8.2093,  -3.4183,   0.3049,   1.3829,  -0.4146,
               3.0579,   1.4878,  -1.3593],
            [  0.5129,  -8.4590,  -0.9903,   7.3938,  -2.5187,  -0.2136,  -2.0905,
              -6.4825,   0.9547,  -0.5823],
            [  3.7278,  -1.0380,  -6.9781,  -5.0159,   4.2010,   1.6563,   2.4809,
              -1.1725,  -4.2384,  -0.0232],
            [ -0.6183,   1.6685,   6.9074, -10.6437,  -5.6848,  -1.1966,  -0.9507,
               5.4252,  -1.7416,   0.6648],
            [  0.5438,  -1.1971,   1.9021,  -0.4533,  -1.6900,  -5.3821,  -4.6535,
              -0.6530,   0.8185,   0.5832],
            [ -1.6039,   1.5540,   0.2322,  -1.0091,  -3.6696,  -1.2551,   0.8961,
              -2.0574,   0.5269,   0.2276],
            [  0.1318,  -0.7768,   0.0904,   0.9419,  -0.4022,  -1.8242,  -1.0112,
               1.0440,   0.5230,   0.0575]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.502 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
