.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.7736,  3.1736,  2.3263,  6.7629,  4.9589],
            [12.0551,  6.9672,  1.6087,  9.5183,  9.2290],
            [15.2916,  7.0194,  6.9423,  9.7595,  7.4381],
            [13.3050, 13.8533, 12.2085,  9.7351, 15.6854],
            [ 9.0610,  6.6469,  3.5275, 12.1684,  4.8248],
            [13.3050, 10.2415, 12.6582,  9.1315, 15.6854],
            [15.2916,  9.1259,  1.8834,  1.9357,  7.4381],
            [12.0551,  2.6307,  5.1711,  8.8025,  9.2290]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.6973e-01, -1.6310e+00,  1.1990e+00, -1.3820e+00, -2.8053e-01,
              5.6744e-02,  1.2796e+00, -2.5911e+00],
            [ 4.9906e-01, -1.1947e+00,  1.6438e+00,  1.0523e+00,  1.0448e+00,
              1.0590e+00, -2.6929e+00,  1.8699e+00],
            [ 2.9603e-01,  3.7102e-01, -1.4671e+00, -5.9051e-01, -1.1479e+00,
             -9.4826e-02,  3.8623e-01, -4.8181e-01],
            [ 1.2892e-01, -1.2097e+00, -1.2251e-01, -1.4394e+00, -1.6306e+00,
              6.7151e-02, -1.4731e+00,  7.3076e-01],
            [ 1.8833e-01,  1.0704e+00,  6.7065e-01,  2.9546e+00,  1.2177e+00,
              1.6789e+00, -8.1354e-01, -3.0000e-02],
            [ 5.9442e-01,  1.2217e+00, -1.3973e-01, -1.4958e+00, -4.7768e-04,
              7.7018e-01,  1.4173e+00,  3.8330e-01],
            [-1.9440e-02,  5.4145e-01, -9.0707e-01,  1.1893e+00,  1.6280e+00,
              5.8504e-01,  5.2542e-01,  1.3460e+00],
            [-1.3155e+00, -2.5301e-01, -3.9354e-01,  8.5000e-01, -8.2729e-01,
             -7.0342e-01, -7.5039e-01, -8.3414e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2377, -0.5275,  0.2257],
            [-0.9431,  1.1474, -0.5701],
            [ 0.6092, -1.0917, -0.7316]], requires_grad=True), Parameter containing:
    tensor([[-2.2070]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.9973, -3.0482,  1.0527, -3.8585, -5.9646,  1.0640, -0.2526,  0.6650],
            [-1.5598, -3.7329, -1.9197, -4.8530,  0.4126, -3.2438, -1.1204, -2.2312],
            [-0.4427, -2.5030, -5.0888, -3.3799, -2.8004, -1.1493, -3.1547, -0.6871],
            [-5.0296, -1.4540, -2.3468, -1.2407, -3.2885, -4.6674,  0.7517, -4.5194],
            [ 0.7157, -3.5462, -1.4785, -2.7296, -1.1026, -0.2218, -3.5897,  1.7068],
            [-2.2287,  0.7063, -5.2498,  0.1307, -3.1343, -3.2063, -0.4543, -6.2808],
            [ 2.3006, -6.9477,  1.8774, -4.0600, -0.2948, -1.6386, -5.1051, -1.4586],
            [-5.4859,  2.7974, -4.9285, -0.8930, -2.3599, -0.8120,  2.2483,  0.2711]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5863, -1.2725,  0.5569, -0.0886, -0.2338,  0.2569,  0.3084,  0.0437,
             -0.2483,  0.0586],
            [-1.9591,  1.8846, -1.0805,  0.3663,  0.0179,  0.8450, -0.6041, -0.9845,
              1.2244, -0.2367],
            [ 0.2706, -0.8113, -3.7575, -0.8017,  0.6474, -2.1920,  1.8942,  3.5183,
             -1.6828,  0.1158],
            [-0.0554, -2.4160,  1.2547, -1.9589, -0.8322, -0.5595,  0.0924, -2.3400,
             -1.1773,  0.1827],
            [ 0.8153,  0.3663, -3.7084, -1.1110, -1.4374,  0.5835,  0.6572, -1.3678,
              1.4703, -0.5820],
            [ 0.3068,  0.8171, -1.2198,  3.1982, -2.6882, -2.6071, -1.4565,  3.9396,
              0.6717, -0.3519],
            [-0.0275, -1.3313,  4.1783, -1.0325, -1.6845,  1.3436, -0.1032,  1.4420,
             -1.6364,  0.5525],
            [-0.0046,  0.2055,  2.5186, -3.5853,  2.3689, -0.0610,  0.3342, -2.8573,
              0.8001,  0.8030],
            [-0.4309,  3.2884, -4.3549,  3.6059,  2.1879, -1.4469, -1.7689,  2.6825,
              0.4154,  0.4972],
            [ 0.1797, -2.1215,  2.8768,  2.8761, -0.5370, -0.7367,  0.2845, -1.5997,
             -0.5790,  0.1887]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.816 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
