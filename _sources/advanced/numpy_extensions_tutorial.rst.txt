.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.0752,  1.9600, 10.7673,  8.3047,  6.8770],
            [ 5.4436, 11.5482,  9.1043,  7.4106,  9.5141],
            [ 5.8075,  4.8350, 10.8192,  6.7392,  7.2768],
            [ 3.8670, 10.9649,  4.1096,  6.5119,  9.1030],
            [ 7.1448,  1.4282,  5.7153, 11.7134,  6.4782],
            [ 3.8670,  8.6979,  2.8653,  6.4091,  9.1030],
            [ 5.8075,  2.0788,  8.9578,  2.5444,  7.2768],
            [ 5.4436,  4.6883,  5.6568, 11.3015,  9.5141]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.6822,  0.2939, -0.0749, -0.8859,  0.9189,  0.6619,  0.3815, -1.1112],
            [-0.2362, -0.2874,  0.4411, -1.0864,  0.6066,  2.6001, -0.2779, -0.1646],
            [-0.3764,  1.0485,  0.9714,  1.7779, -1.2034,  1.4937, -0.6844, -0.8982],
            [-0.3830,  0.5109, -0.7799,  0.0269,  0.1034,  0.1573,  1.2892, -0.9384],
            [ 2.5734, -0.0387, -0.1034,  1.2619,  1.2580,  0.8962,  0.0578, -1.2421],
            [-0.0593,  0.0609,  1.0433,  0.5239, -0.3841, -0.7850, -0.9281,  0.1694],
            [ 0.7160, -0.7258,  0.4037, -1.4654, -0.5936, -0.4538,  1.2168, -0.1468],
            [-0.2886,  0.2885,  1.4518, -1.7231, -0.6025, -0.0382, -0.6636,  0.8181]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2661,  0.7029,  0.2990],
            [ 0.5293,  0.0427, -2.5844],
            [-0.9666, -0.8659, -0.4226]], requires_grad=True), Parameter containing:
    tensor([[-1.5713]], requires_grad=True)]
    Output from the convolution:  tensor([[-7.9506e+00, -8.7869e+00, -2.9246e+00,  1.6470e-03, -1.3034e+00,
              7.2091e-01,  1.4225e+00, -4.8090e+00],
            [ 3.7897e-01,  1.4534e+00,  5.5852e-01,  3.3568e+00,  4.8236e-01,
             -2.4077e+00, -8.2773e-01, -2.6445e+00],
            [-1.1107e+00, -4.2510e+00, -2.9349e-01, -1.2007e+00, -4.7892e+00,
              1.7600e+00, -3.0600e+00,  3.6281e-01],
            [-1.6311e+00, -7.1438e-01,  8.7245e-01, -2.1095e+00, -2.1475e+00,
             -7.8456e-01, -9.7759e-01,  2.5464e+00],
            [ 1.6780e+00, -2.6670e+00, -7.3121e+00, -4.4209e+00, -6.3475e+00,
             -4.0660e+00,  8.3310e-01,  2.4513e+00],
            [-4.4153e+00, -5.5670e+00, -6.3601e+00, -4.1446e+00, -8.8672e-01,
              3.1806e+00, -8.1865e-01, -9.2317e-01],
            [-3.1729e+00, -1.7349e+00,  1.3799e-01,  2.9663e+00,  5.4549e+00,
              9.0311e-01, -4.4133e+00, -4.8649e+00],
            [-4.1177e+00,  9.6790e-01,  4.6734e+00, -1.5685e+00, -3.0006e+00,
             -2.9826e+00, -5.3844e+00, -2.8374e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3598,  1.0057, -0.3608,  1.2804,  1.4789, -0.2118,  1.4658,  0.0967,
             -0.4417, -0.0916],
            [ 1.3197, -1.5323, -3.3435,  1.2973, -5.9747, -1.8764,  0.9195, -5.2115,
              2.4750,  1.0853],
            [-2.3568, -1.8998,  4.0960, -2.7335, -2.2794, -1.6248, -0.9736, -3.2668,
              2.5510, -1.9991],
            [ 1.6171,  3.4123,  2.5654, -1.7348,  2.0442, -4.3878, -1.4570, -3.8396,
              1.7206, -4.1902],
            [ 1.2800, -0.2275, -3.3225, -1.2165,  0.0990,  3.1967,  2.5512, -0.3341,
              3.3885,  1.5105],
            [-1.3460, -1.6131,  1.1966,  4.6764,  1.6127,  4.2346, -1.5409,  3.7239,
              0.4420,  1.9560],
            [ 0.9672,  0.2708,  0.7377,  2.0915, -1.4788,  1.1692, -2.1431,  1.2918,
              0.9639, -1.8039],
            [-0.3767,  0.2481,  2.7232,  0.6752, -0.5279, -6.4114,  1.4985,  0.2173,
              0.9848, -3.8893],
            [ 0.7544,  0.8770,  2.6701, -0.8112, -0.6336, -0.1555,  2.8818, -3.9820,
              2.2556,  0.2544],
            [ 0.8989,  1.2626,  1.3405,  0.5583,  0.9823, -0.5382,  0.3875,  0.7719,
              0.7676,  0.1325]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.522 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
