.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[13.2626,  6.2747,  3.6231,  1.4833, 14.8057],
            [13.8669,  3.6220,  5.4409, 10.0009,  3.5595],
            [ 3.0971,  7.8019,  2.1791, 10.8831,  2.3101],
            [15.7866,  3.5305,  8.0855,  6.3459,  1.2927],
            [ 8.9309,  8.0773, 11.0036, 11.7992,  2.9206],
            [15.7866,  9.7437,  1.1097, 11.3824,  1.2927],
            [ 3.0971,  3.3897, 10.3404,  6.6110,  2.3101],
            [13.8669,  1.7575,  9.3624, 12.1707,  3.5595]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9030,  1.9810,  0.2399,  0.3703, -0.3749,  1.1042,  2.2539,  0.7362],
            [-0.2888,  0.6364,  0.3432, -0.1974,  0.1526,  0.1792,  0.5004,  0.7591],
            [-0.9555, -0.2645, -0.9794,  0.4080, -0.1328,  0.5630,  1.5076,  1.1495],
            [ 1.4630, -1.0936,  0.6646,  1.5248,  0.1202,  0.6697, -1.1720,  1.0467],
            [-1.2940, -0.8478, -1.4212, -1.9051,  0.4863, -0.0209, -2.7524,  0.1459],
            [ 0.1179, -0.4421,  0.7781,  0.2316, -0.0939,  0.9576, -0.8077,  2.2619],
            [ 0.2610,  1.4943, -1.2498,  0.9875, -1.3871,  0.4182,  1.5467, -0.8053],
            [-0.5209, -0.1746, -0.0040,  1.6323,  1.5739,  0.0939, -0.2494,  0.4343]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 3.3653e-01, -4.1912e-02, -2.1327e+00],
            [ 1.6703e+00,  5.7565e-01,  9.6634e-02],
            [-1.3045e-03, -7.9703e-02, -3.8314e-01]], requires_grad=True), Parameter containing:
    tensor([[-0.0020]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.7670,  1.5999, -1.2440, -0.5037,  2.5266,  5.8767,  3.7391,  1.1886],
            [ 1.2030,  0.6693, -1.6851, -4.9766, -2.3065, -1.6721,  3.8798,  0.9853],
            [-2.1350, -0.3848, -1.4915,  2.7211,  2.3027,  3.2954, -0.2677, -1.1086],
            [ 0.3247,  5.9918, -4.9420, -4.2072, -0.1292, -0.6042,  4.3242, -1.3393],
            [-2.4714,  5.4975, -2.5221, -4.2864,  1.3711,  0.1528,  3.3659, -3.6875],
            [-0.2425,  4.4246,  0.3197,  0.9013,  1.9256,  1.0747, -1.7145, -0.2777],
            [-1.9623,  1.4246, -4.1552, -2.6116,  1.9143,  5.7287, -0.9932, -2.4420],
            [ 0.2288,  4.3707,  4.0365, -0.2853,  1.4319,  1.6264, -0.3886, -4.2671]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-4.1246e-01,  1.0601e+00,  2.3610e+00, -6.3061e+00,  4.9123e-01,
             -1.2332e-01,  2.1014e+00, -1.6316e+00, -1.2792e+00, -1.2699e+00],
            [-2.3264e+00,  4.7155e+00,  2.5772e+00, -1.8436e+00, -4.1642e-01,
              3.6382e-01, -8.7687e-01, -3.0153e-01,  3.8471e+00, -7.3684e-02],
            [-1.3418e+00,  9.7474e-01,  1.7284e-01,  2.4501e+00,  9.6534e-01,
              3.6362e+00, -5.0245e+00, -2.7868e+00,  9.3723e-01, -1.0664e+00],
            [ 2.2013e-02, -2.5223e+00,  8.3777e-01, -1.3271e-01,  6.5160e+00,
             -2.4756e+00, -3.6956e+00,  4.1093e+00,  3.3328e-01,  4.2596e-01],
            [-8.2433e-01, -1.0325e+00, -4.0939e+00,  3.2629e+00,  2.8941e+00,
             -3.2493e-01, -1.4182e+00, -1.1515e-02, -6.7187e-01, -5.4909e-01],
            [ 8.4624e-01, -1.6175e-01, -1.4726e+00, -3.9256e+00,  2.1318e+00,
             -4.3597e+00, -5.6211e-02, -7.1640e-01, -1.6308e+00, -2.5910e+00],
            [ 1.0450e+00,  3.0167e+00, -8.7762e-01,  1.9937e+00,  2.4494e+00,
              5.6923e+00,  1.6820e+00,  1.7803e-01,  1.2522e+00,  8.4355e-01],
            [ 1.3265e-01,  5.1332e-01, -8.1127e-01, -6.1143e+00, -2.6762e+00,
              4.7440e+00,  1.1488e+00,  1.4262e+00, -1.1124e+00, -1.8270e+00],
            [-1.4675e-01,  1.7087e+00,  2.0960e+00, -2.4465e+00, -1.4148e+00,
             -1.7729e+00, -4.3293e-01,  6.2427e-01,  5.0989e-01,  2.0127e-01],
            [ 1.1451e-04,  5.6166e-03, -5.1891e-02, -4.7638e-01, -2.0486e-01,
              7.4773e-01,  2.6502e-01,  4.0844e-01, -1.2978e-01, -2.3522e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.848 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
