.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.6980,  5.0505, 15.8230,  3.4756,  3.1343],
            [10.1283, 10.4891,  5.0318,  3.2818,  3.7873],
            [ 5.4310,  4.7963, 12.9211, 10.5760, 16.8977],
            [ 6.7819,  6.3378, 15.5919, 10.6458,  1.8118],
            [ 6.3769,  2.7232,  9.6545, 11.4896, 15.0856],
            [ 6.7819,  5.6337,  8.8009,  4.1695,  1.8118],
            [ 5.4310,  3.1533,  8.2798,  4.9861, 16.8977],
            [10.1283,  5.6914,  4.1740,  3.3106,  3.7873]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.2679e+00, -1.2760e+00,  3.8382e-01,  1.2000e-01, -9.6775e-01,
              1.0495e-02,  5.5492e-01,  1.7106e+00],
            [-1.4463e+00,  7.9538e-02,  2.3136e-01,  1.1506e+00, -7.4779e-01,
             -1.4660e-01,  7.6242e-01, -7.0150e-01],
            [ 2.2745e-01,  3.8101e-01,  3.8683e-01,  1.4446e+00,  1.2428e-01,
             -1.0686e+00,  1.9748e-03,  1.2863e-01],
            [ 8.1026e-01, -1.7300e+00,  7.4891e-01,  1.4042e-01,  5.5845e-01,
             -1.0481e+00,  1.1429e+00,  1.3423e-01],
            [-8.6502e-01,  1.2971e+00,  1.0564e-01, -2.8212e-01, -5.4390e-01,
             -4.8719e-01, -6.6525e-01,  2.5645e+00],
            [ 5.7466e-01,  1.7654e+00,  3.2640e-01,  1.7092e+00, -8.4950e-01,
              4.6592e-01,  1.9787e+00,  1.2681e+00],
            [-4.2477e-01, -2.7862e-01,  2.0330e+00, -4.0836e-01, -2.0917e+00,
              1.0003e+00,  7.8369e-01,  1.0289e+00],
            [ 2.0098e+00,  4.5609e-01, -6.1076e-01, -7.0195e-01,  2.2999e+00,
             -1.1564e+00, -2.8276e-01, -1.5408e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6252,  0.1361,  0.2798],
            [-1.1647, -0.9483,  0.3987],
            [ 0.5673,  0.1854,  1.0647]], requires_grad=True), Parameter containing:
    tensor([[-1.6812]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.1869, -2.9971, -3.2167, -1.2075, -2.4914, -0.7393,  1.0803, -2.9387],
            [ 1.5273,  2.0091, -1.5663,  0.3547, -0.9488, -2.6933, -3.3527, -1.5864],
            [-5.6683, -3.1212, -4.2059, -4.9541, -1.5414,  1.7309,  0.7918,  0.4146],
            [-1.3761, -0.0418, -0.2242,  0.0821,  1.2536, -0.6444, -0.8865, -6.3738],
            [-4.9113, -2.1006, -4.3415, -5.4712, -0.3034, -1.9993, -1.7627, -2.2610],
            [-1.6589,  1.9736,  2.9219,  0.4931, -1.9070, -2.6103,  0.8246, -4.1187],
            [-1.6684, -5.8755, -4.5155, -0.7961, -4.1272, -2.5123, -0.6599, -0.8819],
            [ 0.0328,  1.0814, -0.4639, -1.9961, -2.6135, -0.3148, -2.1849, -6.6699]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.7540, -0.0956, -0.4730, -0.8307, -0.6914, -0.4004,  1.2582,  1.3890,
              0.8667,  0.5072],
            [-2.2956, -1.5749,  0.9271,  1.4553,  0.0903,  0.3505, -3.7967, -3.9961,
             -1.2501,  0.9092],
            [ 2.0494,  1.7243,  2.0950, -1.7659, -1.5863, -1.3672,  1.0131,  2.9651,
              0.8906,  2.5761],
            [ 0.0531,  1.8298, -0.7728,  0.1209, -0.0212, -1.0644,  1.3720,  0.7353,
             -4.0302,  1.0481],
            [-0.3403, -1.3890, -0.5264, -2.8814, -1.2077, -2.6050, -0.6647,  0.9448,
             -1.3949,  0.8958],
            [-1.2236, -2.0045, -1.7475,  4.2548,  3.9205, -0.5790, -0.3545,  0.1502,
              0.9761, -1.4741],
            [ 2.1975,  2.8843,  0.7970, -0.1675, -0.9432, -2.3744, -0.3179,  2.6747,
              1.4108, -1.3124],
            [-2.8837, -2.8756, -0.5429,  0.1275, -3.6333,  1.7254,  0.8062,  0.3243,
             -0.8173, -0.8730],
            [ 2.6463,  2.1592, -0.4154,  4.2111,  1.7316,  2.2366, -0.0591, -0.5175,
             -0.4717,  0.8113],
            [-0.9816, -0.0658, -1.8133, -0.3421, -0.9597, -1.5696, -0.9231,  0.6258,
              0.3908,  0.6186]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.477 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
