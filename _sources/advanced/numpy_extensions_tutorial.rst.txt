.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[15.8074,  7.2221,  7.2123,  9.6968,  5.1260],
            [ 7.4100,  5.7777, 11.8787, 11.1618,  5.6121],
            [ 2.5516, 13.3646,  3.8183,  7.1400,  2.0056],
            [ 4.8228,  5.2333,  5.1191,  9.8444, 14.9895],
            [ 4.0133,  6.7997,  6.8050,  6.8130,  7.1317],
            [ 4.8228,  4.4566,  5.4882,  6.5660, 14.9895],
            [ 2.5516,  6.4246,  4.6197,  8.0783,  2.0056],
            [ 7.4100,  9.7927,  4.0688, 11.3463,  5.6121]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4088e-04, -2.1094e+00,  3.2136e-01,  9.2869e-01, -5.9390e-01,
              2.9721e-02, -6.0950e-01, -1.8225e+00],
            [-8.7939e-01,  6.3643e-01, -3.7289e-01, -6.5133e-01, -1.3419e-01,
             -3.4337e-01, -2.4129e+00, -1.1372e+00],
            [-4.9895e-01,  4.7713e-01, -1.3418e+00, -1.0147e+00,  5.0967e-01,
              4.8411e-01, -1.2578e+00,  2.0702e+00],
            [-8.0766e-01, -2.2026e+00, -1.3293e-01, -6.9602e-01,  1.7481e+00,
              5.9924e-01, -1.0999e+00,  9.1082e-02],
            [-3.3752e-01, -1.1595e+00, -3.6283e-01,  4.2364e-01, -5.2636e-01,
              2.6122e-01,  7.8352e-01,  7.6641e-01],
            [ 1.5135e+00, -2.5959e-01, -8.6582e-01,  1.0814e+00, -9.8885e-01,
             -5.5550e-01, -4.8727e-01,  1.8973e-01],
            [ 8.4734e-01, -2.0226e+00,  1.2007e+00, -3.2237e-02, -1.3218e+00,
              2.3048e-01,  7.4086e-01, -9.6062e-01],
            [-1.8995e+00, -1.1082e-01, -3.1329e-01,  8.3537e-01, -2.8066e-02,
              2.7075e-01, -8.5855e-01,  3.6157e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0347, -0.0284, -0.8514],
            [ 0.3486,  1.2163, -1.4480],
            [ 0.0830, -0.6000,  0.6015]], requires_grad=True), Parameter containing:
    tensor([[1.4128]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.4218, -0.5865,  1.9342, -1.3771, -0.5026,  5.0119,  1.5799,  1.4590],
            [ 0.2717,  6.2605, -0.7529,  1.2387,  2.5991, -0.8724,  3.7041,  4.5015],
            [ 2.5133, -0.4138,  0.6490,  0.6709,  4.3044, -0.3011,  1.9973,  1.6691],
            [ 3.1519,  0.5907,  2.2084,  2.4397,  1.0188,  2.8527, -1.0831,  2.2764],
            [ 2.3364,  1.9179, -1.2846,  2.3034,  0.3291,  3.9163, -0.4695,  3.3797],
            [ 3.0544, -0.9384,  1.6811,  1.7625,  3.0702, -1.3944,  5.7452,  0.6888],
            [ 2.4667, -0.0770,  2.2093, -1.6412,  3.2648,  2.7920, -1.1426, -0.6010],
            [ 2.8412,  1.6381,  1.0610,  4.2808, -0.1067, -0.6984,  2.1546,  1.1481]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0146, -0.0165,  0.3485, -0.6024,  0.4351,  2.0112,  0.3122, -1.1749,
             -0.1359, -1.0998],
            [-0.1267, -0.2396,  1.8967, -3.2624, -2.9098,  4.2641,  1.9128, -0.5462,
              1.4619, -1.4336],
            [-0.2368, -0.0073,  1.1633,  0.8983, -1.8957,  0.8663, -2.7581,  2.2384,
             -1.0997,  1.0721],
            [ 0.0071,  0.0602, -2.4438,  4.4387, -2.5567, -0.8131, -1.0966,  1.4826,
             -0.4281, -2.9298],
            [-0.0202, -0.4898,  0.3270, -1.7593,  0.1414, -0.4315, -3.7887,  5.6251,
             -0.1792, -3.6534],
            [ 0.2656,  1.5585,  2.8372, -1.1616,  1.6752, -0.1784,  1.7345, -1.7274,
              1.9544,  0.5592],
            [-0.2887, -1.7371, -2.7883, -0.8734,  0.2468,  1.7838, -0.2958, -0.7350,
             -1.3550,  2.4345],
            [ 0.4390,  2.3630, -0.8984,  0.4107, -0.3590,  0.5581,  1.7165, -0.8134,
             -2.2772, -0.7243],
            [ 0.0815, -0.8433,  0.5606, -2.9747,  2.7202, -2.1105,  2.8495,  0.4595,
              2.8714, -3.3950],
            [-0.0093,  0.0946, -0.4156,  1.2701, -1.1709,  0.9706, -1.1808,  0.1966,
             -0.9849,  1.1731]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.741 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
