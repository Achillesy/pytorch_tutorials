.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.5898,  9.6487,  5.3758,  8.8716,  1.5919],
            [12.2189,  8.2603,  6.1901, 11.3308,  6.9652],
            [ 7.4739, 14.0712,  8.4703, 14.1116, 10.2597],
            [ 5.5900, 10.4895,  3.3201,  7.2455,  1.5413],
            [ 3.3661,  4.5671, 12.5498,  6.2798,  4.7967],
            [ 5.5900,  1.9622,  3.6474,  6.1237,  1.5413],
            [ 7.4739,  4.9591, 10.6187, 12.3578, 10.2597],
            [12.2189,  6.8679, 15.9084,  6.8022,  6.9652]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1925, -1.0059, -0.2681,  1.7940,  0.2037,  1.7199,  0.0466, -1.0256],
            [-0.4204, -0.1662,  0.6730,  0.6943,  1.3570, -1.1648, -0.7123,  0.1059],
            [-0.0092,  0.7849, -0.0332, -1.6567, -0.7896,  0.4082,  1.0185,  2.2512],
            [ 0.6764, -0.9723, -1.1907, -1.0056,  0.5335,  1.4745, -1.3103,  0.3327],
            [ 1.0999,  0.4253, -0.5875, -1.3888,  0.1295,  1.7597, -1.0454, -2.0123],
            [-1.1248, -1.7219,  0.4263, -1.6177,  0.6606, -0.8258, -0.2378, -1.4001],
            [-2.4439,  0.7626,  0.5633, -1.4286,  0.4572, -0.4932,  0.6086, -0.1496],
            [-1.3461,  0.5607, -0.8619,  0.8927,  1.6325, -0.4932,  1.1033,  1.9707]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.3982, -0.5045,  1.3354],
            [-1.0457,  0.2130, -0.1101],
            [-0.4033,  2.1713,  0.3560]], requires_grad=True), Parameter containing:
    tensor([[2.0029]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.7533,  6.4981, -2.3397,  1.2533,  4.7152,  1.2024,  2.3915, -3.5541],
            [ 1.8307,  1.5955, -0.6778,  3.2663,  2.3002, -1.6892,  7.8123,  1.7844],
            [ 4.5878, -0.6036,  2.1125, -0.4704, -0.9105,  2.4938, -2.3615,  2.0525],
            [ 7.9616,  5.0482,  1.6998,  1.9319,  2.8668,  1.1123,  2.5835,  6.6718],
            [ 4.8790, -0.6321,  0.4552,  0.0141,  7.7597,  1.0674,  4.4166,  7.0036],
            [ 1.6858, -2.0945,  5.6281,  1.0948, -1.5737, -1.7158,  3.3465,  4.8570],
            [ 0.5292,  2.4802,  2.4490, -1.2590,  6.2859, -0.2126,  1.7516,  4.9257],
            [-0.3671,  6.3211,  3.9277, -2.2771,  2.3979, -3.6252,  3.2278,  2.2535]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.2451,  0.1107,  2.3746,  2.1989,  2.4282, -1.9293, -3.8072, -0.2261,
              1.0355,  0.3128],
            [-1.9990, -0.1483,  2.3486,  4.6162,  0.7302, -3.1574,  1.6594,  2.1259,
             -0.9467, -1.5401],
            [-0.2387,  3.0753, -0.0608, -0.9229, -5.7120, -4.1774,  4.7256,  2.7963,
             -2.2098,  1.2480],
            [ 2.0366,  3.5050, -0.2476, -3.1246, -6.3036,  3.6254,  5.3335, -4.5553,
             -2.5662, -1.2821],
            [ 2.0966, -1.8209, -1.5507,  0.0739, -1.3658,  4.5505,  2.0850, -3.0660,
              0.4904, -0.3149],
            [ 0.5806, -3.0928, -1.5235, -0.9782,  3.8122,  5.6365, -2.8353, -2.5807,
             -2.5396,  0.3001],
            [ 0.6041,  0.7736,  1.3139, -1.3052,  0.1562,  1.1463,  0.8112, -2.4671,
             -0.7501,  0.2106],
            [-1.3060,  1.9029,  0.4639,  0.4436, -3.0240, -0.8273,  1.8024, -3.2001,
             -2.4721,  1.1041],
            [-1.0897,  0.2840, -3.1943, -0.9027, -3.5181,  2.4476,  1.0692, -0.5685,
              1.2027,  0.0290],
            [-0.4967,  2.9303, -1.1365,  0.6007,  0.6983,  4.5123,  0.2109, -4.7542,
              0.9583,  0.2712]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.486 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
