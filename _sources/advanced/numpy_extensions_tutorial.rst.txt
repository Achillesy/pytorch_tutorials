.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.6675,  4.0888,  5.5992,  4.3158,  2.6105],
            [ 5.3853,  3.1491,  2.5823,  6.3642,  5.2961],
            [ 1.7922,  1.1530,  7.1027,  5.4376,  3.8818],
            [ 3.0014,  6.3809,  5.7180,  4.4941,  4.8156],
            [ 2.3187,  9.1026,  0.9482,  5.2861,  9.5418],
            [ 3.0014,  4.6591,  7.6635,  3.6794,  4.8156],
            [ 1.7922, 15.9156,  2.2142,  8.2357,  3.8818],
            [ 5.3853,  7.3252,  4.9609,  5.1509,  5.2961]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3504,  0.9194,  0.4528, -0.2380, -0.2511, -1.2947,  0.4890,  0.6151],
            [-0.5906,  1.2945, -0.4955,  0.6197,  0.6572,  1.2344,  0.1205, -1.2657],
            [ 1.0043, -0.0989,  0.8854, -1.6763, -0.1045,  0.3217,  0.3098,  1.3270],
            [-0.4056, -0.5683,  0.3636,  0.7174, -0.2963,  0.4669, -0.9710,  1.1536],
            [-0.1638,  0.7715,  0.0970, -0.0476, -0.1020, -0.7867, -0.3801, -0.8168],
            [-0.7926, -0.0956,  0.2172,  0.3061,  0.9785,  0.0065,  0.5386, -0.7253],
            [ 0.2048, -0.3906, -0.9303, -1.7856,  0.8054,  0.3044,  0.4582, -0.0751],
            [ 1.3672,  0.9380, -0.7998, -0.7084, -0.5772, -0.3151,  0.1995, -0.0793]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1980,  1.2640, -1.0267],
            [-0.3314,  0.3411, -0.7472],
            [-1.7349,  1.6648,  0.5792]], requires_grad=True), Parameter containing:
    tensor([[-0.5023]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.2125, -2.7839, -1.8932, -0.9451,  6.1258, -4.2488,  1.9922,  1.4347],
            [ 0.0364, -3.1372,  2.0865, -1.7123,  4.1910, -5.7145,  0.1317,  0.8585],
            [ 0.7822, -1.6359,  3.9332, -4.7118, -2.8696, -2.9722,  1.5821, -1.2329],
            [ 2.5062, -2.7795, -3.5935,  2.4134, -1.5140, -2.5267,  2.9645, -0.1828],
            [-1.2087,  1.2266, -4.6770,  4.3600,  2.0417, -4.0905,  1.6941, -4.3400],
            [-1.1937,  3.6205, -9.5628,  3.3573, -1.4788, -0.6953, -0.1389, -2.1618],
            [-0.2761,  2.0111, -2.1868, -1.7483, -1.4504, -1.5525,  1.4883,  3.4055],
            [-0.9771, -0.1059, -6.5959,  3.3252,  0.0503, -1.5814,  1.4555, -1.4411]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1485,  0.8407, -0.0920, -0.7729,  1.6298, -1.4637, -0.6880,  0.1546,
             -0.5273,  1.0542],
            [-0.6086,  2.4025, -1.9135, -3.9638,  3.2783, -0.1946, -1.2954,  2.5008,
             -0.1254,  0.1963],
            [-1.8131,  0.3285,  1.5399, -2.7027,  6.3208, -0.2800,  1.8275, -2.4322,
             -2.7751, -0.5927],
            [-2.8119,  1.8167,  6.2271, -5.3965, -1.7546,  0.5281, -3.4502,  0.9531,
              0.8301,  0.2144],
            [ 1.2937, -2.8003,  1.3002, -3.1251,  2.1056,  1.1427,  1.9192,  2.2645,
             -0.5124, -1.3876],
            [ 1.8769, -0.5950, -1.2365, -0.0501, -0.2993,  4.9075, -7.3041,  0.8623,
              2.2954,  0.3575],
            [ 1.2963, -0.4869, -1.0502,  0.5670, -2.3264,  0.1905,  1.7609, -2.2660,
              2.5385,  0.3610],
            [-1.2207,  3.5252, -2.7457,  0.2022, -0.2586,  3.7662, -0.3603, -3.0623,
             -0.5736, -0.8619],
            [-0.9792,  3.0803, -0.3544, -4.1828,  1.3058, -1.8611,  0.9117,  0.4395,
              2.1983,  0.4038],
            [-0.6576,  2.0397, -3.8933,  1.4503,  0.7906,  3.2197,  0.5179, -2.8954,
             -0.8451, -0.0232]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.792 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
