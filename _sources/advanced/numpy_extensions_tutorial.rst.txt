.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.9518,  7.4853,  7.1098,  5.3836,  6.4763],
            [11.3299,  7.6693,  6.5352,  6.2759,  9.8171],
            [ 2.3074,  8.6677,  3.5803, 10.4254, 11.0362],
            [14.5985,  5.8030,  8.7903,  7.3318,  6.0793],
            [ 1.1460,  8.6643,  3.3362,  5.2953,  1.8490],
            [14.5985,  4.3871,  5.0527,  6.4810,  6.0793],
            [ 2.3074,  8.7876,  6.3876,  4.4383, 11.0362],
            [11.3299,  7.4580,  4.6508,  4.0291,  9.8171]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1538, -0.4964, -2.0591, -1.7969,  0.0992,  1.7875,  0.4589, -0.1575],
            [-1.3772,  2.1510, -0.8390,  0.2952,  0.4401,  0.1071, -1.5233,  1.0889],
            [-0.1604, -0.5165, -0.7872,  0.7439, -0.1490, -0.1065, -0.6186, -0.8267],
            [ 0.7070, -0.8408, -0.4816, -1.1557, -0.2697, -1.1468, -0.7625, -0.7386],
            [ 1.1319,  0.1906,  0.3335,  0.1665,  0.7773, -0.0832,  0.7375,  1.7696],
            [-0.4506,  0.4149, -0.5052,  0.7238,  0.0469, -0.6177,  1.3603, -0.4324],
            [-0.6814, -0.4236,  0.1772,  0.7982,  0.9208,  1.5250, -0.3336,  0.2817],
            [ 0.8190, -0.7354,  0.4175,  0.1547,  1.6635,  0.2468, -0.2007,  1.8433]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0768,  1.0243,  0.1355],
            [-0.4947, -1.4331,  0.8066],
            [ 0.1329,  1.2101, -0.4464]], requires_grad=True), Parameter containing:
    tensor([[0.5110]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2311,  0.8317, -0.9749,  1.2991,  2.4849,  1.6894, -2.8767, -1.9787],
            [ 2.4872, -2.1142, -2.1115,  1.9199,  0.4004, -0.8484,  4.2480,  4.4605],
            [-0.6674,  1.3575,  3.3281, -1.5770, -3.3492,  3.6632, -2.6672, -1.8928],
            [ 3.0928, -1.1665, -0.1935, -0.2729,  5.7357, -4.6214,  0.2711,  0.2050],
            [-3.0697, -1.2047,  1.7147,  1.6246,  0.2513,  5.4155, -1.0150,  1.8602],
            [ 5.0277,  5.0475, -2.1933, -0.1885,  1.0844, -0.8179, -0.6321,  1.1946],
            [-2.3631, -3.9657,  2.2952,  2.6068,  2.1348, -2.2101, -0.4180, -1.2481],
            [-0.4796,  1.7433,  2.1290, -2.6402,  0.1844,  6.7181,  2.6390,  1.6077]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-8.6841e-02, -1.1360e+00,  1.5348e-01,  1.5959e-01,  5.6124e-01,
             -8.6609e-01,  1.3088e+00, -7.9377e-01, -8.9310e-01, -1.0176e-01],
            [ 6.2988e-01,  2.4686e+00, -5.7820e-01, -1.0443e+00, -7.2988e-01,
              3.6555e+00, -3.6925e-01,  4.0002e+00,  5.8703e-01, -5.8806e-01],
            [-6.6255e-01, -3.7013e+00,  2.1116e+00,  2.6573e+00, -2.0442e+00,
             -6.1205e+00,  5.9489e-01, -3.4435e+00,  4.3482e-02,  4.7397e-01],
            [ 5.0472e-01,  1.7994e+00, -1.7834e+00, -7.1547e-01,  1.0466e+00,
              2.1647e+00,  1.1096e+00,  2.5048e+00, -2.2217e-01,  3.5774e-01],
            [ 6.1390e-02,  1.4652e+00,  3.1388e+00, -2.6723e-01, -6.0735e-01,
              4.4152e-01,  2.0982e+00, -2.4019e+00, -6.7441e-01,  1.1627e+00],
            [-1.0218e+00, -2.7284e+00, -2.2204e-01,  3.8740e+00, -2.8302e+00,
             -1.6079e+00, -2.8853e+00,  1.7520e+00,  5.5246e+00, -3.6425e-01],
            [-2.9428e-01,  2.1748e+00,  3.3714e+00, -4.4587e+00,  9.1710e-01,
              1.7662e+00,  1.3069e+00, -3.1013e+00, -2.2779e+00,  1.7600e+00],
            [-3.8481e-02,  6.0227e-01, -2.7084e+00,  1.5742e+00, -9.6610e-01,
             -1.2109e+00, -1.0343e+00,  4.9182e+00,  1.1900e+00, -1.0745e+00],
            [ 1.4554e-02,  6.9976e-01,  1.3071e+00,  6.0823e-01,  2.7942e-02,
             -1.7649e+00,  1.5947e+00, -2.3340e-01,  6.5306e-02, -7.7619e-02],
            [ 1.1546e-02,  3.9842e-02, -6.8183e-01, -3.7629e-01, -1.1238e+00,
              1.5406e+00,  5.3353e-01, -8.0536e-01, -5.2041e-03,  6.2584e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.515 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
