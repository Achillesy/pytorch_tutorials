.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.0538,  2.3722,  5.3110,  1.7331, 10.5090],
            [17.3927,  6.1271,  4.0898, 10.5644, 10.1530],
            [ 4.5494,  7.3668,  4.3598,  6.9895, 15.0069],
            [13.3723,  5.8097,  6.6558,  7.3504, 13.1248],
            [ 2.8250, 12.0593, 10.4348,  5.7727,  0.8155],
            [13.3723,  2.9030,  5.9946,  5.3762, 13.1248],
            [ 4.5494,  5.7634,  5.7854,  5.6284, 15.0069],
            [17.3927, 11.9977, 13.6715,  8.8022, 10.1530]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1500, -1.6849,  1.1795,  0.7948, -0.1164, -1.3160,  0.4330, -0.5519],
            [-0.9435,  0.9478, -1.0779, -0.6459, -1.0153,  0.7607, -0.7161, -0.7204],
            [-1.0331,  0.6201, -1.1788,  1.8092, -0.0469,  2.3370,  1.0081, -0.2155],
            [ 0.3007,  0.1330,  1.2765, -0.7328,  0.8017,  0.7930,  1.4468,  0.7345],
            [-1.5666,  0.1809,  1.9140,  0.0739, -0.6566,  1.3358, -0.3478,  2.2476],
            [ 0.7996,  2.5096,  0.7243,  1.4513, -0.4278, -0.1422, -0.3548,  2.3814],
            [-0.7023, -1.7694, -0.8409,  0.1236,  0.2407, -0.9894, -0.8022,  0.4850],
            [ 0.5612,  0.9567, -0.2418, -0.2128, -0.6192, -1.3970, -0.8757, -1.5161]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4005, -1.1775, -1.0172],
            [ 1.0717,  0.1703, -0.8517],
            [-1.2945,  0.5551,  0.5855]], requires_grad=True), Parameter containing:
    tensor([[-0.3713]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.5910, -1.8541, -1.0643,  5.5355,  3.1697, -4.0091,  2.8186,  3.1025],
            [-4.5907, -0.3023,  1.5178,  0.7864,  0.0859,  1.0132, -0.2464,  1.2504],
            [ 2.2817, -1.3405,  0.0382,  0.5811,  1.3183,  0.9923, -0.7297, -1.7598],
            [ 0.6424,  1.3857, -1.2707, -0.0680, -3.6493,  1.7169, -2.0189, -3.1565],
            [-0.9029,  0.9002,  0.5286, -2.0938, -0.1225, -1.5495, -3.2421,  2.1407],
            [ 4.2284,  4.4541, -4.8707, -0.2358, -1.0527, -0.5304, -0.4513, -4.1830],
            [-1.0627, -2.5066, -1.6723, -5.6804, -1.0774, -0.4178,  1.3264,  3.1424],
            [-0.2087, -3.1587, -3.3222,  3.7475, -4.0353, -0.6754,  2.1554, -1.2710]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2295, -1.3072, -3.0404, -3.8677, -2.9965, -1.2783,  0.2719,  0.4818,
             -0.2726, -0.8553],
            [ 0.7352,  2.4690,  2.7997,  2.2064,  1.4223,  1.3042,  0.8133,  2.7401,
              2.0589, -0.4510],
            [-1.5410, -3.6516, -2.2326, -3.5257, -1.6503,  2.4080,  1.4943, -1.4273,
              0.5478,  0.9220],
            [ 1.7235,  0.0586,  1.8418,  4.4289, -1.6895,  0.4669,  3.2919,  0.3026,
             -2.3191, -1.4671],
            [-2.0995,  1.4434, -4.8106, -1.8624,  1.5626, -0.9435, -3.0327,  1.7319,
              1.3547, -1.3270],
            [ 1.2429, -1.4744,  1.2291,  3.5567, -1.5737, -0.7195,  0.7060, -3.6608,
              1.4876,  2.2304],
            [-0.6850,  3.5382, -1.0855, -1.3332,  0.6559, -3.7806, -0.6793, -0.1190,
              0.8488,  1.2892],
            [-2.2418, -3.2183,  0.4246, -6.0441,  0.7767,  2.2819, -6.5421,  0.2986,
              2.3093,  0.8768],
            [ 3.6419,  0.8326, -2.2781,  1.1763, -2.6427, -0.7515,  3.8027, -1.4324,
             -1.8334,  1.1403],
            [-2.2878, -0.5227, -0.0626,  1.8348, -0.9878,  0.4324,  0.0268,  2.2413,
             -0.4848, -0.8584]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.475 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
