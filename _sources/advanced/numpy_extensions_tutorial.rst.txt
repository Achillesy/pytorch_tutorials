.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.2347,  4.7071,  6.8827,  9.9587,  1.7518],
            [ 8.2863,  5.2511,  7.9737, 10.5400, 13.9346],
            [19.7827,  5.9544,  8.6828, 13.7885,  3.4189],
            [ 8.0274,  6.9920,  9.1510,  3.4884,  0.4536],
            [ 8.5088,  3.0659,  5.9711,  6.0528, 10.1797],
            [ 8.0274,  5.9674,  4.6071, 11.1763,  0.4536],
            [19.7827,  1.8633,  9.0778,  5.7093,  3.4189],
            [ 8.2863,  5.8356,  6.3976,  5.2061, 13.9346]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.5278, -0.4186,  0.4905, -0.1423, -0.0926, -0.8229,  1.1030, -0.8446],
            [-1.1060, -0.8779,  2.4487,  0.3616, -0.4178, -0.5414,  1.4616, -1.2988],
            [ 0.2976,  1.2787,  0.0956,  0.6088,  1.6452,  0.6310,  1.0972,  1.4417],
            [ 0.5001,  1.2850,  0.1988,  2.0967,  0.7586,  0.3192,  1.9572,  1.2819],
            [-1.1921,  1.6424, -2.0837,  1.2427, -1.2416, -0.7352, -0.3827, -2.2878],
            [ 0.3823,  0.3924,  0.5896, -0.6326, -0.6034, -0.0133, -0.3604,  1.2411],
            [ 0.3467,  0.4450,  0.6035,  0.7825, -0.1621,  1.1453, -0.5482,  0.4477],
            [-0.0218,  0.3523, -0.2509, -0.2977,  2.2307, -0.9732,  0.0257,  0.8836]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4375,  1.5061, -0.0169],
            [-1.7930, -1.4483, -1.2819],
            [ 0.0430,  0.0823, -1.5767]], requires_grad=True), Parameter containing:
    tensor([[-1.3240]], requires_grad=True)]
    Output from the convolution:  tensor([[  0.5255,  -0.3194,  -1.5148,  -0.4024,  -0.7043,   1.4294, -14.2688,
              -8.4571],
            [-10.2818,  -5.7894,  -9.5417,  -8.1344,  -5.1670,   6.0219,   3.6280,
              -0.0261],
            [ -3.6539,  -4.4128,   1.4097,  -3.2277,  -5.4866,  -4.5544,  -1.5057,
               2.8956],
            [ -2.8877,  -2.8732,  -2.5994,  -8.0036,  -5.1069,  -5.8792,  -6.4605,
               0.2903],
            [  2.5862,   1.6839,   5.5979,  -2.1772,   5.4541,   1.6284,   1.4049,
               0.4876],
            [ -1.9128,   3.3137,   5.7211,  -0.2623,   0.1213,  -3.4654,  -3.4667,
              -0.9548],
            [ -6.3086,  -6.9422,  -4.7645,  -1.8537,   1.8837,   0.5279,  -4.0650,
              -2.3943],
            [  2.0543,  -5.0061,  -3.3425,  -3.7949,  -1.7899,  -1.3700,  -2.5473,
               2.0396]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2359, -1.1245,  1.3257, -1.0871,  1.0448, -1.4379,  2.2530,  1.5997,
             -1.1319,  0.0125],
            [ 1.2337, -2.1434,  3.5538, -2.9134,  2.0939, -3.1011, -4.1939, -2.8344,
             -0.5512,  0.9568],
            [ 1.3052, -2.8413,  0.7548, -3.4073, -0.1247, -2.2362,  3.6197, -0.7540,
             -1.0743,  1.6259],
            [ 0.8317,  1.3452,  2.0921,  2.2497,  2.5484,  0.3228,  1.3325,  1.6844,
              3.1430,  1.2797],
            [-0.6136,  0.0790, -4.2657,  4.4477, -0.0140,  2.4391,  3.7797, -1.2809,
             -0.0740,  0.0426],
            [-1.8790,  4.6205, -2.6456, -1.3778, -3.6350,  1.6535, -5.3049, -1.4770,
              0.5931, -1.4424],
            [-4.3756, -7.6068, -4.6477, -0.8740, -3.7204,  3.1339,  0.9308, -4.4771,
             -3.0785, -1.8013],
            [ 1.8655,  3.7551, -0.7393,  0.4362,  1.8258, -2.2160, -0.8373,  0.2529,
             -3.1141, -2.5228],
            [-2.8198, -3.7827, -2.4478, -3.3715,  0.4735, -0.9424, -0.6491, -2.8071,
             -1.2262, -1.4105],
            [ 0.0662,  0.1615, -2.3280, -1.1930, -1.2330, -0.6773,  0.8690, -0.9350,
             -0.5062, -0.4310]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.930 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
