.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.5596, 12.6788,  2.6610, 11.3575, 15.1718],
            [ 9.0971,  7.7264,  4.2303,  8.3309, 12.2390],
            [10.1027,  5.7170,  4.0929,  4.8194,  7.8239],
            [ 6.3594,  8.5002,  8.5842,  9.3215, 12.1778],
            [ 1.3091,  3.9239, 12.8176,  5.9621,  1.3792],
            [ 6.3594,  5.6047,  7.4703,  2.1877, 12.1778],
            [10.1027,  3.8009,  3.4563,  2.9197,  7.8239],
            [ 9.0971,  7.1750,  3.9145,  2.6039, 12.2390]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.9804,  0.1718, -0.8067, -0.0795, -0.6007, -0.7806, -0.6684, -0.6941],
            [-1.1691, -0.1011, -2.4994,  0.2572, -0.9776,  0.1379, -0.5968,  2.1062],
            [-0.7532,  0.3600,  0.3474,  0.3065,  0.3227,  2.0402,  0.2643,  0.4900],
            [-0.5270,  0.0615, -0.5426, -0.9860,  2.5031,  1.2912, -0.1511, -0.3038],
            [-1.4398, -0.2516, -0.8609,  0.8124, -0.4201,  0.9131,  0.3949,  1.1032],
            [-0.8223,  0.4853, -0.8365, -1.8229,  1.4152, -0.8868, -0.2829, -0.6323],
            [ 0.0141, -0.0418, -0.7382, -0.2467, -0.5683, -1.9497,  1.5427,  0.1719],
            [ 0.2312, -0.0511, -1.2818, -0.1638,  0.0259,  0.8564, -0.4037,  0.7331]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2600, -1.0365,  1.0983],
            [ 0.3256,  0.8643, -0.6575],
            [ 0.1033, -0.4080, -0.4868]], requires_grad=True), Parameter containing:
    tensor([[1.3903]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.0387,  2.2479,  2.3831,  2.8725,  2.9410,  1.4668, -0.3963,  1.5143],
            [-3.1462,  1.7865,  2.6780, -0.6422,  2.2358,  0.9597,  1.9951,  4.1077],
            [ 0.8947,  1.8843,  0.7159,  2.4219, -0.9777,  1.7998,  2.9803, -0.4362],
            [ 3.5926, -1.0918, -2.1867,  2.5180,  2.5149, -0.6437,  2.5633,  6.5410],
            [ 5.2338,  0.0713,  4.6555,  6.5216, -2.5404, -1.6680,  0.2722, -1.0795],
            [-1.1598, -1.2762,  0.2899,  0.2966,  2.4572,  1.3285,  1.5286,  2.9677],
            [-0.3457,  3.4020,  3.4930,  2.6954,  5.3257,  3.8239,  1.5836,  2.9594],
            [ 4.3548,  4.1732, -1.4083, -4.3395,  2.7224,  4.4883,  2.5643,  0.8513]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5563,  0.1315,  0.1333,  1.6117,  0.2276,  0.8685,  0.2016, -1.7009,
             -0.4627,  0.6333],
            [-1.7311, -2.3937,  3.5210,  4.2884,  0.1737, -1.7713,  0.3812,  1.5938,
              0.0631, -0.7507],
            [ 1.7553,  2.6916, -3.0072, -1.5789,  1.6217, -0.9894, -1.4929, -0.2871,
              3.5221, -1.6891],
            [-1.0607, -2.6446, -0.4894,  2.0033,  3.1256,  2.4391, -0.9594,  0.7259,
             -1.6406,  1.2115],
            [ 1.3324,  2.4355,  0.9884, -1.1408, -4.8225,  1.8776,  2.8575, -1.9396,
             -0.0939,  0.4865],
            [-0.6451, -1.0111,  0.7677, -0.9404,  2.2085,  1.7388, -2.0723,  1.4418,
              0.9827, -1.0254],
            [ 0.0892,  3.0573,  0.8123, -1.6287,  2.9792, -1.5756, -4.0260, -2.1494,
              0.1315,  1.7513],
            [-2.6529, -2.0926,  2.7393,  2.0753, -2.2591, -2.3210,  1.6746,  4.3061,
             -1.7660,  0.1267],
            [ 0.6809,  1.4064, -1.4048,  0.3411,  0.3162,  1.3416,  1.6202, -2.8104,
             -0.5864, -0.5832],
            [ 0.2183, -0.9406, -0.8043,  0.7064,  0.4132,  0.1489, -0.7956, -0.3686,
              0.3937, -0.1034]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.811 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
