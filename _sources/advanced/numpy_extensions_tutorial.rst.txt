.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.8919,  3.8565,  5.4112,  2.5116, 16.7126],
            [ 5.6614,  2.7088,  9.0007,  4.2626, 10.7140],
            [ 6.7129,  8.7604,  4.1850, 10.4346,  6.3852],
            [ 5.1644,  9.9103,  4.2738,  4.2644,  7.5415],
            [ 7.5180,  7.6290,  8.8159,  5.5525,  1.2999],
            [ 5.1644, 13.3128,  1.0812, 10.8838,  7.5415],
            [ 6.7129,  8.5770,  5.1228,  6.3750,  6.3852],
            [ 5.6614,  2.5916,  6.0459,  9.7069, 10.7140]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7152,  1.1984, -0.2444,  0.7879, -0.2185, -0.7149, -0.9141,  0.7386],
            [-0.3511,  0.8637, -0.6536,  1.0934, -0.1465, -0.3105, -0.7260,  0.0352],
            [ 1.0618, -0.0597,  0.2451, -1.6595,  0.3499,  1.2119,  0.4574,  0.1175],
            [ 0.6982, -0.2538,  0.8367, -1.5911, -0.5027, -0.2908, -1.2279,  1.3875],
            [-0.3563,  0.8178, -0.4773,  0.5477,  0.5061, -0.2820, -0.4380, -0.5574],
            [-1.6748, -1.8202, -1.0997,  0.5433,  0.1708, -0.4554, -1.5935,  0.8951],
            [ 0.9021,  1.1256,  0.2739,  1.4855, -2.9861,  0.5701, -0.5430,  0.5822],
            [-0.5833, -0.7740, -0.8809,  0.8624,  0.2265,  0.3780,  1.3021,  0.9379]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0999, -0.3168,  1.3995],
            [-1.9733,  0.1118,  0.1902],
            [ 0.6614, -0.1690, -0.2122]], requires_grad=True), Parameter containing:
    tensor([[-2.1378]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.4563, -4.3936, -3.6574, -3.3324, -2.6100, -5.0384, -1.9649, -6.2620],
            [-3.4578,  0.6023, -1.5791, -3.8648,  0.6630, -2.0604, -3.0829,  0.1199],
            [-1.3760, -1.9265, -2.4836, -3.2379, -6.3281, -4.2206, -2.4113, -2.0849],
            [ 2.0193,  4.8686, -3.2428, -4.8636,  3.0200, -2.1910, -4.6999,  1.3679],
            [ 1.3634, -0.3722, -4.2385, -2.8865,  2.1384, -5.0758,  0.5746, -6.4691],
            [-0.5599, -1.1265, -4.3453, -2.4621, -2.7792,  0.2579, -2.3536, -1.5939],
            [-1.7242, -0.9048, -6.1829, -2.9349,  1.3515, -2.3453, -2.3207, -0.2330],
            [ 0.3452, -1.2208, -5.5360, -1.5260, -4.1732, -7.7620, -6.2873, -1.1929]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.5944e-02, -1.5990e-01,  5.9429e-01, -4.0141e-01, -9.6107e-01,
              8.2711e-01,  5.9537e-01, -1.2017e+00,  1.4135e+00, -7.6843e-01],
            [-6.9867e-01,  6.8323e-01,  1.9861e+00, -4.5744e+00, -9.9003e-01,
              4.0533e+00, -3.8142e+00,  2.0773e+00, -2.2612e+00,  8.7829e-01],
            [ 5.4511e-03,  4.1823e+00, -7.6657e-01, -3.5823e+00,  3.5358e+00,
              5.3479e-01,  1.5465e+00, -1.6400e+00,  1.4953e+00,  1.9481e+00],
            [ 2.8729e-01, -7.2879e-01, -1.7401e+00, -1.5220e+00,  4.2821e+00,
             -1.2601e+00, -4.9623e+00,  1.2454e-01, -8.3668e-01, -9.1501e-01],
            [ 1.0324e+00,  1.6472e+00, -5.8720e+00,  1.5443e+00, -2.0921e+00,
             -1.2026e+00,  4.1772e+00,  2.4875e+00,  8.3772e-01,  6.5481e-01],
            [ 3.5470e+00,  4.0248e-01,  1.2144e+00, -2.2170e+00, -3.3471e+00,
             -4.2369e-01, -3.8577e+00, -4.4554e-01,  1.8712e+00,  1.9374e+00],
            [ 1.8832e+00,  1.6028e+00,  3.0784e+00, -1.8376e+00,  1.8973e+00,
             -3.5604e+00,  2.0326e+00, -3.3247e+00, -3.2859e-02,  3.8864e-01],
            [-2.1415e+00,  2.6165e+00, -3.3408e+00,  1.5820e+00, -3.8602e+00,
              2.2320e+00,  1.9197e+00, -1.5627e+00,  3.4126e-01,  2.0782e-01],
            [ 2.5021e+00, -9.8998e-01,  3.1036e-01,  1.3063e-01,  1.2516e-01,
              7.4294e-01, -1.3580e+00, -3.1508e-01,  8.7192e-02,  6.9877e-03],
            [-7.3212e-01,  1.6114e-01,  2.5915e-01, -1.5137e-01,  4.5965e-01,
             -5.9741e-01,  3.8933e-01,  2.6870e-01, -1.7445e-01, -6.2625e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.762 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
