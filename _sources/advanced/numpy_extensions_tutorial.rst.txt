.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.7363,  8.5326,  2.2769,  2.1758,  8.6344],
            [ 7.0650,  2.7403,  8.2419,  7.9811, 10.6158],
            [ 7.6354,  7.4196, 10.6486, 18.3364,  8.8847],
            [ 9.4937,  9.5026,  5.0480,  8.5139,  6.3916],
            [10.1324,  5.4424,  6.5432, 10.4888, 12.2007],
            [ 9.4937,  5.9862,  7.3863,  0.8228,  6.3916],
            [ 7.6354,  3.7477,  7.1432,  1.6436,  8.8847],
            [ 7.0650,  9.6282,  5.7696,  6.5415, 10.6158]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1848,  0.6532,  0.7503, -1.7335, -0.2931, -0.7206, -0.8705, -0.4700],
            [ 0.5291,  0.7945, -0.5792,  0.0327,  0.1574,  1.2762,  2.3626,  0.6272],
            [ 0.1349,  0.6949, -1.0107,  0.3067, -1.0909,  2.3924, -0.1214, -0.4952],
            [ 1.4522, -0.4119,  0.7198,  0.0221, -1.8087,  0.5212, -1.4762,  1.7389],
            [-0.4975, -0.2264, -1.2417, -0.8377,  0.2990, -1.0840, -0.5583,  1.8677],
            [ 0.3592,  0.8611, -0.8010,  0.1195, -0.9673, -0.9877, -0.2192, -1.2246],
            [-0.7669,  1.2396, -1.2606,  0.8116,  0.3055,  0.2145, -0.1510,  0.2467],
            [ 1.9573, -1.3205,  0.8490,  1.0039,  0.5600, -1.3486,  0.5138,  0.1214]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7830,  1.0364,  0.2378],
            [-1.5329,  0.1118,  1.1991],
            [ 1.1469, -0.1411, -1.3086]], requires_grad=True), Parameter containing:
    tensor([[0.3898]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8120,  7.9923,  6.9077, -2.4117, -8.3504, -2.7049,  4.3896, -1.5223],
            [ 4.1657,  0.3678, -2.4146,  5.5148,  0.6160, -1.3699,  0.4936,  1.6020],
            [-0.2996, -0.6451,  0.5192, -0.9583,  4.0832,  3.7892, -3.0394,  2.6051],
            [-0.1774,  0.9692, -2.9541,  3.0799,  0.4171,  2.9733, -1.6566, -5.4075],
            [-2.3448,  1.0576,  4.5005, -3.2469,  0.8226,  1.6640,  2.9759, -2.3902],
            [ 0.7812,  0.6664,  4.0216,  2.6805, -3.6542, -0.2409, -2.0626,  2.8317],
            [ 0.5615,  0.1482, -2.0806,  3.8159,  2.5181, -0.4047,  0.2168, -4.5921],
            [ 3.3609,  2.7887, -0.5167, -0.9279,  1.5002, -4.5111,  5.1869,  2.5187]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.8669, -0.9340,  0.0380, -1.6188,  0.7869,  1.7386, -1.6181, -0.9830,
              0.2724,  0.0782],
            [ 2.5291, -0.1790, -1.5985, -0.4321, -2.0140,  3.2778, -1.4894, -3.1955,
              2.4730,  0.9547],
            [ 0.1530,  1.6040, -1.8153,  3.5453,  1.3362, -4.1841, -2.6983, -2.2267,
              3.0170,  2.5791],
            [-1.4119, -0.1912,  2.2404, -2.4479, -0.2682,  0.6580,  3.2171,  3.1390,
             -1.7957, -2.0679],
            [ 0.9827,  0.1736, -1.5648, -2.5582,  1.7149,  1.7264, -3.8076,  0.6506,
              2.8634, -0.3024],
            [ 0.4018,  0.9523, -0.9503, -0.2721, -0.1845,  1.4127, -1.0626,  1.3498,
             -1.3186,  0.3334],
            [-1.5823, -1.5042,  3.5974,  0.3195, -3.3433,  4.1238,  0.9659, -1.9062,
              0.2354, -2.5219],
            [-3.8743, -0.7808,  6.5962, -0.6263, -1.4224,  0.1172,  7.4564, -2.8731,
             -6.4126,  1.2461],
            [ 1.1740,  0.4395, -2.8327,  1.0979,  4.3645, -6.9802, -5.8080,  5.0728,
              3.8954, -0.1255],
            [ 0.8236,  0.6035, -1.5997, -1.3067, -0.7008,  2.6778,  1.1154, -2.3068,
              0.3519,  0.2651]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.795 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
