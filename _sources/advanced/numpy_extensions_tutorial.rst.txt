.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.5891,  9.3672,  5.2232,  4.3391,  8.0722],
            [ 4.4383,  5.7393, 10.1242,  9.9210,  8.6554],
            [ 9.4606, 14.8671,  9.5342,  9.2486, 11.8667],
            [ 2.0285,  4.5100,  4.9297,  5.5368,  3.1290],
            [ 8.1098,  6.3432, 11.9597,  6.4344,  7.5356],
            [ 2.0285, 13.8731,  9.1487, 11.5464,  3.1290],
            [ 9.4606,  9.3830,  5.3620,  6.8035, 11.8667],
            [ 4.4383, 13.6162,  8.1716,  4.6350,  8.6554]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.0013, -2.5302,  0.2929,  1.1965, -0.4471,  0.0639,  0.1062,  1.4004],
            [ 0.9990,  0.8421, -1.4760,  1.5788, -1.1033, -0.1405,  0.0593,  0.1862],
            [ 2.0513,  1.4371,  1.8174, -0.8265, -2.1104, -0.5731, -0.3438,  1.0958],
            [ 1.2310, -1.0751, -0.2959, -1.2642,  0.8662,  1.0782, -1.4251, -1.8136],
            [-0.9878, -0.8139, -0.5268, -1.1759,  1.0388, -0.2984,  0.2745, -0.0803],
            [-1.3349,  0.8061, -0.6092,  0.4448, -1.0358,  0.8696, -0.9123, -0.2720],
            [ 0.5968,  0.3101, -2.5152,  0.0217,  0.5937,  0.0300,  1.6568,  1.5069],
            [ 0.3994, -0.3548, -1.1335, -1.2036, -0.6539,  0.2724, -0.9014,  0.5226]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2180, -0.8805,  0.3260],
            [ 0.3763,  0.1705,  0.4967],
            [ 0.0767,  1.8123,  1.0086]], requires_grad=True), Parameter containing:
    tensor([[0.9148]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.4759e-01, -3.0296e+00, -3.6443e+00, -1.6932e+00,  1.2213e+00,
             -3.6911e+00,  1.0835e+00, -2.8008e+00],
            [-8.8294e-02, -2.9033e+00,  7.3089e+00,  9.3193e-01,  2.8305e+00,
              1.9805e+00, -1.1255e+00, -1.1889e+00],
            [ 3.0208e-01,  4.1384e+00,  4.7156e+00,  7.2494e-01, -9.1706e-01,
              2.1093e+00,  1.2854e+00, -2.2174e+00],
            [ 3.8229e+00,  7.9190e-01, -1.4033e+00,  3.8670e+00,  5.6246e-01,
              3.2254e+00,  6.5750e-04,  2.5384e+00],
            [-5.2315e+00, -2.3216e+00,  2.0167e+00,  5.0018e+00,  3.9475e+00,
              3.9523e+00, -2.6079e-01,  1.7922e+00],
            [-1.4526e-01,  1.5577e+00,  1.4974e+00,  3.5106e+00,  8.2971e+00,
              1.3801e+00,  3.5849e+00,  2.5737e+00],
            [ 3.1916e+00,  1.5056e+00,  2.5258e+00, -1.1904e+00,  2.9282e+00,
             -1.4251e+00,  3.2246e+00, -2.0192e+00],
            [ 2.9827e+00,  2.3505e-01,  6.7489e+00,  3.2131e+00,  2.2586e+00,
              2.2080e+00,  1.3798e+00,  1.3069e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0568, -0.2095, -0.0394,  0.3468,  0.4282, -1.8154,  1.5534,  0.2877,
             -0.5709,  0.2472],
            [-0.0476, -0.1133, -0.1346, -0.1396,  2.5120, -0.8361, -1.1023,  1.4686,
             -0.4588,  0.5371],
            [-1.1709,  2.3219,  0.6652, -0.6087,  0.8899,  2.8784,  0.7546,  0.1337,
              0.7691,  1.4167],
            [ 0.8594, -0.7632,  0.4674,  1.3378, -0.6047,  5.6139,  2.9613,  0.2952,
              1.3303,  0.9270],
            [ 1.2941, -0.9052,  1.1141,  7.3665,  3.3261,  0.5397,  2.6571,  1.8211,
              4.5516,  0.7584],
            [ 0.6744,  1.6893,  1.0893,  0.1932,  0.1004, -4.0111,  2.7020, -4.0058,
             -0.3141, -1.0302],
            [-0.5996,  2.2895,  3.2694, -1.4455,  4.4686,  1.1143,  3.0110,  0.6307,
              1.1970, -0.8614],
            [ 1.0317, -0.0911,  0.8024, -1.6024, -2.1750,  1.2163, -2.7479,  1.8155,
              2.1040, -0.6248],
            [ 0.3375, -0.7967,  0.8011,  2.2108, -1.0472,  0.0937, -1.2931,  0.4284,
              0.2052, -0.4109],
            [ 0.0784,  1.8799,  1.7312,  2.1419,  1.7548, -1.6089, -0.0424, -0.0778,
             -1.6110, -0.6855]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.801 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
