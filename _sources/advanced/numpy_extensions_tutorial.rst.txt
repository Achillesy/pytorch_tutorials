.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1303, 10.6664,  3.5270,  5.1240,  0.4664],
            [ 4.2136,  5.2028, 10.8120,  4.6886,  9.9040],
            [ 3.8520, 12.6288, 11.4290, 10.2481,  6.5211],
            [ 2.4845,  3.1998, 10.3046,  6.4619,  8.3005],
            [ 5.2001,  3.9617,  5.8321,  8.5561, 12.5343],
            [ 2.4845,  6.8417,  3.3170, 14.3179,  8.3005],
            [ 3.8520,  7.4767,  3.7501,  3.5899,  6.5211],
            [ 4.2136,  3.6407, 14.9210,  6.4403,  9.9040]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 7.6027e-01,  7.2734e-01, -8.6138e-01,  1.0883e+00,  8.8460e-01,
              1.2968e+00, -3.9505e-01, -1.3778e+00],
            [-1.2569e+00, -7.1388e-01, -2.6313e-01,  1.4600e+00,  8.4879e-01,
             -5.9349e-01,  6.3190e-01,  1.7097e-01],
            [ 4.5910e-01, -9.1143e-01,  1.3433e+00,  1.2546e+00, -1.9674e+00,
              1.9744e-01, -4.2139e-01,  5.7198e-01],
            [-1.3880e+00,  3.6751e-01, -4.7950e-01,  2.8713e-01, -6.5467e-01,
             -7.2483e-01,  4.4413e-02, -1.9556e-02],
            [ 3.2550e-01, -9.7006e-01,  1.3639e+00, -5.4246e-01,  2.0489e+00,
             -8.9934e-01, -1.6796e-01, -9.3440e-02],
            [-8.5158e-04,  1.1836e+00,  5.6002e-01,  6.0645e-01,  1.7817e+00,
              6.2678e-01, -1.6281e+00, -1.9557e+00],
            [ 1.9577e+00,  5.5641e-02, -1.7786e-01,  1.8646e-01, -1.5832e-01,
             -1.1078e-01,  5.8880e-01, -1.3908e+00],
            [-3.1037e-01,  8.1775e-01,  7.4788e-01, -1.1176e+00, -1.3730e+00,
              2.1345e+00, -5.4454e-01,  2.1997e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0919e+00,  7.2708e-01, -8.8686e-01],
            [-7.1765e-01, -4.0797e-01, -5.5498e-04],
            [-1.2253e+00, -2.0961e-01,  2.4468e+00]], requires_grad=True), Parameter containing:
    tensor([[0.1708]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2570,  1.4931,  0.3909, -2.5727,  6.3384, -2.2655, -1.5153,  1.9614],
            [-1.2585,  4.9189,  1.3896,  0.1726, -3.2491, -3.2215, -0.3304,  4.6628],
            [-3.1599,  1.3466,  2.8941, -1.0009, -1.0889,  1.6263, -1.7696,  3.4801],
            [-5.2699,  0.3895,  0.9465,  0.8813, -1.1571,  2.9392,  1.6251, -1.3909],
            [-1.0414, -2.4444,  0.6993,  3.0513, -0.2187, -1.7799, -0.9825,  2.5461],
            [-5.7454, -6.0037,  5.1814,  0.9051, -3.8701, -5.0213,  5.2857,  1.6447],
            [-2.9305, -0.1912,  2.5813,  0.9510,  2.4148,  0.7370,  1.3324,  5.2590],
            [-0.0908, -3.2585,  3.7996,  3.1727,  1.7479,  0.4462, -1.2526,  4.3151]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.6595, -0.3956,  0.8413, -0.4448,  2.8117, -0.3562, -1.2050,  2.1020,
             -1.4290, -0.4133],
            [ 1.6739, -1.1512,  0.4867, -0.1849,  0.8392,  1.6243, -1.0377, -1.7104,
              0.2524, -0.6011],
            [ 1.8324, -1.3110, -0.2216, -2.0378,  2.1733,  3.2834, -8.2482, -5.4188,
              4.7814, -0.0509],
            [ 0.2951,  0.1205, -5.5287,  1.2574,  4.3051, -1.4617,  1.2163, -4.3629,
             -0.3979,  1.2220],
            [ 0.6567, -1.3866, -0.4048,  3.8417, -1.4573, -4.1303, -1.0845, -5.7339,
              2.6626,  2.5042],
            [-1.2608,  0.8992,  4.8050, -5.8923,  3.1144, -4.0897, -4.3372,  2.1761,
              0.0971, -0.6132],
            [-1.4700,  1.2170, -5.5109, -4.1452,  1.3360, -2.5991,  3.9102,  0.0260,
             -2.8967,  2.5364],
            [-1.0711, -3.4547,  1.0957,  0.8571, -4.2491,  3.3971, -6.3140, -1.2291,
              3.0058,  5.6616],
            [-1.9165, -1.0433,  2.3573,  0.4053,  4.5175, -0.8019, -3.7688,  5.4214,
              0.3104, -1.0554],
            [ 1.3331,  0.2523, -4.4916, -0.7906,  2.6460,  1.4630,  1.6347, -0.6872,
              0.9124, -1.8222]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.485 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
