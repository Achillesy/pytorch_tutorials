.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.5656, 11.1305, 18.4775,  6.9270,  4.8561],
            [11.0785,  4.3861,  5.2974,  2.7377,  2.2990],
            [15.5803,  5.0529,  5.6343,  2.8942,  6.5769],
            [ 4.1578,  1.8628,  3.7811,  3.3125, 10.7295],
            [14.0496,  6.1244,  7.2790,  9.2668, 11.2434],
            [ 4.1578,  9.8581,  2.3405,  7.8865, 10.7295],
            [15.5803, 16.0130,  9.8600,  1.5757,  6.5769],
            [11.0785,  4.0774, 11.9311,  8.8676,  2.2990]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6226, -1.6487, -0.2952,  1.0966,  1.1538, -0.8282,  0.8167,  1.0363],
            [ 0.6309, -2.1614, -0.9607,  0.4291,  1.4219,  0.7937, -2.1967,  0.2022],
            [ 1.8521, -0.6160, -0.4598,  0.9291,  1.1830,  0.2953, -0.0105,  0.9973],
            [-0.0622, -0.0039, -0.0604,  0.6510, -0.3792,  0.0385, -1.4748,  0.6577],
            [ 0.1499, -1.6854,  0.2274,  0.4062,  0.4530, -1.4971, -0.6169, -2.7678],
            [-0.9985, -1.7887, -2.6992,  0.0745,  0.1642,  1.1701, -1.3945, -2.1450],
            [ 0.8375,  1.4223, -0.0151, -0.0479,  0.3073, -0.2889,  0.9352,  1.0431],
            [ 0.6936, -1.1382,  0.5214,  0.4260,  0.3710, -0.1961, -0.3275, -0.5664]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6260,  0.5796,  1.3741],
            [ 1.6614,  0.3908,  0.1563],
            [-1.0889, -0.4123,  1.0173]], requires_grad=True), Parameter containing:
    tensor([[0.1590]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.9005, -2.0281,  3.0066,  1.7206,  2.1409,  4.9614,  0.2952, -0.7479],
            [ 0.2406,  1.9970,  1.4523, -0.4515,  1.2251, -0.8722,  0.4800,  4.4434],
            [ 0.6865, -0.1766,  1.3540, -0.2112,  3.5990,  5.5768,  1.6216, -1.1651],
            [ 1.6537, -0.2166,  4.0419,  3.1258,  2.0075, -1.1018,  1.6390, -2.6339],
            [-0.5107,  3.0680, -0.0218, -3.8184, -1.6836,  3.2677,  4.4476,  1.2030],
            [-1.7897,  0.7380, -1.0003,  2.5889,  1.6642,  2.5661,  2.7826,  0.0278],
            [-0.3016, -2.9229, -1.6958, -1.0012, -2.6523,  3.1753,  1.8520, -4.3951],
            [-1.3302, -0.3925,  0.2518,  7.5180,  2.1908, -4.3016, -3.0822,  0.3120]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4736, -0.3362, -0.8117, -0.6272, -0.4720,  0.6882, -1.9093, -0.1406,
              2.1571, -0.3840],
            [-1.2652, -0.4020, -0.6592, -0.5101, -1.7513, -3.1284,  3.3945,  1.8218,
              0.2166,  0.5049],
            [ 0.5349,  0.6235, -1.6572, -0.5279, -1.1648,  3.6501,  0.1759, -1.8412,
              3.0040,  0.7145],
            [ 0.4462,  0.2753,  2.7301, -1.4881,  2.6061, -2.5828, -1.5892,  3.7298,
              0.4120, -2.8081],
            [-0.4323, -0.1674,  2.7467,  3.0849,  1.1605, -1.8422,  0.2704, -5.2054,
              1.9890,  1.4727],
            [ 0.6292,  4.1548,  5.3790,  0.1224, -4.3911,  2.1309,  2.8546,  2.3591,
              4.8573,  0.6339],
            [ 1.0377, -2.4542, -0.7603,  3.1734,  4.5292,  1.3293, -2.5098,  1.9307,
              1.2738, -0.1301],
            [-0.8754,  3.0621,  0.9240, -4.4023, -1.8744,  0.2537, -3.4511, -4.6902,
              4.0056,  3.4910],
            [-1.4935, -5.9352,  0.0135,  4.7721, -0.9250, -2.1449,  4.5457,  3.3569,
              1.0832, -0.8151],
            [ 0.7914,  2.7842, -0.6459, -4.1165,  1.6121,  3.0280, -4.1407, -3.4445,
              2.6291,  1.0732]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.783 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
