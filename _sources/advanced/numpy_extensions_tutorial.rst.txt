.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.9055,  5.8598, 10.7252,  9.7169,  4.6438],
            [ 8.5001,  8.5491,  4.9220, 10.8672,  6.8571],
            [10.7322,  7.1772,  5.2415,  5.6481,  3.2007],
            [ 7.6251,  8.5236,  7.6371,  7.7102,  2.2928],
            [ 7.8343,  9.8732,  7.3578, 10.2464, 12.6850],
            [ 7.6251,  8.1151,  0.3594,  5.0280,  2.2928],
            [10.7322,  8.8005,  5.4203,  7.1744,  3.2007],
            [ 8.5001,  8.6490,  7.9077,  2.9778,  6.8571]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0561,  0.4512,  0.8837,  0.3176,  0.3011,  0.9048,  1.6216, -0.3640],
            [-0.3772,  1.2576,  0.8001, -0.3466, -0.2215,  0.1529,  1.0652, -0.1312],
            [ 0.0709, -1.6520,  1.1186, -0.3990, -0.9625, -0.1742, -0.2307, -0.4238],
            [-0.1360, -1.5605,  1.1691, -0.0308,  1.2383,  2.0441,  0.4120,  1.8172],
            [ 0.0354, -0.8792, -0.1024, -0.6676, -0.5434, -0.1845,  1.9179, -0.4060],
            [-1.3784, -1.7077, -0.6182, -0.8483,  1.1384,  1.0869, -0.7460,  0.7537],
            [-0.4500,  0.1187,  1.2466, -0.1840, -1.0585, -2.5825, -0.8044,  0.5602],
            [-1.4063,  1.3082,  0.2454, -0.3929,  0.2192,  0.8890, -0.7295,  0.4037]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2667, -2.0303,  2.5714],
            [-2.0381, -0.4069,  0.4068],
            [-0.6001, -0.4860, -0.9786]], requires_grad=True), Parameter containing:
    tensor([[-0.8454]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.7486e+00,  2.7122e+00, -5.5531e+00, -6.0375e+00,  2.4817e-02,
             -3.0760e+00, -8.4174e-01,  6.5181e+00],
            [ 1.3548e+00,  1.1575e+01, -2.1267e+00, -7.1364e-01, -2.2766e+00,
             -7.8935e+00, -2.0187e+00,  8.9169e-01],
            [ 4.6583e+00,  1.2571e+00,  1.9982e+00, -1.3572e+00,  3.5959e+00,
             -7.2150e-01,  8.4618e-03, -6.0081e+00],
            [ 7.0358e+00,  7.6492e+00, -1.8683e+00, -1.8169e-01, -2.9532e-01,
              4.4221e+00, -1.1338e+00, -8.7589e+00],
            [ 1.0210e+00,  5.0239e+00,  8.9885e-01, -1.2188e+00, -1.0198e+00,
             -5.2482e-01,  3.3874e+00, -6.4333e+00],
            [ 4.3820e-03, -1.3921e+00,  8.9516e-01,  4.7440e-01, -1.3789e+00,
              3.5373e+00,  7.7513e-01,  4.7609e+00],
            [-6.6016e+00, -2.2639e+00,  2.2907e+00, -2.4908e+00,  1.2581e+00,
              2.2217e+00,  2.6121e+00,  3.8539e+00],
            [-3.2530e+00,  1.2750e+00, -7.5730e+00,  2.2933e+00, -2.4678e+00,
             -3.4334e+00,  3.7732e+00,  2.6159e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.6742, -5.8894,  4.2958,  4.9848, -4.0534,  0.2619,  0.8228,  2.4182,
             -3.7225,  1.4689],
            [-4.7334, -3.7482,  3.5646, -2.9312, -1.3213,  3.4980,  3.9136,  2.1406,
             -3.0253, -1.8468],
            [-0.8929, -0.7435, -5.8754, -1.2262, -0.3512,  7.5353, -1.4377,  0.4582,
              3.0499, -1.9342],
            [ 0.4024, -4.9093, -0.4308,  3.5788,  6.3241, -6.1633, -2.8059,  2.7820,
              5.6093, -0.0896],
            [-1.4854, -3.5749,  1.0835,  3.1663, -2.1525, -1.1876,  1.1650,  4.6266,
             -4.8000,  0.8270],
            [-0.9207, -0.0484,  2.0025, -6.3498, -2.2439,  3.6447, -3.1483,  8.1734,
             -1.3680, -3.1917],
            [-0.1274,  0.3103, -2.3821,  0.0670, -0.9884, -2.6828,  1.0597,  2.9506,
              5.6354, -2.8446],
            [ 0.9177, -1.1124, -1.5701,  0.0414,  2.1612, -3.5123,  1.3112, -0.9903,
              4.9988, -1.6089],
            [ 1.3677, -0.3904, -1.5425,  0.0189, -0.4227,  0.6453, -0.4716,  1.9507,
              0.0465,  0.3740],
            [ 0.3922,  0.4047,  0.5079,  0.6196, -0.0232,  1.4094, -0.0554,  1.3726,
              0.2652,  1.0013]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.507 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
