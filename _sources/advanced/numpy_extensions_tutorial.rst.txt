.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.1033,  3.3686,  6.9281,  6.3905,  4.3587],
            [ 5.2470, 10.4591,  7.6834,  9.5552,  7.6236],
            [15.5635,  7.2136,  8.7399,  5.8820,  6.2193],
            [ 9.4777, 10.4036,  2.2469,  7.8416,  7.1727],
            [ 3.3648,  4.7082, 13.9682,  2.5583,  2.1770],
            [ 9.4777,  4.8493,  9.2442,  8.1364,  7.1727],
            [15.5635,  5.2452, 11.0101,  1.6346,  6.2193],
            [ 5.2470,  8.4289,  3.9587,  4.8514,  7.6236]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8353, -0.2073, -1.4260,  0.1679, -0.5521,  0.7794,  1.3317, -0.2639],
            [ 0.5434, -1.3626,  1.5644,  1.4473,  0.4489, -0.7056, -0.2362,  0.7918],
            [-0.5020, -0.0605,  0.7926,  0.1028, -0.5083, -0.2666, -1.5482, -0.2770],
            [-0.3512, -0.5275, -0.6750, -0.3362,  1.5762,  0.5724, -0.4996, -0.8727],
            [-0.4455,  1.3520,  1.8222, -0.4831,  2.0819,  1.7123, -0.0608,  0.1797],
            [ 0.2939,  0.1039, -1.0025,  1.8886, -0.3399, -1.3347, -1.7401,  1.6433],
            [-0.5053, -0.2235, -1.4905, -1.9646, -0.6259, -0.2020, -1.7000,  0.4216],
            [ 0.2354,  0.2056,  0.7335, -0.0257, -0.4277, -0.7073,  0.1466,  0.5801]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6107,  0.4329,  0.5468],
            [ 0.6183, -0.1862, -0.6932],
            [ 0.0203,  0.5014,  0.1427]], requires_grad=True), Parameter containing:
    tensor([[-0.0828]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2648,  0.2585,  0.4114,  0.4608,  1.4294, -1.2971,  0.2020,  0.9927],
            [ 1.1775, -0.5751,  0.8444, -0.8622, -1.3033,  0.9950, -1.0391,  1.2895],
            [ 3.7853,  2.9376,  2.1648,  1.0450, -0.5725, -1.4074, -1.3388, -0.6142],
            [ 0.1483, -1.3565, -2.9452, -1.8146, -0.1011,  2.0315, -1.6323, -2.1049],
            [-0.9391,  0.0167,  2.9214,  3.5554, -1.0728, -3.4687, -1.9201,  0.2094],
            [ 1.4291,  0.8115, -1.0590, -1.9146,  0.2270, -0.1809, -1.3935, -0.4983],
            [-2.2451, -0.3327,  0.2643,  3.2924, -1.4840, -2.8290,  0.8072,  1.0034],
            [ 0.2988,  0.0870, -0.9004, -0.9004,  1.5543,  0.8603,  1.6530,  0.6730]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.7893e-01, -1.5837e+00, -1.1932e+00, -1.5899e+00, -2.7620e-01,
              2.2546e-01,  1.8838e+00,  2.2518e+00,  1.6116e+00,  5.7268e-01],
            [ 3.2518e-02, -5.0955e-01,  1.6673e+00,  1.8271e+00,  7.9017e-01,
              2.8094e+00,  2.0013e+00,  8.8347e-01, -4.0936e-01, -1.0396e-01],
            [ 8.6248e-01, -1.0512e+00, -2.4679e+00,  6.9451e-01, -3.4081e-01,
             -1.7819e-01,  2.2985e+00,  1.6878e+00, -3.1904e-01, -7.5594e-01],
            [-6.0972e-01, -7.4781e-01, -8.9425e-01,  6.1046e-01,  8.8864e-01,
             -1.2669e+00, -1.2964e+00, -1.0558e+00, -3.1324e-01, -3.4406e-01],
            [-1.6941e+00,  3.7454e-01, -7.0087e-02, -1.0453e+00, -3.0866e-01,
              1.4036e+00,  3.0860e-01, -9.4365e-01, -3.0842e-03,  9.2423e-02],
            [ 7.5527e-02,  1.7222e+00,  9.6255e-01,  1.2258e+00, -6.5712e-02,
              1.8795e-02, -7.7809e-01, -3.0212e+00, -1.0837e+00, -2.6320e-01],
            [ 1.8522e+00,  1.3100e+00,  4.5414e-01,  1.6946e+00,  1.2235e+00,
             -2.5667e+00, -6.6872e-01,  7.4354e-02,  4.8125e-01,  1.4230e+00],
            [ 1.3490e+00,  2.2554e+00,  1.6648e+00, -1.0268e+00, -3.1846e+00,
             -6.5825e-02,  6.4446e-01, -6.0981e-01, -2.7356e+00, -7.0566e-01],
            [ 3.9300e-01,  1.7653e+00, -8.9299e-01, -1.1185e-01,  1.8193e+00,
             -5.1512e-01, -1.8119e+00,  8.0802e-01,  1.7832e+00,  9.0370e-02],
            [ 1.1854e-02,  3.2854e-01,  9.3370e-01, -4.0141e-01, -5.3312e-01,
              5.6816e-02,  6.9200e-03, -9.5667e-01, -2.7082e-01,  4.4229e-04]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.839 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
