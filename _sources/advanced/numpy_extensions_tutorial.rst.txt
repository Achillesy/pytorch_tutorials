.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.1139,  3.0502, 12.5832,  3.6723, 10.9187],
            [ 3.7435, 13.6568,  4.1298,  8.1813,  6.6445],
            [ 2.6254,  4.5236,  3.9998,  7.2291, 10.0491],
            [ 4.3938, 11.9047,  2.0285, 16.5018, 12.6769],
            [14.7865,  8.2310,  5.9802,  2.0887,  9.3530],
            [ 4.3938,  6.7987,  6.2978, 12.4249, 12.6769],
            [ 2.6254,  5.1243,  2.5033,  7.8975, 10.0491],
            [ 3.7435, 12.1529,  5.1648,  6.9333,  6.6445]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9079, -0.1439, -0.7084, -0.4335, -0.2603, -0.7476,  1.1121, -0.8346],
            [ 1.5133, -0.7967,  0.3789,  0.7902, -0.2542,  0.7214, -0.4362, -0.0332],
            [-1.1571,  0.9082, -0.7363,  0.0617,  0.4745, -2.1245,  0.5699, -0.3324],
            [-0.3531, -0.4281,  0.2717,  1.3387,  1.8626, -0.2786,  0.6083,  0.2558],
            [-0.3900, -1.2087,  0.6193,  1.7436, -0.4632,  0.6730, -2.6491, -0.0812],
            [ 1.6950, -0.3467,  0.9328, -1.2355,  1.9655, -1.5930,  0.9195,  0.1141],
            [ 0.6309, -1.8201,  0.4934, -0.2002,  0.3308, -0.3956,  0.0148,  1.1263],
            [ 1.5230,  0.9661, -0.5120, -1.4222, -0.6732, -1.5977, -0.3989,  2.4526]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.8262, -0.2255,  1.0466],
            [-0.2648,  1.2441,  0.2778],
            [-0.6115,  1.3297,  0.9899]], requires_grad=True), Parameter containing:
    tensor([[0.1090]], requires_grad=True)]
    Output from the convolution:  tensor([[-6.4121e-03,  1.7416e+00,  1.1665e+00,  3.1382e+00, -3.1956e+00,
             -4.3340e+00,  2.1022e+00,  3.4458e-01],
            [-5.8469e-01, -5.7131e-02,  8.6699e-01, -3.3494e+00, -1.3049e+00,
             -2.7307e+00,  2.5880e+00, -1.1471e+00],
            [ 4.5534e+00,  1.7199e+00,  5.3042e-01, -1.3177e+00, -5.8806e+00,
              3.8789e-01,  5.4103e+00,  1.1957e-01],
            [ 3.2896e+00,  3.3692e+00, -1.7807e+00,  2.0025e+00,  4.5263e-01,
              2.0417e+00,  2.6265e+00,  5.0647e-01],
            [ 3.4931e+00, -3.1373e-01,  5.9686e-01, -4.2175e+00, -2.4484e-01,
              4.6424e+00, -4.8938e-01, -1.0614e+00],
            [ 6.0471e+00, -1.8890e-01, -2.9685e+00,  1.7284e-01, -1.1990e+00,
              3.4106e-01,  1.1028e+00, -1.1053e+00],
            [ 3.0122e+00,  3.0087e+00,  5.9613e-02, -2.7581e-01,  1.4436e-01,
              5.5642e-03,  6.4288e-01,  4.2159e+00],
            [ 6.5769e-01,  2.9882e+00, -2.0813e+00, -1.5175e+00, -2.8521e-01,
              2.1859e+00, -2.7623e+00,  5.4096e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7269,  0.0346,  0.5028, -0.4335,  1.8628,  0.9404, -1.2702, -1.3257,
             -0.3708,  0.7890],
            [-1.3890,  1.2924,  2.3932,  1.5028, -2.3482, -4.0189,  1.0284, -0.5855,
              0.7398,  0.7736],
            [-0.6794,  2.5558,  0.7133, -0.7608, -2.2444,  1.7860, -1.8838, -2.3495,
              1.2461,  2.6312],
            [ 0.0708,  2.3448,  1.9277, -2.5753, -2.7979,  0.7854,  3.5132, -2.8071,
              2.4370,  2.6901],
            [ 0.2972, -2.4353,  2.2987, -0.4538, -3.3212,  0.7939, -0.6163, -1.9199,
              4.2562,  1.7131],
            [ 0.9634,  0.4549, -1.1086, -3.8206, -1.5853,  2.5363, -3.9937, -5.1234,
              2.7438,  1.1652],
            [ 0.6743, -0.5242, -1.1762, -1.8731, -1.0985,  0.6358, -6.5642,  1.8923,
              0.3495, -1.3548],
            [ 0.2352, -1.3684, -0.3430,  0.1599,  0.6103, -2.4057, -3.6743,  3.1486,
             -0.9256, -1.3567],
            [ 0.4067, -1.1920,  1.2632, -1.8995,  1.3273, -4.1938,  1.7975,  3.0387,
             -1.4169, -1.0692],
            [-0.1902,  0.0752,  2.2427, -2.0463, -1.2704, -2.3242,  1.0143,  0.7147,
             -1.7602, -0.7526]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.805 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
