.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.7020, 12.5767,  6.8026,  8.5527,  0.0174],
            [ 5.7970,  7.0200,  8.2533,  4.7015,  6.7589],
            [ 2.8356,  6.5356,  7.9122,  6.4340,  4.1277],
            [11.3563,  0.5120, 10.7717,  3.8239,  7.2984],
            [ 2.9070,  1.1616,  7.7445,  6.0691,  4.6941],
            [11.3563, 12.4770,  6.8128,  8.6988,  7.2984],
            [ 2.8356,  6.5670,  1.8947,  8.3497,  4.1277],
            [ 5.7970,  8.7582,  7.1569,  4.4196,  6.7589]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1986e+00,  1.0976e+00, -1.0324e+00, -1.5453e+00, -5.5211e-01,
              4.7941e-01, -1.6492e-01,  4.1479e-01],
            [ 2.3629e-01, -9.7897e-01, -1.4584e-01, -1.2761e-01,  9.7372e-01,
              1.0629e+00, -3.8355e-01, -4.1480e-02],
            [ 9.5819e-01,  9.3919e-02, -1.2688e+00,  8.3070e-02, -5.8177e-01,
             -2.2075e-02, -5.5731e-01, -4.4693e-01],
            [ 1.8571e+00,  5.4213e-01,  1.3194e+00, -2.4077e-01,  2.6700e-01,
              3.5479e-01, -5.6742e-01, -1.0931e+00],
            [-7.4002e-01, -1.4952e+00,  6.3684e-01, -3.0933e-01,  3.9192e-01,
              1.1099e+00,  2.8409e-01,  1.0764e+00],
            [ 3.8151e-02, -3.1007e-01, -1.3582e+00, -2.0511e+00, -6.3901e-01,
              1.5479e+00,  6.4775e-01, -5.6200e-01],
            [ 6.4776e-01, -1.2688e+00,  1.0512e+00,  4.0208e-01,  1.9329e-03,
              2.7137e-01,  7.5598e-01,  1.0295e+00],
            [-6.8806e-01, -7.5168e-01, -1.2851e+00, -5.0930e-01, -2.1156e+00,
              7.3109e-01,  1.3690e+00, -4.0281e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4174,  1.5096, -0.1677],
            [ 1.9388,  0.8830,  0.2154],
            [ 0.9126,  0.1068,  0.4757]], requires_grad=True), Parameter containing:
    tensor([[1.8751]], requires_grad=True)]
    Output from the convolution:  tensor([[ 8.4114,  3.9856,  1.2833,  2.5794,  5.6581,  1.5496,  1.0439,  3.9001],
            [ 7.3564,  3.4804,  2.8727,  0.2384,  1.8730, -0.1538,  2.2695, -0.4204],
            [ 4.5817,  4.2487,  3.1119,  2.4526, -0.0854,  0.9315,  0.1125,  1.9513],
            [ 4.1429,  3.0746,  4.9450,  4.2662,  1.5727,  2.0788,  1.8246,  2.8201],
            [-2.6804,  3.6054,  3.5776,  3.1695,  4.0662,  2.5132,  3.2749, -3.6522],
            [-0.7226,  2.8306,  4.2019,  2.9403,  1.1193,  7.7337,  1.5213, -2.9179],
            [ 0.2461,  5.4981,  3.3381, -0.1451,  4.7511,  8.0688,  3.0982,  2.8491],
            [ 3.1013,  3.2839, -0.2292, -0.1083,  4.6902,  0.8947,  3.1698,  1.7157]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1395, -0.7969, -0.9952, -0.4088, -2.1388,  0.1300,  1.5867, -0.2812,
              0.3138, -0.0326],
            [-1.1053, -3.1978,  0.0101, -2.0432,  0.1092,  3.4997,  0.8108,  3.2281,
              3.5331, -0.3561],
            [-1.7286,  1.2908, -0.7424,  0.4259,  5.9456,  1.7901,  5.0107,  4.8187,
              3.2844,  0.5115],
            [ 1.6426, -0.7874,  0.3943,  3.8555,  0.6432,  3.3664,  1.6324,  4.1434,
              2.1830,  1.1159],
            [-1.0928,  0.7601,  0.0195,  0.5393, -1.6644,  2.1623, -1.7201,  6.9619,
             -0.7791,  0.5191],
            [-0.0535,  0.2867, -1.8415, -1.6620,  1.5254, -4.5851,  2.2250,  0.2721,
              0.0725,  0.3048],
            [ 1.4121, -1.2248, -1.3634, -3.0984, -2.1281, -2.3457, -2.5109, -4.3227,
              0.6930, -0.2937],
            [ 0.1324,  2.9811, -1.9811, -4.7753, -1.9596,  1.6361, -6.8312, -2.8826,
             -1.9401, -0.0403],
            [ 2.1781,  2.3270, -1.6474, -4.7695,  4.3522, -1.2998, -1.4235, -2.7127,
             -1.3793, -0.2318],
            [ 1.2390,  0.3667,  0.0723, -1.6166,  2.1421, -1.4480,  1.1380, -1.1785,
             -0.1539, -0.3636]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.828 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
