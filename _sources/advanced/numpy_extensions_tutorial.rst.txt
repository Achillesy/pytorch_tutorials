.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.2124,  2.0606, 10.9582,  1.7296,  2.6030],
            [ 4.6250,  4.1937, 10.5837,  7.3143,  7.9736],
            [ 7.4554,  8.6092,  6.1022,  2.9864,  6.8372],
            [ 6.6803,  6.6564,  5.1613,  4.6292,  8.5341],
            [ 2.7487, 15.4872,  0.6244,  8.6026,  3.4601],
            [ 6.6803,  6.1464,  4.3350, 11.2737,  8.5341],
            [ 7.4554, 14.4046,  6.2389,  3.3803,  6.8372],
            [ 4.6250,  4.1481, 10.7383,  4.6571,  7.9736]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7281,  0.5611, -0.4146,  0.4872,  2.8576,  1.5097, -0.0225, -0.4415],
            [ 2.1881,  0.7616,  0.5801, -1.7495, -0.5935, -0.6590,  0.2489,  0.9794],
            [-0.1119,  0.1314,  0.0912, -0.3441, -0.1346, -1.9255,  0.7266, -1.2234],
            [-0.6569,  0.6874,  0.1539,  0.3212, -0.9360,  0.5288,  0.3158,  0.4211],
            [-0.5508,  0.0693,  0.3983,  0.5529,  0.6361,  2.1368, -0.5726, -0.6128],
            [ 0.7395, -0.9197, -0.4377,  0.1777, -1.2406,  0.1152,  0.4675, -0.6585],
            [ 0.1745,  0.9906,  0.5781, -0.0874,  0.5115,  0.0708, -1.4127,  0.5795],
            [ 2.2179,  0.7464, -0.9941, -0.7131,  0.8030,  0.7005, -0.4741, -1.3895]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0124,  1.9025,  0.9682],
            [-1.6360,  0.2063, -0.7175],
            [-0.8850,  1.5711, -0.3034]], requires_grad=True), Parameter containing:
    tensor([[0.3838]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.9625e+00,  1.3700e+00, -2.2279e-01,  4.4972e+00,  3.0796e+00,
              5.8571e-01, -3.0869e+00,  6.0382e+00],
            [ 1.7574e+00, -6.4336e-01, -1.8543e+00, -1.6584e+00, -3.8199e+00,
              4.4448e-01, -3.5606e+00,  3.0640e-01],
            [ 3.1929e+00, -6.3959e-01, -7.4369e-01, -1.0718e+00,  4.8516e+00,
             -2.8805e+00, -5.9452e-01,  6.9829e+00],
            [ 1.7375e+00, -2.5436e+00,  2.1049e+00, -1.9461e+00,  4.3897e+00,
             -1.5298e+00, -4.1029e-01, -5.6486e+00],
            [-3.2182e-01,  1.8605e+00, -1.4889e+00, -9.4041e-01,  3.0479e+00,
              7.5949e-01,  2.3116e+00,  3.4587e+00],
            [-1.9741e+00,  6.3379e+00, -3.3669e-01, -3.2332e+00, -4.2235e+00,
             -3.7705e+00, -2.4309e+00, -4.2294e+00],
            [ 2.1487e-01, -3.3639e+00,  6.8139e+00, -5.3921e-01, -1.5206e+00,
              5.1700e-01,  4.6866e+00,  2.6928e+00],
            [ 6.2123e-04, -4.1561e+00,  9.7562e+00,  2.4617e+00,  1.8568e+00,
             -3.5683e+00,  2.2864e+00, -5.7137e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0131,  2.0029,  0.0985,  0.8943, -0.2317, -0.2978,  0.7446, -1.2752,
             -1.6055, -0.4001],
            [-1.7313,  0.4419, -3.4772,  2.1863, -2.3701,  1.2941,  3.6475,  0.1382,
              2.0771,  1.2367],
            [-0.4501,  2.0692, -1.4574,  6.8371, -3.9664, -0.3651,  1.1292,  0.1436,
              2.8169,  0.0936],
            [ 1.1155,  1.0109,  0.5504,  3.9286, -3.2265,  1.1600, -2.7068, -2.1421,
             -0.6503, -1.6303],
            [-1.8654, -0.0520,  0.3175,  3.7098,  1.3695,  3.3094, -1.4967,  3.4411,
              0.4720,  0.3013],
            [-3.4631,  6.0017, -0.1885,  2.1204, -4.2378,  4.0722,  0.1041,  3.1263,
             -3.0806, -0.1319],
            [-4.3646,  3.6827, -5.5599,  5.0291, -2.0540,  3.1813, -0.5834,  1.3899,
             -1.9952, -0.2524],
            [-3.5558,  3.4394, -6.3160,  0.3898, -5.1068, -1.2891,  1.3369, -0.4391,
             -2.1140, -0.2849],
            [ 0.4212,  4.1922, -3.9168,  5.5701, -1.2217,  1.3655,  1.3654,  1.6184,
             -1.2356,  0.8793],
            [ 0.7627, -0.6593, -0.9033,  0.9492, -1.7232,  1.4006, -1.3949,  1.3542,
             -1.5407,  0.2864]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.475 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
