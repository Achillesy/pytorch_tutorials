.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.0774,  8.9909,  3.3763, 11.5190,  2.5694],
            [16.3593,  7.9818,  3.2627,  6.9388,  1.7733],
            [13.4122,  8.1139, 13.4096,  3.0760,  2.5065],
            [ 3.4693, 14.3601,  3.8491,  5.5553,  3.9228],
            [ 7.5943,  5.4281,  6.4687,  8.5547,  5.2644],
            [ 3.4693,  5.8620, 10.2428,  3.7798,  3.9228],
            [13.4122,  7.4138,  7.3683,  0.4708,  2.5065],
            [16.3593,  2.2807,  8.5745,  4.9038,  1.7733]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8105, -1.0512,  0.6659, -0.0791,  1.1956,  0.3692,  1.1770,  2.5294],
            [-2.0218,  0.0947, -0.2151, -0.0229,  0.5803, -0.0435, -0.8818, -0.9768],
            [-1.5991, -0.6637, -1.3781, -1.8549,  0.1936, -0.3605, -0.3131, -1.1137],
            [-0.4304, -0.3116, -1.1886,  0.6239,  0.2119, -1.1865, -1.0969, -0.1207],
            [ 1.4186,  0.3823, -0.0593,  0.8538,  1.2704, -0.5182,  0.1201,  0.6340],
            [ 0.0681,  0.5008, -0.0779,  0.0851, -0.0677,  0.8853,  1.6425,  0.0513],
            [-0.6635,  0.7962, -0.2797, -0.2962,  2.5825,  1.5139, -1.2175, -0.1858],
            [-0.0181,  0.7026, -0.8219, -0.9521, -1.1652, -0.4108,  1.3563,  0.8718]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3458,  0.6614,  0.9833],
            [ 1.0766,  0.8348, -0.8212],
            [ 0.5687,  1.7073,  0.5283]], requires_grad=True), Parameter containing:
    tensor([[0.1858]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.3591,  3.1090,  0.9861, -2.2493, -3.3065, -4.4647,  0.1441,  4.0250],
            [ 2.3430,  2.0503,  0.3265,  3.3576,  3.3514, -0.3419, -0.2243, -0.2958],
            [-3.6007,  1.2414,  1.8899, -0.6651, -0.7885, -1.4395,  2.7901,  0.7824],
            [-2.9315, -4.3073, -2.1007, -3.7971,  2.1293,  6.4466, -0.9425, -0.6348],
            [ 1.9641, -0.2321, -3.9191, -3.9974, -3.6007,  1.6575,  6.5618, -2.6607],
            [-1.9440,  0.0221,  0.9160,  1.1716,  0.8129, -2.3791,  0.4161,  1.6069],
            [ 3.3003, -0.7218, -4.5432, -1.0042, -0.4373,  1.3098,  1.0304,  1.8218],
            [ 3.3862,  1.7381, -0.3195,  2.4476, -0.8526, -1.8048, -0.5063, -0.3253]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2787,  0.6317,  0.6113,  0.0298, -0.3727,  0.8692, -0.2050,  0.5842,
              1.0597, -0.3640],
            [ 0.7479, -0.1404, -3.5835, -2.4248,  1.2886, -1.7950,  2.3004,  0.0516,
             -3.0762, -0.1157],
            [ 0.1329, -1.1964, -1.3161,  0.4056,  0.3638,  1.8730, -2.1144,  0.2080,
             -1.0171,  0.8745],
            [-0.4641, -2.6255, -8.1215, -6.0816, -2.5445, -1.5499, -2.4521, -6.3869,
              1.4897, -0.6168],
            [-1.6508, -3.0112, -1.4374, -2.5133, -1.5017,  1.0217,  0.1484, -1.0591,
             -0.8267,  0.4508],
            [-2.5416, -5.0357, -3.8257, -3.6097, -6.3273, -5.5828, -5.2655, -1.1486,
              1.6293,  0.8229],
            [-2.0481, -3.2899,  3.0162,  3.7168, -2.2806, -0.0549,  2.7745, -4.4562,
              0.1490, -1.8027],
            [-0.0523,  0.3934, -0.9978, -0.4272,  3.6053, -1.3835, -4.9158,  1.9652,
              1.4254,  1.1390],
            [ 0.5363,  4.8135,  5.0887, -1.2715,  2.1962,  2.9538, -3.1887, -2.0750,
             -3.3843, -0.3552],
            [ 0.0809,  1.5186,  4.0607,  2.6215,  3.5963,  2.6205,  1.4652,  1.9766,
              0.0752, -0.1763]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.496 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
