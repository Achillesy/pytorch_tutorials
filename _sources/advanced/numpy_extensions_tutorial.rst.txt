.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.5475,  7.9949,  5.7016,  7.4990,  8.3249],
            [ 2.3266,  8.1537, 10.1806,  4.7699,  3.2062],
            [ 6.3510,  4.6798,  7.7068,  2.6597,  9.0505],
            [ 5.1115,  3.8815, 16.5022, 10.9708,  6.2619],
            [ 5.7055,  9.6738,  7.3800,  5.4845, 12.3818],
            [ 5.1115,  7.7867,  8.5462,  2.5009,  6.2619],
            [ 6.3510,  4.8401,  8.9699, 13.1150,  9.0505],
            [ 2.3266, 12.8056, 11.3073,  6.4804,  3.2062]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5336, -0.0392, -0.5274, -0.6465,  1.7810,  0.0733, -0.4502,  0.0878],
            [-0.5006, -1.0247,  1.9351, -0.6819, -1.1330, -0.0881, -0.0271,  0.1507],
            [ 0.8633, -0.0762, -1.5401,  1.5495,  0.0836,  0.4505, -0.7081,  1.8483],
            [ 1.2309,  1.5302, -1.5119, -0.0577, -0.1047, -1.5691,  0.4286,  0.7832],
            [-1.3668,  0.6021,  0.9564,  1.2657,  0.5418,  1.6902, -0.3258, -0.4412],
            [-0.6955, -0.4157,  1.0634, -1.1380,  1.3559, -0.1746, -0.8287, -0.1333],
            [-1.7285, -0.8817,  1.1965,  2.2170, -0.7124,  0.7407,  0.8570,  0.2998],
            [-1.8480,  0.9686,  1.6796, -0.2231,  0.0552,  1.7458,  0.6253,  0.0240]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2669,  0.0657,  0.4597],
            [-0.7692, -1.4930, -1.8216],
            [ 0.3839,  0.6714, -1.3159]], requires_grad=True), Parameter containing:
    tensor([[-1.8192]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2655,  1.0268,  5.2125, -1.1893,  0.8589, -0.5415, -2.6373, -5.4577],
            [-1.4104,  0.1655, -1.9332, -3.1531, -5.1519,  0.9451, -0.2663, -4.0696],
            [-7.3169, -2.1815, -3.4945, -7.6752, -6.7619, -2.2228, -3.0418, -0.7897],
            [-2.5117, -5.4523, -1.8849, -6.2940,  0.7667, -2.5052,  3.2056,  5.6641],
            [ 1.3156, -1.5797, -0.9074, -3.2458,  0.9609, -0.2839, -1.8324, -0.4734],
            [ 2.9693, -0.6603, -1.1748, -0.2244, -2.5459, -2.2425, -4.1407, -6.4026],
            [-1.2564,  0.1446, -1.6153, -1.5941,  2.7022, -1.7547, -3.4258, -2.1902],
            [-1.7963, -1.3720, -2.9555, -3.3666, -1.7965, -5.5837, -3.0551, -1.9598]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3150,  0.0186, -0.2260, -0.2363, -0.7553,  0.0555, -0.0822, -0.1048,
              0.6510,  0.2230],
            [ 0.6782,  2.3982,  4.2900,  1.9884,  1.0635, -0.5742, -1.4561, -2.3707,
             -3.0425, -0.6132],
            [-0.9893, -0.7778,  1.4222,  2.0224,  2.8377, -1.2176, -1.5264,  1.4136,
             -3.7456, -1.7883],
            [ 0.5295,  2.5925,  2.3451,  3.8735, -0.8552, -3.0404, -3.1873,  0.6221,
              4.3065,  0.1791],
            [-0.6619, -1.6533, -1.3493,  4.5569,  3.1535,  0.5215,  1.5192, -0.7090,
              1.5309, -2.5026],
            [ 0.0364,  1.9502,  1.3406,  0.9294, -0.1624, -1.1833, -4.3017,  0.5093,
              2.7748, -1.4948],
            [-0.3268, -0.3720, -0.0767,  6.0695,  1.8187,  0.2161, -0.3835, -3.3248,
             -1.3547,  1.7337],
            [ 0.8276,  1.0293, -2.0453,  0.6100, -0.3581,  1.3358,  1.6617,  3.7196,
              1.5661,  1.2898],
            [ 0.8839,  1.4086,  3.0189,  2.3414, -2.8021,  0.8914, -4.5296, -2.9106,
             -2.4347, -0.4517],
            [-0.5053, -0.8843,  1.6942, -0.1976,  0.1892,  0.9846, -0.2817,  1.4072,
             -2.3034, -0.4322]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.478 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
