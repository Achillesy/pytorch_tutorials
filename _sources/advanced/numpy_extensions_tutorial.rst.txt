.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.4704,  4.6788,  2.4477, 14.6450,  0.6019],
            [ 6.0270, 11.2251,  4.2640,  7.2584,  4.9153],
            [ 4.5366,  4.8078,  9.3429, 16.2236, 10.9877],
            [ 2.3230,  2.3283,  4.6774,  6.6213,  3.0971],
            [ 0.1958,  7.7966, 10.2473,  0.4129,  2.7398],
            [ 2.3230, 15.6385,  2.5197,  2.6603,  3.0971],
            [ 4.5366,  7.4648, 20.3465,  9.3179, 10.9877],
            [ 6.0270,  6.1385,  7.8896,  6.0859,  4.9153]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0059, -0.2260, -0.5865, -0.0493,  2.1725, -0.2734, -0.5276, -0.4280],
            [-0.7415, -0.8661,  0.0856, -1.0546,  0.3633,  1.8333, -0.0375, -0.6800],
            [-1.3710, -0.5985,  0.0314, -0.3674, -0.8576, -1.2261,  0.1123,  0.9212],
            [-0.7387,  1.6862, -0.0721, -0.4241,  1.7791, -1.1124, -1.2777, -0.5868],
            [ 1.0066,  0.3962, -0.7373, -0.9891,  1.7217, -0.8828,  0.9530,  0.1312],
            [-0.0945,  1.6943,  1.1691,  0.6384, -2.3962, -0.3493,  1.1568, -1.1497],
            [-1.3623,  0.0650,  0.5841,  0.5446, -1.2554, -0.0840,  0.3771,  1.6622],
            [ 0.0024,  1.8032, -0.0676, -1.7856,  0.3814, -1.8174, -0.7127,  2.0386]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1508, -0.0710,  1.4144],
            [-0.6385,  0.1452,  0.1778],
            [ 0.6918, -0.1537, -1.1716]], requires_grad=True), Parameter containing:
    tensor([[-1.5943]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.8735,  1.3952, -2.9515, -4.0495,  0.3987, -5.9894, -2.3825,  3.0231],
            [-4.0036,  2.7097,  1.9244, -4.6424, -2.5418, -1.3230,  2.8002,  2.3574],
            [-0.7232, -8.6195, -1.8094,  6.7161, -3.4180, -2.8668,  2.3928, -3.5440],
            [-1.5158, -4.6473, -2.2335, -1.1361, -0.2938, -3.0243, -4.6957, -0.1152],
            [-1.6735,  3.4197, -0.7461, -4.7328,  1.2043, -2.5704, -4.2415, -2.0967],
            [-4.7928, -3.3016,  1.9937,  1.9215, -4.2229,  1.3609,  0.0223, -3.7001],
            [-0.4226, -1.8006, -0.8611, -1.9958, -0.4413,  1.8580, -3.9041, -0.0328],
            [ 2.4154, -1.8466, -5.0306, -2.4328,  1.9011, -3.0333, -2.2422, -2.2149]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2448,  0.8927, -0.5711, -0.2306, -0.1570, -2.9252,  0.5711,  4.2310,
              0.2038, -2.4549],
            [ 2.2611, -0.0814, -1.4715, -0.5845, -1.9143,  2.2832, -0.3790,  0.9902,
              0.0161, -1.3370],
            [ 0.8781, -0.3273,  1.3123, -3.2323,  1.2640,  3.4105, -4.3473, -2.3440,
              2.6941,  2.8845],
            [-2.3264,  2.3262,  1.5882, -2.6646,  3.5854, -2.3509, -2.1878,  2.5411,
              0.8669, -0.7634],
            [ 0.8253,  0.0995, -3.7938,  2.3362,  0.2220, -1.3732,  4.1172, -1.9849,
             -2.1252, -0.1131],
            [ 1.9662,  0.0064, -3.2657, -0.1244,  0.0089,  1.0424, -0.0807, -3.2582,
             -0.7187,  4.3008],
            [-0.0999,  2.1184,  1.9950, -2.8202, -0.0596, -0.9868, -2.8913,  1.1226,
              1.1480, -1.3609],
            [ 0.2639, -0.1497,  2.1924,  1.5423, -4.2319,  0.1943,  3.5215,  3.3487,
             -2.4250, -5.2317],
            [ 0.1179, -0.8906,  0.6800,  0.6143,  0.2751,  0.8863,  2.0108,  0.2198,
             -1.5850,  0.4267],
            [-0.3117,  0.2076, -0.2541,  0.2667,  1.5346, -0.7966, -1.9051, -0.8204,
              2.6278,  2.3513]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.906 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
