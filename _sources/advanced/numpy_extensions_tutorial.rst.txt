.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.2236, 11.9700, 13.4968,  3.7198,  3.6936],
            [14.0346,  8.4709,  5.1749,  1.9437, 13.0178],
            [10.7832,  5.6557,  7.5277,  7.7424,  5.4481],
            [ 5.7678,  1.0560, 12.3844,  0.9148,  5.1350],
            [ 6.4393,  8.0587, 11.2877,  2.8814,  7.2527],
            [ 5.7678,  3.0870,  3.6306,  5.6049,  5.1350],
            [10.7832,  4.0254,  3.7030,  8.6678,  5.4481],
            [14.0346,  5.7736,  7.6446,  4.2958, 13.0178]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.8097,  1.7496,  0.3188, -1.8512,  1.0280,  0.7089, -1.2735, -0.5541],
            [ 2.8469,  0.2309,  0.3172,  1.8788,  1.8480, -0.0278,  0.5245,  0.6664],
            [ 1.5186,  1.0899,  0.8443, -0.2990, -0.4624, -0.0443,  1.1343, -0.5809],
            [ 0.4227,  0.0241, -1.5378, -1.2973, -0.5047,  0.3234, -1.0104,  0.5381],
            [ 0.5677, -0.0464, -0.3427, -0.9421, -0.3640, -0.8068, -0.0698,  0.2389],
            [-0.3844,  0.8501, -0.8119,  1.0304, -0.3596,  0.1228,  0.0312,  0.5182],
            [-0.0156,  1.2863, -0.3716,  1.2586, -1.2218, -0.4261, -1.5142, -0.9751],
            [ 0.0377,  0.7836, -0.5869,  0.5573,  1.0422, -0.5305, -0.6957,  0.9838]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0925, -1.3002,  0.1208],
            [ 1.4447,  1.4296,  0.0840],
            [ 1.6438, -1.7842,  0.0503]], requires_grad=True), Parameter containing:
    tensor([[2.2326]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5264,  4.4161, -0.4168,  0.6183, -0.6965,  6.8577,  8.3016,  3.6075],
            [ 1.0108,  3.0864, -2.3644,  4.2396, -2.9110,  4.4454, -1.9449,  2.6640],
            [ 0.8816, -2.4421,  5.7939,  8.4490,  3.9118,  4.8652,  1.2060, -0.0376],
            [-1.5398,  7.5904,  5.1632, -2.5685,  3.5717,  0.2284,  7.4205,  4.6073],
            [ 6.8135, -1.5808,  2.7879,  5.2267,  0.8392, -1.2654, -1.9735, -2.5888],
            [-3.2995,  3.5724,  7.5519, -4.4659,  2.0901,  3.2184,  6.5493,  9.2367],
            [ 2.3534, -0.1936,  4.0513,  0.8191,  4.3286,  5.3032,  4.9497,  2.0431],
            [ 1.9243,  4.3434,  3.4760,  7.3275,  1.7155, -0.1491, -0.9508,  4.7264]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-7.2726e-02, -1.1876e+00, -2.2269e+00,  2.1275e-01, -1.2946e+00,
              1.3256e+00, -2.2252e+00, -8.6104e-01,  4.6865e-01, -3.4266e-02],
            [ 1.0573e+00,  2.5864e+00,  2.0695e+00, -6.4033e-01,  1.4186e+00,
              4.5330e-01,  2.2438e+00,  3.0546e+00, -1.1317e+00,  3.2190e-02],
            [ 2.4070e+00,  1.6539e+00, -9.0522e-01,  4.9197e+00, -3.9593e+00,
              4.9675e+00, -1.3504e+00, -2.9261e+00,  4.0500e+00, -2.5465e-01],
            [ 3.0416e+00,  2.1688e+00,  1.3511e+00, -5.4221e+00,  3.8757e+00,
              5.6734e-03, -5.1439e+00, -1.5903e+00, -5.1845e+00, -7.0885e-02],
            [ 1.1763e+00, -1.4327e+00, -5.1361e+00, -1.6304e+00,  2.3480e+00,
             -2.9831e+00,  7.5700e-01, -3.6530e+00,  5.0141e+00,  1.3240e-02],
            [ 1.9527e-01,  5.0119e+00, -1.4231e+00, -1.2371e+00,  4.0443e+00,
             -1.8680e+00,  5.7602e+00,  3.7521e+00, -7.8518e-02,  4.1674e-02],
            [-8.1916e-01, -3.6789e+00, -5.5832e+00, -1.5875e+00,  5.2052e+00,
              3.1926e+00,  4.1631e+00, -3.6357e+00, -2.0728e+00,  6.9457e-02],
            [-1.0880e+00,  1.7326e+00,  2.3376e+00, -4.7072e+00,  2.5420e-01,
              3.4766e-01, -2.9075e+00,  1.7586e+00,  2.7573e+00, -9.7651e-02],
            [ 6.9264e-01, -3.4456e+00, -2.7106e-01,  1.2848e+00,  5.6930e-01,
             -1.0301e+00, -8.3915e-01, -1.8328e+00, -2.7345e+00, -6.0769e-02],
            [-2.3431e-01, -2.7293e+00,  6.9060e+00, -4.0635e+00, -1.8388e+00,
              2.7741e+00, -2.5322e+00,  1.2261e-01,  1.8866e+00, -5.4698e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.501 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
