.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.2287,  9.4028, 10.6378,  6.1834, 15.7501],
            [ 6.2997,  2.0591,  6.2876,  5.2094,  3.6624],
            [ 2.9450,  4.8534,  5.3433,  5.0925, 11.4221],
            [ 4.8200,  2.1039,  8.7673,  7.9979, 11.3697],
            [ 3.8478,  2.9585,  4.0207,  3.0010,  3.6117],
            [ 4.8200,  8.9118,  3.8996,  5.5952, 11.3697],
            [ 2.9450,  9.3333,  5.6743,  6.9198, 11.4221],
            [ 6.2997,  3.4705,  6.6900,  9.0756,  3.6624]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2667, -2.1772, -0.0186,  0.3318, -0.3998, -0.0768,  1.4440,  1.0343],
            [ 0.2603,  0.2486,  0.4334,  1.2257,  0.4489, -0.8418,  1.0842,  1.6185],
            [-0.1332,  0.1460, -0.6313, -0.2849,  0.2321,  0.1341,  1.5097, -0.5073],
            [-0.6741,  0.3960, -0.7136, -0.7677,  1.1819, -0.2730, -0.0402,  0.3405],
            [ 0.4643, -1.9629,  1.2350, -0.6748,  1.0882, -1.0918,  1.1601, -0.4277],
            [ 0.7367, -0.2872,  0.0499, -1.1385, -0.8825,  0.1662,  0.3911,  0.2204],
            [-0.6926, -0.0458,  0.3277, -0.3477,  0.3422, -0.5293, -1.0088,  1.9847],
            [-0.6723, -1.1673,  1.2261,  0.0088,  1.3005, -0.0263,  1.1735, -0.4885]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9639, -1.9013, -0.2932],
            [-0.9387, -1.4654, -1.0038],
            [-2.1736, -0.8263, -1.0309]], requires_grad=True), Parameter containing:
    tensor([[0.5911]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.1658,  4.3262,  3.3383,  4.0973,  4.1762,  4.6770,  4.9563,  1.3943],
            [-5.4411, -2.5984, -2.2378, -0.8023, -0.1580,  5.2177,  0.8112,  2.4716],
            [-8.4684, -5.6291, -5.8265, -1.0949, -0.2591,  4.9389,  1.3167, -5.1603],
            [ 1.2715, -7.6807, -3.3601, -0.0790,  4.3227, -1.1507,  0.3921, -0.7514],
            [ 6.0577,  3.1743,  1.2932,  3.1986,  2.0840, -0.0835, -2.2549, -2.7120],
            [ 1.7609,  7.8643,  8.3692,  4.6856,  2.9730,  1.0399, -1.7736, -0.4579],
            [ 2.0881,  6.8566,  8.0088,  3.9843, -8.0448,  2.3292, -4.0697, -4.4996],
            [ 0.7237,  5.1851,  0.0320,  0.6003, -1.9530, -3.6704, -1.8252, -1.8866]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 6.2402e+00,  5.9902e+00, -2.6558e-01, -6.6568e+00, -6.9168e+00,
              8.6686e-02,  4.0607e-01,  6.9925e-01,  1.5875e+00,  2.8089e-01],
            [ 2.0866e+00,  2.2205e+00,  9.9364e-01, -2.2139e+00, -5.3578e+00,
             -6.3068e+00, -2.0708e+00, -2.5513e+00, -2.5280e+00,  4.7484e-01],
            [ 3.9007e+00, -9.4919e-01, -1.6578e-01, -5.7134e+00, -1.0919e+00,
             -3.6940e+00, -4.7608e+00,  2.4124e+00, -1.0563e+00, -5.1967e-01],
            [-4.0290e+00, -8.4517e+00, -6.4097e+00, -2.8504e+00, -1.5386e+00,
             -5.3857e+00, -7.7259e+00, -1.0804e+01, -3.5262e+00, -1.7346e+00],
            [-1.6187e+00, -2.6142e+00, -9.2270e+00, -4.7932e+00, -3.0541e+00,
             -7.2288e+00, -1.4956e+00, -6.7941e-01,  1.1009e+00, -8.5193e-01],
            [ 1.2469e+00, -3.2670e+00, -4.9587e+00, -6.5331e+00, -5.2296e+00,
             -9.5544e+00, -4.0886e+00, -2.6810e+00,  1.6186e+00,  6.5644e-03],
            [ 6.2367e+00,  2.9802e+00, -2.6856e+00, -1.7521e+00, -4.2286e+00,
             -1.4335e+00,  1.1451e-01,  5.3120e+00,  2.5913e+00,  2.3598e+00],
            [ 4.5487e+00,  2.1966e+00,  5.9271e+00,  5.6604e-02, -2.5377e+00,
             -2.6075e-01,  9.6489e-01, -2.3811e+00, -3.1829e+00, -3.8127e-01],
            [ 3.4855e+00,  2.4913e+00,  2.7341e+00,  1.6158e+00, -2.8199e-01,
              1.0131e+00,  9.7386e-01, -2.1220e+00, -3.3695e+00, -2.4159e+00],
            [ 7.8227e-01,  1.4584e+00,  2.5412e+00,  1.6882e-01, -9.2383e-02,
              1.3005e-01, -7.3934e-01, -4.2442e+00, -2.0268e+00, -2.0521e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.505 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
