.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.5389,  5.5322,  8.4953, 12.4689,  4.9613],
            [ 1.6113,  7.0759,  7.9735,  6.6619,  7.1647],
            [ 4.7953,  7.7891,  4.3150,  9.1513,  4.5127],
            [13.5069, 17.3328,  6.4920,  5.5188,  2.6798],
            [ 2.3523,  8.6855,  9.4949,  3.4790,  9.9726],
            [13.5069,  9.5447, 10.0341, 12.1488,  2.6798],
            [ 4.7953, 10.9167,  9.4225,  8.0429,  4.5127],
            [ 1.6113, 10.9731,  9.4916,  4.5737,  7.1647]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.6391, -0.0849, -0.8048,  1.6141, -0.6089, -0.5505, -0.2290, -0.7439],
            [ 0.3525, -0.5377, -0.0819, -1.0598,  1.1125,  1.4422, -0.8253,  0.5431],
            [-0.0714,  0.4341,  1.5660, -1.4735, -1.3410,  1.2846, -0.9886,  0.1147],
            [-0.3044, -1.3558, -0.8717, -0.2758,  0.1563, -1.1075,  1.0499,  0.1928],
            [ 0.1210, -1.6709,  0.1729, -0.1820,  1.9711,  1.7585, -0.3243,  1.7033],
            [ 1.4491, -0.9380,  0.6070, -1.1183, -1.3112, -1.5885, -0.7380,  1.2536],
            [-1.0826, -2.2191, -0.3299, -1.4537, -0.4070, -0.2515,  1.0198,  1.2508],
            [ 1.1620,  0.1289,  0.9268,  1.5228,  1.7360, -1.1967, -1.2326, -0.1855]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.7437, -0.8030,  0.7792],
            [ 2.0784, -0.8551, -1.4689],
            [-0.2277, -0.9017, -0.4514]], requires_grad=True), Parameter containing:
    tensor([[0.0246]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.2890,  0.4165,  1.1377,  3.0874,  1.7138,  3.4312, -3.4640,  3.9916],
            [ 2.4056, -0.0085,  0.5859, -1.4712, -0.7515, -3.0338,  3.7236, -5.1355],
            [ 1.4507, -3.0173,  1.2844,  3.8176,  1.4041, -0.0844,  0.7026,  2.5294],
            [ 0.3322,  5.5036, -1.6172, -1.0386, -1.6465, -1.7374, -3.4475,  4.8944],
            [-0.8176, -1.7389,  0.6303, -4.8048,  1.3252,  5.6952,  1.2798,  2.2613],
            [-4.0188, -3.2416, -1.4923,  2.9104,  3.8357,  4.2352, -6.5211, -1.8219],
            [-5.7779, -7.7347, -0.6757, -3.8363,  6.2131, -1.3625, -5.2898, -2.0545],
            [-8.4506, -8.1115,  7.7075, -0.8229,  3.4842, -0.8130, -3.6997,  4.0887]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.5850e-01, -2.2078e+00,  1.8089e+00, -3.9321e+00,  7.9685e-01,
              3.0929e-01,  2.7381e+00, -1.0504e+00,  1.5282e+00,  5.1242e-02],
            [-1.2092e+00, -8.3138e+00,  7.4840e+00, -5.2542e+00,  2.3789e+00,
             -6.2519e-01,  6.8687e+00, -6.4259e+00, -1.8004e+00, -1.1585e+00],
            [-5.1386e-01, -6.6170e+00,  3.4288e+00,  3.6886e+00, -1.8026e+00,
             -3.6449e+00, -4.2277e-01, -1.0113e+00, -7.0956e-01,  2.8683e+00],
            [-1.0164e+00,  1.2194e+00, -2.1431e+00,  1.2696e+00, -1.1943e+00,
              7.5080e-01, -2.2476e-02,  2.6889e+00, -1.2407e+00, -2.0884e+00],
            [-1.0642e+00,  3.0862e+00,  2.1802e+00,  3.1217e+00, -2.8457e-01,
              3.9077e+00, -2.2542e+00,  2.1282e+00,  3.2808e+00,  2.0889e+00],
            [-4.6869e-01,  4.2369e+00,  2.0986e+00, -2.6214e+00, -3.3786e-01,
              1.9901e+00,  2.5367e+00,  2.3162e+00,  3.2366e-01, -8.9856e-01],
            [-2.8952e+00,  1.5600e+00, -8.1420e-03, -4.9089e+00, -2.3764e+00,
             -1.2203e+00, -5.7315e-01, -2.4023e+00,  5.7017e-01,  3.2396e-01],
            [-1.4196e+00, -2.5478e+00,  3.8541e+00,  8.2874e-01, -6.8841e+00,
              7.6922e-01,  5.0421e+00,  5.0647e+00, -3.4412e+00,  9.7664e-01],
            [ 1.4342e+00, -2.1397e+00,  2.5464e+00,  5.1541e+00, -6.2902e+00,
              1.9594e-01,  5.6402e+00,  3.4282e+00, -3.6516e+00, -3.3067e+00],
            [-1.2733e-01, -1.9293e-01,  8.4562e-01, -2.8217e-01, -1.2317e+00,
              1.2585e+00,  1.1082e+00, -7.9862e-01, -2.1146e+00, -9.4491e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.830 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
