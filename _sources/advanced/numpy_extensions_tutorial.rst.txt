.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.3345,  3.6758,  4.6759, 11.1708, 17.0632],
            [ 8.2956,  6.4657, 11.6872,  4.4273,  7.3581],
            [ 6.6378,  2.6087,  3.5044,  4.3485,  5.5604],
            [ 3.8325,  9.5155,  4.6596,  5.7404,  1.8755],
            [ 5.4917,  1.8341, 12.7013,  9.7794,  5.4045],
            [ 3.8325,  1.8487,  5.7978,  2.5346,  1.8755],
            [ 6.6378,  7.5578, 13.5703,  2.4360,  5.5604],
            [ 8.2956,  8.2005,  9.8481,  5.3007,  7.3581]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1408,  0.1644, -0.3678, -0.5378, -1.1931, -1.1224,  0.1220,  0.4074],
            [ 0.2574,  0.4601, -0.2479,  0.6039, -0.9784, -0.0574,  0.7606, -1.0547],
            [-1.4927,  0.8443,  0.1388, -0.8978,  0.4955, -0.5985, -0.7484, -1.6028],
            [-1.1547, -1.3581, -0.1334,  0.7471, -0.2354, -2.3727,  1.7921, -0.8818],
            [ 0.9187, -0.5832, -1.2969,  0.5735,  2.0386,  0.1866, -0.7026, -0.5504],
            [ 1.7607,  0.4879,  0.2342,  1.1675,  1.2659, -1.6244, -0.0331, -0.4557],
            [ 0.9668, -0.8033, -0.0591, -0.9995,  0.7962, -0.2587, -0.0486, -0.3431],
            [-0.0094, -0.9187,  0.6992,  0.1686, -0.4374, -0.7737,  1.6158, -0.2154]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0829, -1.1829,  0.9666],
            [-1.3928, -1.1448,  0.7289],
            [ 1.0587,  0.2633,  1.0819]], requires_grad=True), Parameter containing:
    tensor([[0.7103]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.1352,  2.5944,  2.5120,  3.1675,  0.7279,  0.5313, -0.9677,  3.4309],
            [ 5.2491,  2.5328, -4.0379,  2.5245,  6.4273,  0.8836, -6.1593, -5.7040],
            [-0.0423,  3.7279, -2.8224,  0.2954,  3.2871, -1.6971, -5.4381,  1.1664],
            [-7.6804, -2.2267, -2.4470, -0.0641, -0.7168, -3.8317,  0.5575,  5.4469],
            [ 1.2507, -1.9991, -2.4434,  0.8053,  2.7063,  3.6127,  3.6078,  2.9868],
            [ 1.1358,  0.2392,  3.1729,  8.0677,  3.9361,  0.1165, -0.0780, -3.4349],
            [ 5.1433,  0.6684,  4.8822,  0.2588, -0.8733, -0.0933, -0.1065,  1.8289],
            [ 4.4408,  3.3389,  0.7766, -8.2487, -3.5825, -1.4170, -0.6663,  0.2209]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.0267e+00,  3.0618e+00, -4.5254e-01, -3.6793e+00,  1.7416e+00,
              1.3547e+00,  1.2262e+00, -8.9293e-01, -1.7796e+00,  9.0813e-01],
            [ 1.7048e+00,  4.1746e+00, -1.0503e+00, -3.2391e+00,  2.5148e+00,
              3.3269e+00,  2.0257e+00, -1.5675e+00,  2.9891e-01, -4.7617e-01],
            [-1.3560e+00, -2.3992e+00,  4.1802e-01, -7.2925e-01,  3.8934e+00,
              3.2732e+00,  1.4948e+00, -1.4907e+00,  1.1287e+00,  7.4139e-02],
            [-2.0713e+00, -1.3996e+00,  2.7045e+00,  4.6342e+00,  2.1251e+00,
             -2.4238e+00,  2.0603e+00, -1.3369e-01,  1.7440e+00, -3.2335e+00],
            [-5.6624e-01, -5.6419e-01,  3.5429e+00,  2.1849e+00,  2.4087e+00,
             -4.8134e+00, -2.7452e+00, -2.7134e+00,  4.5566e-01,  6.2156e-01],
            [-5.3797e-01, -9.0288e-01, -1.3471e+00, -4.0288e+00,  6.5237e-03,
             -5.5044e-01, -4.3224e+00, -7.4648e+00, -7.6754e-01, -1.1592e+00],
            [-2.7030e-01, -1.7299e+00,  1.2201e+00,  2.5860e+00,  3.0752e+00,
              3.7510e-01, -2.9265e-01,  2.0179e+00,  4.2936e+00,  1.6755e+00],
            [ 6.4316e-01,  6.8533e-01,  4.8237e-01, -4.5705e-01, -6.9905e-01,
             -1.7656e+00, -1.4083e+00, -2.0257e+00,  8.4713e-01, -2.0682e-02],
            [ 1.5204e+00,  4.5293e+00,  4.8809e+00,  2.6244e+00,  2.1661e+00,
              1.0749e-01, -1.3022e+00, -1.8564e+00, -5.2185e-01,  4.1722e-01],
            [-8.3800e-01, -2.0005e+00, -2.8002e+00, -2.9271e+00, -2.6955e+00,
             -6.8117e-01, -3.6160e-01,  1.3917e+00,  8.1570e-01,  9.6131e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.758 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
