.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.4433,  8.6520,  6.1914,  2.3656,  2.9101],
            [ 4.5025, 15.7680, 10.3184, 14.5657,  7.0031],
            [ 4.8068,  3.5547,  5.8178,  2.3417,  3.5294],
            [ 8.4253,  6.5988, 13.4264,  5.0569,  1.3055],
            [ 2.1854,  6.8776,  7.4857,  6.6603, 11.1360],
            [ 8.4253, 15.8878,  3.7765,  7.5422,  1.3055],
            [ 4.8068, 17.8326,  6.1656,  7.0448,  3.5294],
            [ 4.5025,  9.2910,  4.7568,  3.8618,  7.0031]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.4956, -0.9246, -0.7078,  0.7444,  1.5055,  1.7300, -0.5150, -0.2617],
            [-1.1775, -0.4005, -0.5555, -2.3858,  0.0882,  1.6161,  0.3315,  0.1906],
            [ 0.9054,  1.9038,  0.8715,  1.3441, -0.5063, -1.2380, -1.1863, -0.4258],
            [-1.0511,  0.3384,  1.1266, -0.5161,  0.5206, -2.3574, -0.3268, -0.8363],
            [ 0.8544,  0.3333, -1.8350, -0.2156,  1.4244,  0.9395, -0.5428, -1.1502],
            [ 2.0473, -0.7844, -0.3948,  1.6540,  0.0732, -0.1271,  0.2354,  0.5931],
            [-0.3254, -0.6306, -1.9443,  0.4449, -0.1923,  1.1049,  1.1134, -0.2514],
            [ 0.2692, -1.0828,  0.4436,  0.5620, -0.2410,  0.2941, -0.4894,  0.0285]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4710, -0.3862, -0.7968],
            [-0.7301,  0.1437, -0.5676],
            [ 0.3684,  0.3888,  0.1512]], requires_grad=True), Parameter containing:
    tensor([[-1.2345]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7043,  0.3113, -1.8469, -0.1803, -2.8820, -0.8299, -2.0067, -2.2002],
            [ 0.5924, -0.8770, -0.9220, -1.7311, -1.5061, -0.9327, -1.9972,  0.2734],
            [-3.3324, -3.3069, -2.1205, -2.0316, -0.0372,  0.8386, -1.9196, -0.2461],
            [ 0.9536, -2.3719,  1.5501, -3.6717,  0.7195, -0.3203, -1.9864, -3.3335],
            [ 3.2503, -0.6268,  2.1695, -3.7596, -2.2780, -1.9006, -3.5631, -0.6369],
            [ 0.5880, -0.0858,  2.0328, -0.4508, -2.2313,  0.0783,  0.1844, -0.3690],
            [-1.0310, -5.3290,  0.9050, -1.5776,  1.4209,  1.0892,  0.4471, -1.6192],
            [-0.6663, -4.4111, -0.6299, -0.7203, -0.6038,  0.1138, -0.1093,  0.4451]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.2490e-01, -4.3359e-01, -8.6450e-01,  4.1170e-01, -1.4203e-02,
             -1.6378e-01, -1.0888e+00, -8.1395e-01, -7.9826e-01, -4.8149e-01],
            [-9.3504e-01,  4.7920e-01, -8.1460e-01, -5.2903e-01, -1.4797e+00,
             -1.0417e+00, -8.6899e-01, -8.0248e-01, -7.8926e-01, -1.2764e-03],
            [ 8.2067e-01,  4.2467e-01, -4.5700e-01, -2.8324e+00,  2.8415e-01,
             -2.0636e+00,  3.6901e-01, -2.3016e-02, -1.4845e+00,  7.0928e-01],
            [ 1.2114e+00, -6.2221e-01,  1.7336e+00, -1.6959e+00,  2.3931e+00,
             -1.3273e+00, -5.2704e-01, -1.1389e+00, -3.0179e+00, -1.9868e-01],
            [ 7.8008e-01, -1.2186e+00,  6.0680e-01,  8.1684e-01,  2.5034e+00,
              1.1631e+00,  1.1915e+00, -1.4833e-01, -1.3828e+00, -1.0661e+00],
            [-1.4795e+00, -1.1352e+00, -1.1537e+00,  1.5825e-01, -1.1600e+00,
              6.2270e-02,  1.1738e+00,  6.9738e-01,  2.7431e-01, -1.0368e+00],
            [-8.0415e-01,  7.6212e-01, -1.5558e+00, -1.3630e+00, -2.7827e+00,
             -1.8999e+00, -5.9556e-01, -3.3249e-01, -6.5087e-01, -9.8817e-01],
            [-3.4462e-01, -5.0084e-01, -1.2760e+00, -2.2611e+00,  7.7825e-01,
             -9.3793e-01, -1.8406e+00,  5.6951e-01, -1.2767e-02,  1.8577e+00],
            [-2.2264e-01, -1.0585e+00, -7.7651e-01,  1.5550e-01, -6.6604e-01,
              7.3940e-02, -1.3173e+00,  2.6862e+00, -6.2935e-01,  1.7224e+00],
            [ 2.2101e-01,  8.7557e-01,  1.0743e+00,  4.1528e-01,  2.8339e-01,
              3.9079e-01,  7.0639e-01, -5.0716e-01, -9.0204e-01, -4.2398e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.487 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
