.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.1412,  5.8861,  2.8593,  9.7842,  7.6795],
            [ 9.0803,  5.6342,  5.2202,  8.6261,  0.3291],
            [ 6.4137,  4.6435,  6.9585,  2.4490, 14.2319],
            [ 2.9380,  8.0972,  5.7151,  5.1294,  5.6558],
            [ 1.4544,  7.6852,  3.1386,  6.8765,  9.0104],
            [ 2.9380, 10.7738,  8.6017, 10.6161,  5.6558],
            [ 6.4137,  4.8820,  8.3722,  2.0809, 14.2319],
            [ 9.0803,  5.1009,  3.1961,  4.2090,  0.3291]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.4013,  0.3255, -0.1273, -1.1474, -0.4373,  0.0665,  0.0447,  0.2332],
            [ 0.5500, -1.7022,  0.0771,  1.2333,  0.4845,  1.8995, -0.0382, -1.2776],
            [ 0.6110,  0.1135, -0.6225,  0.1527, -0.1884,  0.7888,  0.0735,  0.1872],
            [-1.1375,  0.2373, -0.1661,  0.8603, -1.3480,  1.1527,  0.2224,  1.4047],
            [-0.1437, -1.3961,  2.1433,  0.4045,  0.8819,  0.7193,  0.7079,  0.1641],
            [ 0.1552,  0.1560, -1.7954, -0.4939,  1.0003, -0.2357,  0.2373, -0.0180],
            [-0.8939, -0.0413,  0.4252, -0.3555, -2.1774, -0.0867, -0.7169,  0.1878],
            [-0.3513, -0.1117, -0.6411,  1.0367, -1.4702,  0.3722, -0.0298, -0.4193]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4591, -0.9476, -0.1034],
            [-1.8513, -1.4208, -1.6544],
            [-1.3787, -0.4384, -0.4380]], requires_grad=True), Parameter containing:
    tensor([[-1.2317]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.9335,  4.1691,  2.7075,  4.0699,  4.3426,  1.8159,  0.1266, -1.7602],
            [ 8.1209,  5.9130,  5.5652,  6.7205,  8.5561,  2.0283,  1.6857, -1.7035],
            [ 6.6881, -2.5224, -0.0447, -0.4950,  1.1749, -0.4707,  1.6755, -2.0279],
            [ 1.2862, -5.5489,  0.7237, -0.7264,  2.5919,  2.5880,  2.5584, -5.8472],
            [ 1.8324,  1.7789, -2.9101,  3.8049,  2.7562,  3.5178, -1.8876, -5.9563],
            [ 6.7628,  3.6705, -2.7576, -3.7787,  2.2891,  2.7463,  0.3868, -2.5429],
            [ 1.9504, -5.5458, -3.7730, -5.4688,  3.5307, -0.9884,  0.8146, -6.0529],
            [-3.4901, -7.1325, -5.2775, -3.3823,  0.3643, -0.6437, -2.8104, -4.1966]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4449,  1.3831, -0.3504, -0.6430, -1.2622,  0.0226,  1.1437, -2.2175,
              0.0387,  0.0292],
            [ 1.8070, -0.3812, -2.2263, -5.4755, -2.8390, -0.5099, -3.4351, -3.8101,
             -3.4753,  0.4603],
            [ 0.9910, -1.1384, -1.4062, -1.6173,  0.5025,  0.3305, -7.3867, -1.9180,
             -3.4785, -0.0297],
            [ 1.1674,  1.1562,  1.0751, -1.1244, -0.8136, -5.4138,  0.3539, -1.0088,
              1.6106, -0.6739],
            [ 0.8094, -0.2786,  0.5276, -0.1582,  0.1848,  1.2027,  4.6713,  3.9372,
             -0.4253, -0.3608],
            [-0.0298,  1.7483,  0.4959,  4.1446,  0.2613,  5.0305,  3.0994,  1.6898,
             -1.5828, -2.0434],
            [ 0.4375, -3.6811, -1.1326, -2.8415, -1.6983, -1.6452, -0.0525, -6.6150,
             -2.3219, -2.9394],
            [-5.4554, -6.5538, -6.1390, -5.4793, -0.7442, -2.0249,  2.3951, -0.0801,
              0.0931,  1.2404],
            [-2.5401,  0.5654, -0.8795,  0.9186, -1.5946,  3.3257, -1.5311,  2.2725,
             -1.8337,  0.0216],
            [ 0.7313,  1.5082,  0.4082,  1.2320, -1.4710,  1.7954, -1.4458, -0.2592,
             -0.6271, -0.1311]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.466 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
