.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.1036,  3.9774, 11.6798,  6.6373,  7.8876],
            [ 8.2081,  1.3489,  8.7718,  6.2861, 14.3936],
            [ 9.9063,  9.1225,  6.3574,  4.5426, 13.4524],
            [11.7389,  7.9111,  2.2799, 14.0795,  6.2708],
            [ 0.5593, 10.6461,  4.5398,  7.6680,  0.6072],
            [11.7389,  6.3224,  0.9160,  1.4118,  6.2708],
            [ 9.9063, 13.1375,  4.9047,  4.2171, 13.4524],
            [ 8.2081,  3.4619,  7.9557,  0.6465, 14.3936]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5756, -0.3597,  0.6687, -0.3799,  0.4144, -0.1213, -0.7753, -0.9625],
            [ 0.9695,  0.6764, -0.3929, -1.0252, -2.2535, -0.3535,  1.9744, -0.4282],
            [-0.5460, -0.6612,  0.8713, -0.5734, -2.0113,  0.2814, -1.0975, -0.9194],
            [-1.3294, -0.7275,  1.0568, -0.7645,  1.5340, -0.9742,  1.6802, -1.4798],
            [ 0.8289, -0.6409,  1.3485, -1.3559, -0.7365, -0.8491,  0.7662, -1.4035],
            [-1.4149,  0.4135, -0.8930, -1.4635, -2.2057, -0.9046, -0.3167, -0.9443],
            [ 0.5198,  1.5304, -0.6117,  1.8085,  0.0970, -0.0349, -0.7270, -0.5649],
            [ 0.2925, -0.4733, -0.6855,  1.0946,  0.1412,  1.1374,  0.3010,  0.4271]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2113, -0.1533,  0.9173],
            [ 0.7754,  0.0668, -0.4908],
            [ 1.4871,  0.1163,  0.0336]], requires_grad=True), Parameter containing:
    tensor([[-0.9797]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.0505, -2.1497,  1.2631,  0.1906,  0.9433, -2.3401,  0.7626, -0.7727],
            [ 1.5960,  1.2360, -1.1659, -1.0222, -1.6240, -3.1699, -5.1082,  1.1420],
            [ 0.6863, -1.4940, -0.4671,  0.2154, -1.0260, -3.5027, -1.5093, -1.9763],
            [-2.5466,  1.1676,  0.9177, -3.4688,  1.3399,  2.5607, -2.7476,  0.7351],
            [-2.4694,  0.9553, -3.5399, -4.1662, -0.9828, -1.0272,  0.7468,  2.0094],
            [-0.5100,  1.2881,  0.0207, -3.7360, -5.4781,  0.6662, -2.0547, -2.1456],
            [-0.6036, -4.7336, -1.6361, -1.1553, -1.0691, -1.6951,  1.0510, -1.7858],
            [-0.1798, -1.2986, -1.4217, -0.0842, -3.5012, -1.8752,  2.0891, -3.3899]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1329,  0.1366,  0.7947, -1.2412, -0.3965,  1.0783, -0.0406,  0.5812,
             -0.0830, -0.8724],
            [ 0.2748, -0.5660,  0.7616, -0.4852, -0.3914,  0.8917, -0.8195,  0.0261,
             -0.8790,  1.9427],
            [ 1.8551, -3.0832, -1.9666,  5.0185, -1.1597,  0.4220, -1.1231,  0.2968,
              1.2814, -1.3501],
            [ 0.9334, -2.3501, -1.6943,  2.8205, -0.0908,  2.4454,  1.2959,  1.7740,
             -0.3597, -0.1740],
            [-0.9571,  2.6736, -0.5864, -1.8520,  1.2073,  1.9338,  1.6771, -3.2735,
             -0.1401,  1.2249],
            [ 1.4094,  2.0142, -0.3109,  0.6417,  2.3100,  0.0673, -2.0670,  0.2290,
              0.6480, -0.4889],
            [-0.3630, -0.2248,  2.0128, -1.1598,  0.7723, -4.4786,  2.3624,  2.3927,
             -0.1312, -0.3815],
            [-2.8824,  1.8372, -0.0196, -1.4549, -0.6529,  0.1381,  0.6469,  0.1673,
             -1.4432,  0.3905],
            [ 0.0513,  0.1650,  2.3500, -0.4693,  1.5120,  0.8598, -1.0307, -0.7641,
              0.7122, -0.1104],
            [-0.0996, -0.7662,  1.7762,  0.8724,  0.1961,  0.6299, -2.2153,  0.1277,
             -0.0284,  0.0066]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.485 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
