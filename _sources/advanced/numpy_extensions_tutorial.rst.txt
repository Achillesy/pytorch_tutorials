.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.8460,  5.9723, 13.1444,  6.0195,  7.5100],
            [ 7.3127,  9.9452, 14.0787,  3.8860,  1.7241],
            [ 3.1896,  6.0165,  8.5858, 10.1358,  2.5818],
            [ 3.8383,  3.9369, 11.0240,  9.6157,  7.5640],
            [ 6.7603,  8.1133, 10.5835,  7.2681, 10.1315],
            [ 3.8383,  5.6198,  5.5773,  9.2039,  7.5640],
            [ 3.1896,  6.3503,  6.0475,  3.7990,  2.5818],
            [ 7.3127,  8.0498, 12.8476,  9.1868,  1.7241]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5753, -1.9835,  0.3279, -0.1859, -1.6985, -0.9337,  1.3103,  0.4413],
            [-0.1857, -0.5400, -1.2980, -0.5862, -0.1652,  0.2518, -0.3411,  0.6695],
            [ 0.9637, -0.4272, -1.2372,  0.0385,  1.9754, -0.3713,  1.3918,  0.1739],
            [ 0.4780,  0.1121,  0.2123, -1.3098, -0.4029,  2.6881, -0.5512, -0.8250],
            [ 1.3063,  0.7490,  0.0809, -1.3776,  1.2056,  0.0053, -0.1291,  0.7082],
            [-0.6521,  1.9908,  1.3530, -2.2352,  0.7369, -0.0350, -1.2354, -1.2432],
            [ 1.3519, -0.5987, -1.0591, -0.0130,  0.3468,  1.4596, -1.0731, -0.8666],
            [ 0.7002, -0.0201, -0.0281,  0.2601,  0.0063, -0.5729, -1.4339, -0.1012]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.8935,  0.8652, -0.1721],
            [ 1.2372, -0.1484, -1.0065],
            [-0.4203,  0.5466,  1.1096]], requires_grad=True), Parameter containing:
    tensor([[1.0343]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5778,  7.5827, -0.4216, -2.4089,  4.9332, -1.4745,  0.4842,  0.7092],
            [ 3.4576, -1.4086, -5.7205, -0.5511, -0.0533, -4.6672, -2.9642, -1.1154],
            [-1.3755, -3.4604, -0.6178,  5.7350, -2.7724,  1.2682,  3.8925, -0.3190],
            [ 3.0019,  0.8367,  1.9030,  3.7163,  3.3098,  5.3135,  2.5039,  3.4847],
            [ 3.1854,  3.1605,  3.3184,  0.5186, -1.4005,  1.5581,  3.3949,  5.3690],
            [ 1.5055, -0.3085, -4.1365, -2.6843,  4.8911,  5.7678,  5.7753,  3.9050],
            [ 4.7145,  3.7714,  3.1664,  7.1985,  3.4613, -1.6838, -1.3397,  5.2195],
            [-1.7467,  4.1069,  1.3885, -1.8130, -1.2014,  1.8696,  2.7005,  4.9658]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5039,  2.9894, -2.7841, -1.9301,  1.4013, -1.6639, -1.3916,  1.0094,
              0.4930, -0.0911],
            [-0.5072,  1.8773, -3.9698,  0.8619,  4.1002,  0.0517, -0.7774,  1.3484,
              0.3319, -0.5541],
            [ 1.4152,  0.8188,  2.0445,  1.0832, -2.6256,  2.4892,  0.4823,  0.9253,
              1.9128,  0.1890],
            [ 3.0146,  1.1023, -7.1109, -6.0143,  0.9204,  3.6661,  0.6618,  1.1940,
             -1.2834, -1.4196],
            [ 0.5224, -2.4217, -7.1990,  1.7188,  3.6691, -2.1857,  0.3583,  2.5509,
              2.4148,  1.7651],
            [ 1.5428,  0.2933, -2.7832, -4.8740, -7.4881, -2.3712, -1.9982,  0.2426,
             -0.7854, -1.3088],
            [ 3.1999,  4.2798, -1.7895, -1.6943,  0.9311,  3.9930, -1.8357,  0.9064,
              4.3598,  1.0575],
            [ 3.3917,  2.4427,  1.5375, -4.1755, -4.8269, -8.7139, -6.0223,  1.5015,
             -1.3623, -1.2363],
            [ 1.5343, -1.7952,  1.0834,  0.8362, -0.1177, -0.9722,  0.4880,  4.7099,
              1.3287, -0.0218],
            [-0.6397,  1.2445,  0.9187, -0.0746, -0.1173, -0.8658, -1.7064, -4.3779,
             -0.5413,  1.2582]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.782 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
