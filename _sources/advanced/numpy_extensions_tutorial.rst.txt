.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.6630, 11.7573,  2.7987,  7.3097,  7.9447],
            [ 6.0130,  5.9505,  8.7851,  7.3327, 14.0263],
            [11.2358,  3.8237,  4.6320,  6.0492,  4.4216],
            [ 9.9786,  7.6989,  7.6792,  2.6229,  3.6457],
            [ 2.8624,  6.4362, 12.6585,  4.3166,  9.8002],
            [ 9.9786, 14.3477,  2.7600,  5.3073,  3.6457],
            [11.2358,  3.3400,  7.9278,  7.5335,  4.4216],
            [ 6.0130,  8.3144,  8.4521,  3.4426, 14.0263]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2648, -0.5104, -0.0375,  1.1455, -0.3816, -1.2088,  0.3297,  1.3440],
            [ 0.6809,  0.2861,  0.0188,  0.4989, -0.0477,  0.4040, -1.9110, -1.3700],
            [ 0.6788, -1.8554,  1.0368, -0.2337, -0.0462,  0.0080,  0.7555,  0.7312],
            [ 0.1651, -0.0943,  1.7527, -0.0771,  0.2834, -1.0962, -1.6854, -1.3191],
            [-0.3732, -0.6257,  1.0623, -0.8012,  1.6954, -0.8345,  0.7225, -1.3752],
            [ 0.4537,  1.1934,  2.3522,  0.4091,  0.5299,  1.9747, -0.6401, -0.0979],
            [-0.5710,  0.2769,  1.0309,  1.1020, -0.7475,  0.0047, -0.4337, -1.0536],
            [ 0.0186, -0.8844, -2.3525, -0.1698, -0.1423, -0.4339, -0.8215,  0.3589]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8041,  1.5717,  1.4131],
            [ 0.4543,  0.6745, -0.5453],
            [ 1.5879, -0.4247, -0.4414]], requires_grad=True), Parameter containing:
    tensor([[1.8210]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.1327e+00, -6.2170e-03,  2.2764e+00,  7.9428e+00,  3.9669e+00,
              2.8613e+00,  4.9882e+00,  5.4810e-01],
            [ 5.4093e+00,  6.2111e-01,  1.1608e+01,  8.9295e+00,  3.1188e+00,
              4.4849e+00, -5.9425e-01,  4.2152e+00],
            [ 1.6473e+00,  2.3131e+00,  5.6376e+00,  1.7391e+00, -2.5305e+00,
             -3.9427e+00, -5.7725e-01,  1.7490e+00],
            [ 5.7844e+00,  3.2085e+00,  2.1608e-02, -1.2967e+00, -1.8504e-01,
              1.4687e+00,  5.5255e+00,  7.6675e+00],
            [ 1.4004e+00,  2.7581e+00,  2.9161e+00, -6.6376e-01,  2.4828e+00,
              2.5218e+00,  1.3763e+00,  1.2379e+00],
            [-5.2055e-01,  1.3991e-01,  7.3403e-02,  1.0486e+00,  3.3650e+00,
             -2.7445e-01, -4.7699e+00, -1.9395e+00],
            [ 4.4840e+00, -2.0222e+00,  4.4913e-02,  1.8619e+00, -1.7476e+00,
             -1.3496e+00,  7.1985e-01,  1.1502e-01],
            [ 2.7465e+00,  1.7588e+00,  2.4960e+00, -4.2695e-01,  2.0419e-01,
             -1.1966e+00, -1.2568e+00,  2.8457e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5768,  1.9851,  2.2758,  2.0590,  1.8383,  2.7391,  1.3957,  1.9282,
              0.8628, -0.0511],
            [-0.6943, -0.8714, -1.2831,  0.8582,  3.8322,  1.5473,  0.2547, -2.6663,
             -0.7386,  0.6378],
            [ 0.2176, -0.2922, -0.0113,  5.3048,  2.1206, -1.3536, -1.5091,  1.9348,
              3.2523,  1.2066],
            [-2.3861, -0.5346,  0.4929,  2.2633,  2.7068, -1.0336,  0.9877,  5.0570,
              4.7364,  1.4874],
            [ 0.2540,  1.1178,  4.9797, -0.8827,  0.5331,  2.7450,  2.2976,  2.9362,
             -0.1558, -0.9754],
            [ 0.9526,  1.5999,  1.7869,  1.1458,  2.4168,  0.2042,  0.9553, -0.7300,
             -2.6055, -0.0346],
            [ 3.5517,  1.9250, -0.2968, -2.7625, -1.0553, -3.3809, -3.7135, -0.1806,
              1.3502,  0.3676],
            [ 1.8369,  0.9194, -2.6045,  0.0283,  1.8263, -3.4315, -3.8883,  2.3294,
             -0.5254, -1.9765],
            [ 2.0642, -1.4284, -0.7898, -1.4786, -1.4502,  0.4827,  1.0228, -0.0205,
             -0.6522,  0.3092],
            [-0.3973, -0.0060,  1.7332, -0.6671, -3.1514,  2.4637,  0.2262, -2.0350,
              0.4595,  0.4466]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.779 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
