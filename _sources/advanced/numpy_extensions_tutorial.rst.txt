.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.6254, 11.1762, 14.3657,  3.4493,  5.2123],
            [ 9.3650, 10.1715,  3.3062,  1.8362,  5.5785],
            [ 8.2191,  4.1386,  3.0905,  9.1767,  4.3974],
            [ 3.1088,  2.2074,  3.3824,  9.4800,  8.8259],
            [17.0406, 14.4075,  0.9905,  3.0408, 12.3698],
            [ 3.1088,  2.4763,  8.9016,  1.2125,  8.8259],
            [ 8.2191,  1.6297,  9.1188,  0.9888,  4.3974],
            [ 9.3650,  7.1283,  4.1920,  4.1903,  5.5785]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1456,  0.2342,  0.2497, -0.7825,  0.4311,  0.8063,  0.6714, -0.3125],
            [-0.5799,  1.0054, -2.0534,  0.0283, -1.5509,  0.1779, -0.8697,  0.3813],
            [ 0.1962, -0.4668, -0.2694, -1.7546,  0.3363,  3.0510,  1.8887, -0.3633],
            [-0.1292, -0.0225,  1.1228, -0.9808,  0.0322,  1.4167,  0.5418,  1.0937],
            [ 0.5475,  0.3523, -0.4485,  0.8456,  1.9683,  1.0853,  1.3093,  1.1645],
            [ 1.2748,  0.2645, -0.4536, -0.6685, -1.0948,  0.3574, -0.7152, -1.0780],
            [-0.0185,  0.1212,  0.7246, -0.0570,  0.7429,  1.1821,  0.5218,  0.0212],
            [ 0.0873,  1.3537, -0.1699, -0.3691, -1.0878,  0.2152, -0.3539, -0.3835]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0040, -0.9976,  0.6127],
            [ 0.5576,  1.2909, -0.5534],
            [ 0.0986, -1.0483, -0.0776]], requires_grad=True), Parameter containing:
    tensor([[0.6130]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.4082,  1.3993,  0.1431,  1.7434, -3.6921,  0.8605,  0.4613,  3.4570],
            [-1.7612,  0.3928, -2.7650, -0.8409,  4.6363,  3.8212, -0.1357, -3.3296],
            [-0.0745,  2.8974,  3.9646,  1.9236,  0.4889, -1.3660,  3.2049,  3.4676],
            [ 2.3419, -1.6244, -1.3465, -3.0458, -0.8743,  1.3881, -2.0092,  0.2512],
            [-3.9369,  4.6331,  0.8309,  5.9386,  1.3962,  0.6366,  3.9476, -0.1385],
            [ 2.3287, -1.4755,  3.3157, -2.2956,  0.5991, -0.7187, -2.3780,  1.1448],
            [-0.5111,  3.2415,  1.2968,  0.4220, -0.2275,  1.2650,  3.3674,  1.6850],
            [ 1.0839, -2.7080,  1.3584, -3.4109,  0.1503,  1.7991, -3.1886,  0.7683]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.7974e-04, -9.1713e-02, -7.4741e-01,  1.7709e+00,  4.0207e-01,
             -1.3396e+00,  1.1379e+00, -6.2239e-01,  3.8354e-01, -1.7833e-01],
            [ 5.2606e-02,  6.9009e-01, -1.8452e+00, -2.0798e+00, -3.9252e-01,
              1.2769e+00, -3.2108e+00,  1.2543e+00,  1.0100e+00, -6.0085e-01],
            [-5.4402e-02,  1.3201e+00,  2.8992e+00,  1.2668e+00, -2.0366e-01,
              1.2973e+00,  2.8493e+00, -8.3005e-01,  5.1114e-01, -6.7748e-01],
            [-1.9383e-01, -3.4736e+00, -2.6102e+00, -1.6402e+00,  1.4606e+00,
             -2.1126e+00, -2.0456e-01, -2.8587e+00, -1.8972e+00,  1.6635e+00],
            [ 1.4989e+00,  4.9735e+00, -1.5621e-01,  2.8413e+00, -3.2627e-02,
              2.1596e+00, -2.1420e+00,  3.0325e+00,  3.6795e+00, -1.2775e+00],
            [-2.2630e-01, -4.3916e+00,  1.1850e+00, -1.9381e+00, -7.6594e-01,
             -2.7318e+00,  1.5023e+00, -6.0181e+00, -5.5670e-01,  7.6299e-01],
            [ 2.2283e-01,  1.4611e+00, -2.5881e+00,  2.4203e+00,  2.3245e+00,
              5.1035e-01, -2.0253e+00,  5.4296e+00, -1.3084e+00,  1.1788e+00],
            [-1.1184e-02, -1.5995e+00,  1.7504e+00, -1.7922e+00, -9.5545e-01,
             -1.0006e+00,  8.8676e-02, -2.9938e+00,  2.7236e+00, -5.3902e-01],
            [ 7.5143e-01,  2.2164e+00, -2.2128e+00, -1.6947e+00,  1.3812e-01,
              3.1223e-01,  3.6341e-01,  2.2001e+00, -1.1654e+00, -2.3827e-01],
            [ 1.3510e-01, -1.3994e+00, -6.2758e-01,  1.1508e+00,  1.8541e+00,
              9.9734e-01,  2.1870e-01, -3.7814e-01, -2.8974e-01, -1.9198e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.868 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
