.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.8219,  8.8800,  9.0314,  6.3595,  0.3188],
            [ 3.9613,  0.8120,  7.4466,  2.5922,  8.1383],
            [ 7.6242,  7.1562,  0.5672,  3.2835, 15.4574],
            [ 8.5707,  8.7565,  8.1314,  7.9064,  6.2689],
            [ 1.9507,  8.7951, 10.4467,  2.1740,  4.5648],
            [ 8.5707,  3.6849,  3.5477,  8.3701,  6.2689],
            [ 7.6242,  6.1436,  0.8528,  7.0672, 15.4574],
            [ 3.9613,  6.4292,  8.1705,  3.2314,  8.1383]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6248, -1.5037, -0.3280,  0.4411,  0.1875,  0.6213,  0.5911, -0.9584],
            [ 0.6206,  0.4893, -0.4920, -0.7893,  0.3044, -0.7808, -0.9139, -0.5631],
            [-0.0806,  1.4846, -0.4026,  0.1853, -1.5315,  0.2417, -1.1153,  0.7992],
            [ 1.5916,  1.3967, -0.1075, -0.1032, -0.7456,  1.9481, -0.4600, -0.1796],
            [-0.0478, -0.9961,  0.3379,  0.5348,  0.8656, -2.1104, -0.3919, -1.1932],
            [ 0.7582, -0.5566,  0.0289, -1.7798, -0.4851, -0.4607, -0.8468, -0.3053],
            [ 0.9385, -0.9935,  1.0826,  1.3334,  0.2470, -0.7444, -1.3838,  0.3290],
            [-0.1382,  0.3488, -1.3785,  0.4491, -0.6593, -0.7830, -0.7408,  0.4472]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2148,  0.2399, -1.0868],
            [ 0.2631, -2.5441, -1.5499],
            [ 0.4203,  0.9510,  0.7387]], requires_grad=True), Parameter containing:
    tensor([[0.0559]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4640,  2.3315,  2.7280,  5.6872,  2.3066, -1.4872, -2.4755, -2.3884],
            [-5.6659, -0.8316, -1.9153, -0.7907,  3.6557,  0.9658,  4.0947,  2.7492],
            [ 4.9249,  1.1032, -0.8787,  4.1833,  8.5553,  2.3046,  3.2070,  0.1995],
            [ 2.5683,  1.5374,  1.2731,  2.0133, -8.4434, -5.7990, -2.5026, -2.5298],
            [ 5.5723,  2.6934, -0.2678, -2.8864, -7.7925, -0.9176,  1.2449,  4.1983],
            [-0.6910, -2.7231,  1.9554,  1.3041,  0.2569,  0.8240, -4.0561, -6.2949],
            [-3.6746, -1.6706,  4.5606,  2.8943,  1.6248,  4.9351,  1.5337,  2.6263],
            [-2.5193,  1.9260,  4.3505, -1.3416,  1.8903,  2.3088,  0.2305, -6.2110]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1211,  0.3163, -0.8001,  0.8828, -0.0153,  0.4073, -1.1231,  1.9261,
             -0.6710, -0.5218],
            [-0.2572, -1.1059, -1.2277,  2.0318, -0.9816, -3.5989,  4.7842,  1.4887,
             -1.5933, -0.9678],
            [ 0.9738, -4.8848, -0.7567, -2.8306, -6.4480, -0.7949,  0.2486,  2.4639,
              0.0751, -0.3838],
            [ 0.6060,  4.0314,  5.6189,  1.3246,  0.5562, -6.5091, -5.4001, -3.8812,
             -3.7035, -0.9984],
            [-0.1219, -0.2528, -0.4675,  1.4518, -2.7319, -2.8788,  2.7687,  3.6375,
              1.3375, -1.7016],
            [-1.0069,  5.3635,  5.0486, -3.7018, -2.1434, -1.4110,  7.1103,  6.7203,
             -1.0523, -1.4703],
            [-0.4832, -5.0333, -4.0720,  1.6226, -3.8830, -2.8969, -4.1835, -7.0145,
             -2.4082,  1.2471],
            [ 0.0907,  3.5403,  1.9163, -0.1346, -2.0961,  3.5693,  2.6160,  1.4206,
              4.3370,  0.0626],
            [-0.2431, -1.9119, -1.5261, -0.9512,  5.3628,  1.3077, -4.3652,  1.7168,
             -0.6707, -1.7411],
            [ 0.1972,  0.5465,  0.7333, -0.2789, -1.2748, -0.4203,  0.7452, -0.3086,
             -0.1933,  0.6271]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.848 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
