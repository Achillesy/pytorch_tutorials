.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.3793,  3.9984,  6.3087,  7.5563,  6.7886],
            [ 5.9251,  9.1742,  0.5785,  9.4258,  5.9352],
            [ 5.5225,  1.2926,  3.4499,  3.5195,  6.1696],
            [ 4.9585,  6.6435,  4.6805, 16.1964,  8.0163],
            [ 8.9606,  6.6277,  3.0042,  8.0122,  6.7322],
            [ 4.9585,  3.6349,  9.4895,  9.5359,  8.0163],
            [ 5.5225,  3.2295, 11.5759, 10.8561,  6.1696],
            [ 5.9251,  5.5228, 15.5596,  7.7249,  5.9352]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0610,  0.5474, -1.4198, -0.3865,  1.3937,  0.4096,  0.9412, -0.8384],
            [-0.4128, -0.2054,  0.1024, -0.6547,  0.4107,  1.3471, -0.2239,  0.6023],
            [-0.6142,  1.2429,  0.4430, -0.1080,  0.9348,  0.2250, -0.0853,  0.4910],
            [-0.6112,  1.2840, -1.5988,  0.2230,  0.1229, -0.5274,  1.1236,  0.8253],
            [ 0.0725,  0.8407,  0.6650,  1.9600, -0.9789, -0.4708, -0.5229,  0.4084],
            [-1.5408,  1.4132, -0.8532, -1.6341,  0.2280, -2.1445,  0.3098, -0.1462],
            [ 0.8397, -2.0736,  1.1582,  0.6919, -0.1881, -0.2670,  0.1209,  1.1764],
            [ 1.1794, -0.8598, -1.1062,  0.7027,  0.4156,  0.5008, -1.5708,  2.0087]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5722,  0.4065,  0.9495],
            [ 0.6137,  0.5757, -0.5052],
            [ 0.7980, -1.0486, -0.4191]], requires_grad=True), Parameter containing:
    tensor([[0.1609]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.0670, -2.1239, -0.2971, -0.7584,  0.1154, -0.3065, -2.0311,  2.9442],
            [ 1.6046,  1.1984, -2.4940,  0.5222,  3.2587,  0.0727, -0.5534,  0.6802],
            [ 2.6614,  0.5485,  0.2184, -0.1843,  1.9978,  1.7160,  0.8039, -0.6360],
            [ 1.1739,  1.6138,  0.2190, -1.9193, -3.1417,  0.9200,  1.9443, -3.0418],
            [-0.6142, -2.4152, -0.6757,  1.4670,  0.6671,  0.2803,  1.6081,  0.5953],
            [ 0.8455,  1.3055, -1.5800,  3.0905,  1.1542, -5.1988,  1.0255, -1.2856],
            [-0.4726, -4.6603, -2.2008,  1.8099, -1.7999,  2.5590, -2.7698, -1.6911],
            [-4.2667,  0.6520,  3.9765, -2.5217, -0.2273, -0.5202, -1.3820,  0.5228]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0521e-01,  1.3180e-01,  3.8410e-01, -7.4663e-01,  1.5961e-01,
             -4.0878e-01,  1.3271e-01,  1.7110e+00,  4.3317e-01,  2.2691e-01],
            [-8.4300e-01,  3.6329e-01,  1.8965e+00,  1.0536e+00, -1.9736e+00,
              7.9984e-01,  4.3410e+00, -1.9245e+00, -1.3464e+00,  3.9091e-01],
            [ 1.5149e+00,  5.9292e-01, -2.7224e+00,  8.5626e-01,  2.1873e+00,
              3.2672e+00, -3.9916e+00, -2.2198e+00,  7.4945e-01,  3.6737e-01],
            [ 7.4859e-01, -1.3632e+00,  1.2164e+00,  7.9471e-01,  4.0290e-01,
             -3.0720e+00, -3.5098e+00,  1.6190e+00,  8.0222e-01, -7.8792e-01],
            [-4.4727e-02,  1.1980e+00,  6.2785e-02, -4.8296e+00, -1.0527e+00,
              1.7727e-03,  4.0642e-01,  3.3185e+00, -1.1426e+00, -1.0662e+00],
            [ 2.2091e-01,  4.3140e-02, -2.1137e+00,  6.0379e-01,  1.3617e+00,
             -2.2556e-01,  2.7656e+00, -1.3995e+00,  3.2403e-01,  2.4452e+00],
            [ 1.7323e-01, -7.2862e-01, -2.9106e+00,  1.8504e+00, -2.2728e-01,
              9.8408e-01,  5.1855e-01,  1.2607e+00,  2.3569e+00, -1.2138e+00],
            [ 4.9675e-01, -2.4760e+00,  2.0561e-02,  3.6699e+00,  6.5232e-01,
              2.7097e-01, -8.0957e-01,  8.5342e-01, -4.5563e+00, -1.5975e+00],
            [-2.2612e+00,  5.6799e-01,  2.1649e+00, -1.6933e+00, -1.0748e+00,
             -1.4075e+00, -1.3894e+00, -2.9791e+00,  4.9838e-01,  7.9756e-01],
            [-1.8529e+00,  3.3215e+00, -1.0229e+00,  2.4389e-01, -2.1566e-01,
              1.6812e+00, -5.2205e-01,  6.9113e-01,  1.7666e+00,  4.5911e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.476 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
