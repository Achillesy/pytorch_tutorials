.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.0075,  6.1401, 11.4112,  2.6391, 12.5241],
            [10.7502,  5.0801,  9.3267,  7.1863,  7.2632],
            [ 7.7552,  4.5861, 10.0086,  6.7833,  0.4256],
            [ 4.4255,  5.6535,  6.4645,  4.3519,  5.9978],
            [ 1.7865,  5.6488,  5.2825,  7.5277,  0.7637],
            [ 4.4255,  5.9750, 17.2252,  3.3007,  5.9978],
            [ 7.7552, 12.9017,  6.7321, 12.5042,  0.4256],
            [10.7502, 13.6180, 12.6541,  7.4488,  7.2632]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3666, -2.0213, -1.0472,  0.8489,  1.7316,  0.3022,  0.0584,  0.5696],
            [ 1.7315, -0.0278, -0.9265, -0.2060,  2.0082,  0.3005,  0.4135,  2.2592],
            [ 1.2048,  0.1531,  1.0751, -0.3442,  0.3804, -0.5998,  1.3280,  0.3715],
            [ 0.6352, -1.1778, -0.8456,  1.5019,  0.1789, -1.6222,  0.3285, -0.8807],
            [-0.6384,  1.6415,  0.6489, -1.5457,  0.6317,  0.3442, -0.2129, -2.4656],
            [-0.4080, -1.2494,  1.0545, -0.3983,  0.4059,  0.6894, -0.3026, -0.6203],
            [ 0.4506, -0.6146,  0.5309,  0.6094, -0.0130, -1.1521, -2.2667,  1.5180],
            [ 0.3950, -1.6081, -0.0721,  1.4702, -0.1620,  0.4767,  0.3361, -0.7807]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4043,  0.6081,  0.2655],
            [-1.0152, -0.7529,  1.1286],
            [-1.3421,  0.1269,  1.3695]], requires_grad=True), Parameter containing:
    tensor([[-0.8627]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.1671, -1.0167, -2.5950, -3.2284, -1.0788, -2.0775, -2.1564, -5.0019],
            [-6.5281,  1.3004,  0.5458, -3.5587, -4.0079,  1.4832, -0.1744, -2.0310],
            [-2.3196, -0.2737, -1.7942, -2.8827,  0.9350, -1.0719,  0.5020,  0.2344],
            [ 1.1897, -0.1618, -2.8358,  0.9132, -6.1687, -1.7601,  4.1012, -2.7906],
            [-2.7690,  3.3826, -0.7938, -5.2505, -4.4104, -2.3850,  2.8693, -0.3973],
            [-3.8363,  1.2306,  1.2263, -2.1392, -1.7619, -0.0746,  0.2795, -1.3368],
            [-2.4638,  0.2730,  3.8703, -2.8169, -5.4094,  3.3163, -1.9758, -5.9973],
            [ 1.5105,  0.0861,  0.1290, -0.9059, -3.9693,  1.3785, -0.1533, -1.7649]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0908, -0.7055,  0.9635, -0.8074,  1.6022,  0.2749, -0.8107,  1.4787,
             -1.1997, -0.6377],
            [ 0.4161, -1.0381, -1.4567, -1.6646, -1.5653,  4.4229, -1.3538,  1.5931,
              4.1914, -2.2968],
            [ 0.6493, -0.0995,  1.9971, -2.8900, -3.7329,  3.5260, -2.7027, -0.5437,
              1.0094, -1.4351],
            [ 0.6771,  0.4442,  1.5220, -1.0770, -1.8885,  0.4858,  3.7071, -0.9136,
              0.2266,  2.5825],
            [ 1.1599, -0.5067, -2.5938, -0.0269, -1.8880,  1.7020,  0.7812, -2.6229,
             -1.7351,  0.1282],
            [ 2.9295,  1.4841, -2.2289, -4.4853,  0.2329,  3.2354, -2.0049,  3.0306,
              4.3569, -2.0555],
            [ 2.3766,  1.8157, -2.2937, -5.1642, -1.4795,  1.0054,  0.4331,  2.3552,
              0.0751, -2.5674],
            [-0.0081, -0.5868, -2.2564, -0.2801,  3.5337,  2.9723, -1.8024,  0.3475,
             -0.6342,  0.2876],
            [-0.6699, -1.2071,  0.9607,  1.0038,  4.6761, -0.5679, -4.4214,  0.5401,
              0.2164, -0.5290],
            [-0.9940,  1.3424,  0.5717, -1.6731,  1.5181, -0.0707, -1.5265,  1.2898,
              0.3231, -0.8605]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.506 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
