.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.0423,  7.1212, 10.4753,  7.9713,  3.8173],
            [14.4584,  0.7695,  3.5512, 10.6778,  4.7585],
            [13.4761,  5.4765,  4.8087,  6.6613,  2.6063],
            [ 4.0210,  6.1398,  4.4823, 10.1114,  2.2965],
            [ 0.6249,  4.6018, 10.7606,  5.5642, 11.2982],
            [ 4.0210,  7.4351,  4.1635,  6.2047,  2.2965],
            [13.4761,  7.3815,  5.9593,  2.4816,  2.6063],
            [14.4584,  7.8787,  3.4058,  2.1456,  4.7585]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2240, -0.9075,  0.9724,  1.1805, -0.1203, -0.5063, -0.4745, -0.6618],
            [-0.7857, -0.4952,  0.5463,  0.7582, -0.2409,  0.9752, -0.5419, -0.2219],
            [-0.3661, -1.9612, -0.3668, -0.5803, -0.9944, -0.9523,  0.0528, -0.8473],
            [ 0.1247, -0.7697,  0.7418, -0.4479, -0.3520, -0.0352, -1.1337, -0.7107],
            [-0.1484, -1.6460,  1.4753,  0.7747,  0.9783,  1.2053,  0.8362,  0.6464],
            [ 0.7723,  0.7432,  1.2018,  1.2469, -0.5287,  0.2027,  0.7787,  1.1605],
            [-0.1936, -0.6375,  1.3338, -0.2723,  0.4384, -1.1894, -0.0349,  2.4093],
            [-1.1194,  1.1817, -0.8522,  0.2109, -0.2588, -0.0563, -0.0768, -1.7264]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3493, -0.3102, -0.3327],
            [-0.1656,  0.4881, -0.1116],
            [ 1.6463, -1.6918, -0.1620]], requires_grad=True), Parameter containing:
    tensor([[1.7544]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.9782,  4.1148, -1.6528,  4.1200,  0.3359,  1.7584, -0.7019,  2.6247],
            [ 2.4480,  6.8242,  0.1098, -0.8676,  2.5434,  3.8921,  5.2232, -1.6518],
            [-0.9907,  2.7349,  2.6188,  3.4625,  2.1955,  3.4793, -1.8821, -0.6131],
            [ 4.5144,  1.7050,  4.9234, -0.7620,  1.5897,  2.1508,  3.5745, -2.5517],
            [ 3.3743,  2.1648,  1.4191,  2.3905,  3.2185,  2.5250,  4.0243,  0.6795],
            [-1.5836,  4.4013, -1.7351,  4.2303, -2.7187,  3.9493,  2.5636,  2.1320],
            [ 4.1779,  0.0903,  7.5150, -0.5329, -0.5005,  4.1185, -0.6767,  2.5301],
            [ 1.7856,  5.2864, -0.4781, -2.7849,  6.5117, -3.8205,  6.1892,  0.4352]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0774,  0.7795,  1.0690,  0.6340,  0.3383, -0.3139,  0.2941,  0.5089,
              0.6316,  0.6128],
            [-0.0676, -0.1454, -1.5842, -1.6574,  0.7767, -1.0124,  0.4907,  0.1347,
             -1.1276,  0.2777],
            [ 0.4174, -4.8728,  2.8609,  3.9710, -3.3304,  2.7196, -1.8756, -2.6072,
              2.4175,  0.4078],
            [ 0.7914,  3.6062, -2.0251,  2.4718, -3.5760, -0.2167,  3.0369, -0.0284,
              0.8889,  0.8124],
            [ 0.2359,  0.8358, -2.6555, -0.9824,  0.4625, -1.1610,  3.4777, -3.7428,
             -0.6152,  0.9029],
            [-3.0978, -0.1495,  4.0536,  1.0315, -5.8472,  4.2455, -1.3604, -0.9067,
              3.0265,  0.8319],
            [-1.6408,  4.4839,  0.2005, -4.6836,  0.1705,  3.2922, -2.7909, -4.1591,
              2.8919,  0.7100],
            [ 1.0399, -1.7723,  0.8421, -1.6510,  2.4148, -4.1619,  3.6304, -2.4758,
              0.2550, -0.0077],
            [ 0.9711, -2.3642,  0.8556,  2.3301,  0.8477, -1.6587, -1.8583, -0.9200,
              1.9441,  0.0761],
            [ 1.8690, -2.5136, -0.3474,  0.7827,  0.3420, -0.0266,  1.4092, -0.4501,
             -1.4005, -0.1191]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.476 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
