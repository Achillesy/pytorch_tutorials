.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.4573,  8.7101,  6.7605,  2.6906,  2.0587],
            [ 3.0521,  9.1898,  6.2246,  2.5865,  3.5747],
            [ 6.0876,  9.3760,  6.7829,  3.4586,  7.6116],
            [15.4987,  7.0448,  4.6267,  6.2440,  4.9567],
            [ 5.8873, 10.7457, 13.8255,  3.8374,  0.6662],
            [15.4987,  4.4977,  5.2159,  2.9525,  4.9567],
            [ 6.0876,  9.0965, 12.1015,  5.8059,  7.6116],
            [ 3.0521,  7.6241,  2.2528,  7.1407,  3.5747]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.3008, -0.5350,  0.9715,  1.1591,  0.4339,  0.4001,  0.3740,  0.5791],
            [-0.7146, -0.0380,  0.3680, -0.7018, -0.7897, -0.2570,  0.5042, -0.1745],
            [ 2.1296, -0.2233, -1.3524, -0.8174, -0.6745,  0.0494,  0.3048,  0.0057],
            [ 0.0978,  0.9588, -1.4289, -1.0748, -0.8957,  0.2337,  1.2296,  1.5669],
            [-1.9973, -1.3251, -0.6428,  0.4925,  0.2355, -1.6834,  0.2470, -0.5813],
            [ 0.6026, -0.2268,  1.1798, -0.8990, -0.0466,  0.1576,  1.9623,  1.1517],
            [-0.0751, -0.7712, -0.8746,  0.3537,  0.0332, -1.4570, -0.9668, -0.1634],
            [-0.6136,  0.4553,  0.1730, -1.6280, -1.5272,  0.4639, -0.6455, -1.2285]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0232, -0.1719, -0.0718],
            [ 2.6006,  0.4317, -1.2841],
            [-0.5651, -0.3679, -0.7535]], requires_grad=True), Parameter containing:
    tensor([[1.4498]], requires_grad=True)]
    Output from the convolution:  tensor([[10.0791,  0.9935, -4.4693,  1.5548,  4.7635,  1.5001, -1.3034,  0.0340],
            [ 0.5843, -1.9729,  2.1885,  5.0167,  1.9974,  5.6329,  5.6898, -4.3076],
            [-0.1101, -3.1819,  1.7497,  4.8694, -3.0837, -1.0356,  3.0632,  0.7466],
            [ 2.4313,  2.5453,  4.0071,  4.9874,  1.6939,  0.1690, -0.0703,  5.9376],
            [-2.6956,  7.2002,  4.0849, -0.0577, -0.5559, -0.3573,  3.1156,  4.3686],
            [ 5.6266,  2.6748,  4.3189, -4.0439, -2.3408,  6.6474,  4.5470,  4.0605],
            [ 0.6179, -2.8958,  2.4935, -1.2093, -3.1357,  7.1764,  1.6233, -2.0671],
            [-0.0935,  4.6552,  0.6481, -0.8768,  1.8593,  1.9310,  1.0215,  4.8910]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0132, -0.0737, -0.2377,  0.1036, -0.0934, -0.4409,  0.1233,  0.1352,
             -0.0635, -0.0295],
            [ 1.4458,  3.1266, -2.3264,  1.0314,  6.9635, -4.1617, -3.0325,  3.0742,
              0.1182, -0.6054],
            [-3.7045, -2.7968,  4.9186, -8.7064, -7.5489,  0.1952,  0.4744,  5.1741,
              0.6528, -1.5934],
            [-1.5052,  1.6098,  0.3270, -1.6215,  3.8796,  4.5402,  0.1307, -3.0674,
             -0.6542,  1.3207],
            [ 4.1445, -0.6891,  0.3892, -1.2190, -6.6771,  2.0161,  0.9191, -6.0058,
              0.2649,  4.4389],
            [ 1.2777,  0.0264, -3.6722,  1.2038,  2.7379,  2.2689, -0.7200, -1.0232,
              2.2240,  2.6444],
            [-2.7030, -0.9875, -1.8375, -5.6335, -4.0619,  2.7646,  2.8520,  0.5603,
              0.6981,  0.0151],
            [ 1.2728,  1.7090, -0.4422, -0.5812,  5.7834,  3.5671, -1.3627,  3.7805,
              1.2375, -2.5427],
            [ 4.2411, -3.4444, -3.7286,  2.7061, -1.5819, -2.1644,  1.1456,  1.4620,
             -0.3638, -2.1610],
            [-0.9567,  0.1898, -0.5574,  1.0098,  0.6153,  0.3377,  0.6722, -0.0852,
             -0.4492, -0.4681]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.837 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
