.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1271,  1.8259,  7.1402, 16.2161,  5.6551],
            [ 7.4334,  7.0659,  5.2041,  6.3811,  4.4527],
            [ 3.6237,  3.6555,  7.9940,  5.7210,  3.2453],
            [ 7.8906,  6.1709,  9.4712,  6.0828,  4.7797],
            [ 7.7602,  5.4010,  6.3959,  7.5008,  3.8968],
            [ 7.8906,  1.8009,  9.3601,  2.0828,  4.7797],
            [ 3.6237,  6.4206,  4.1380, 12.7238,  3.2453],
            [ 7.4334,  9.3889,  2.7296,  7.3781,  4.4527]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 9.7919e-01,  5.9376e-01,  6.2386e-01, -6.3770e-01,  1.1410e+00,
             -5.4197e-01, -1.9903e+00, -2.5615e-01],
            [-8.3508e-01, -4.0633e-01,  4.4817e-01,  1.6626e+00, -6.4755e-01,
              7.2761e-01,  8.1807e-01,  8.3474e-01],
            [-9.2010e-01,  1.0752e+00, -6.6381e-01,  7.6945e-01,  1.3809e+00,
             -7.9518e-01,  3.1302e-01,  1.3070e+00],
            [-3.2740e-01,  2.6359e-01, -3.8471e-01, -7.7023e-01, -4.4880e-03,
             -2.1801e-01,  1.1021e+00,  1.8222e+00],
            [-1.5031e+00,  2.9248e-01,  4.1912e-01, -7.1371e-01,  7.9724e-01,
              3.2515e-01,  7.4613e-01,  1.0257e+00],
            [-8.6334e-01, -8.3009e-01, -1.2107e+00, -8.0540e-02,  3.1628e-01,
             -1.7155e+00, -2.3795e-01,  4.1122e-01],
            [-6.5950e-01,  1.1919e+00, -5.4776e-04,  4.2988e-01,  4.7889e-01,
             -9.7326e-01,  1.3902e+00,  3.1887e-01],
            [-6.2496e-01,  1.8259e-01,  9.3387e-01, -1.1250e+00, -5.8520e-01,
              3.1646e-02, -1.1934e+00,  6.8916e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2056, -0.5324,  0.3372],
            [-1.3585, -1.0711,  0.4368],
            [ 0.4400, -0.3980, -0.6093]], requires_grad=True), Parameter containing:
    tensor([[2.0123]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.9234e+00,  2.1392e+00,  3.1483e+00,  4.4602e+00,  1.2413e+00,
              1.7711e+00,  7.5505e-01, -3.0319e+00],
            [ 2.7890e+00,  7.9266e-01,  7.8320e-01,  1.3786e+00,  2.5442e+00,
              5.8609e+00,  4.7487e+00, -1.8226e+00],
            [ 3.0547e+00,  3.4646e+00, -1.3770e+00, -1.5009e+00,  2.6486e+00,
              2.1137e+00,  6.9907e+00,  6.4648e+00],
            [ 6.6834e+00,  7.5613e-01,  2.6516e+00,  3.0309e+00,  2.6946e+00,
              2.2411e+00, -5.1638e-01,  1.5767e+00],
            [ 2.2108e+00,  3.6187e+00,  8.7831e-01,  9.1960e-02,  1.7050e+00,
              4.8351e+00,  3.6029e+00, -4.8314e-01],
            [ 5.1574e+00,  1.0254e+00, -3.3392e-01,  3.6035e+00,  2.2217e+00,
              1.0560e+00,  1.7954e+00,  2.4967e+00],
            [ 1.1560e+00,  3.6647e+00,  7.9034e-01, -4.1639e-01,  2.2099e+00,
              3.8432e+00,  2.3002e+00, -1.5020e-04],
            [ 6.5485e+00,  1.7063e-01, -2.4276e-01,  4.0325e+00,  8.8367e-01,
              2.4438e+00,  3.3001e+00,  7.2406e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0299, -0.3058, -0.9720,  0.6741, -0.2802,  1.0203,  0.5176, -0.5049,
              0.2670, -0.1449],
            [ 0.4303, -1.8877, -1.9407,  1.4329,  0.0953,  3.4947,  1.7891,  0.2482,
              0.1834, -0.2628],
            [ 1.4398,  1.2909,  0.2603,  1.2653,  0.1922,  1.0484,  2.3958,  2.0074,
              0.3122,  0.0406],
            [-0.5180,  1.3936, -1.3680, -1.2263,  3.9101, -0.0556, -3.9213,  0.6704,
              2.3980, -0.2691],
            [ 1.3540,  1.4087,  0.2717, -0.0418, -0.3005, -1.0984,  0.1285, -1.0946,
              0.3873,  0.0769],
            [-0.5198, -0.1957, -2.7993, -0.1871, -0.5016, -1.2828,  1.2987, -2.5804,
             -0.7208,  0.8011],
            [ 2.4287,  1.6304, -1.3001, -0.7032,  0.7711,  2.9115, -0.6932, -1.9151,
              0.0246, -0.2749],
            [ 0.3962, -0.4293, -1.8713, -4.1210, -2.6744, -1.7137,  0.3256,  1.0697,
              0.9196, -0.6905],
            [-1.5236,  1.5693, -0.2906, -2.5244, -1.2149, -3.5339, -2.5661, -0.4248,
              1.0306, -0.0387],
            [ 0.3625, -0.8008,  0.6265,  0.0045, -0.5759,  0.0909, -0.4470, -1.2919,
             -0.3403,  0.4349]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.500 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
