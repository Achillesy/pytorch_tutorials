.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.6868,  5.5260,  9.2763,  5.0470,  7.7193],
            [ 3.8902, 10.9165,  6.9103,  8.6127,  7.8372],
            [15.0841,  3.6241,  6.1489,  4.2221,  4.5676],
            [ 1.3302, 10.6607,  7.5823,  3.4328,  2.8499],
            [ 1.3251,  9.1406, 14.3037,  6.5230,  3.6649],
            [ 1.3302,  6.3145,  0.1197,  3.2328,  2.8499],
            [15.0841,  5.5446,  2.0425, 14.2537,  4.5676],
            [ 3.8902,  9.3252,  7.4319,  5.2497,  7.8372]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0972,  0.6657,  1.9609,  0.1341, -0.5729,  1.1524,  0.5128, -0.8910],
            [-0.1724, -0.0794, -0.1623,  0.2259,  1.4399, -0.2720,  0.1643, -0.6010],
            [-1.5623, -0.5842,  1.3554, -0.9473, -0.0850, -0.9683,  1.3497, -1.0601],
            [ 0.8730,  1.1808,  0.2020, -0.1325,  0.6902,  0.1263, -1.1338, -1.2686],
            [ 2.2690,  0.5452, -0.5667,  0.2198, -1.3484,  0.9502,  0.9632,  0.9059],
            [ 0.8855,  1.5197, -1.0489, -0.3269,  0.6547, -1.0270, -0.6289,  0.1153],
            [ 0.5665, -0.3142,  0.1370, -1.2566, -1.3862, -0.6723, -1.3412, -0.2224],
            [-0.0040, -1.4398, -0.1705, -0.2388,  0.5040,  1.7554, -1.2386, -0.7105]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2345, -0.9317, -2.0887],
            [-1.6515, -0.3158, -0.4298],
            [ 0.9852,  0.0612,  0.1828]], requires_grad=True), Parameter containing:
    tensor([[0.4836]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.8332,  7.2430,  3.1562, -2.1367,  3.3404,  1.6741, -2.4857,  0.6995],
            [-2.0541, -5.4602,  1.8800,  7.5662,  1.2516,  1.7518,  3.6353,  8.2067],
            [-0.6939, -1.5999,  0.9575,  4.1889,  4.0557,  1.1798,  3.3031, -3.2534],
            [-3.2813, -1.2494, -0.3971,  2.9781,  4.7985, -4.0977, -5.0174,  4.7420],
            [-3.6443, -1.3522,  3.2567,  4.3333, -3.4344,  0.9254,  1.1462,  3.8259],
            [ 0.5373,  7.8168,  3.6191, -6.8305,  6.6211,  2.0569,  2.5949,  0.0194],
            [-0.1354, -0.4084,  2.3567,  5.7954, -3.8807, -0.6300,  1.0795, -1.7774],
            [-1.0396,  3.0031, -1.3365, -4.7951,  1.2160,  2.5784, -3.8180, -0.8900]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 7.6199e-01, -9.8311e-01, -1.3240e+00,  1.8241e+00,  4.0746e-01,
             -3.5805e-01, -2.7621e+00, -2.3241e+00,  1.6824e+00,  6.9789e-01],
            [-2.0383e-01,  1.3018e+00, -4.0557e+00, -1.9273e+00,  4.0527e+00,
             -5.8678e+00, -1.0097e+00,  1.8534e+00, -9.0279e-01,  3.5450e-01],
            [-6.0692e-01, -2.3939e+00,  1.6091e+00, -1.1209e+00, -5.9280e-01,
              5.4252e+00, -1.6823e+00, -2.9347e+00, -3.0695e+00,  2.6582e-02],
            [ 2.9829e-01,  2.5681e+00,  2.5993e-01, -3.8253e-01,  9.4941e-01,
             -5.7972e+00, -4.8031e+00,  1.1717e+00,  6.1643e-01,  4.3379e-01],
            [-1.0478e+00,  4.0096e-01,  4.4591e-01, -4.2493e+00, -9.8594e-01,
              2.0959e+00,  1.7176e+00,  5.5522e+00,  3.1865e+00,  1.5413e+00],
            [ 2.4712e+00, -7.6552e-01,  1.0487e+00,  4.6660e+00,  1.6524e+00,
              4.0935e+00,  5.8068e+00,  1.7842e+00,  9.7667e-01,  2.9722e+00],
            [-1.5933e+00,  2.1475e+00, -6.6510e-01, -2.4064e+00, -9.8072e-01,
             -6.0556e-01,  9.2043e-01,  8.0592e-01, -2.6145e+00, -1.8452e+00],
            [ 7.4419e-02, -2.6510e+00, -3.1127e+00, -2.8545e+00,  8.0142e-01,
             -5.2812e+00, -5.6835e+00,  1.0331e+00,  2.0935e+00, -2.2459e+00],
            [ 2.4686e-03,  5.6174e-01,  6.8349e-01,  5.0939e-01, -3.3346e+00,
              1.7697e+00,  3.0335e+00,  9.8715e-01,  6.8983e-01, -1.1777e-01],
            [ 3.0201e-01,  2.3795e-01,  1.8990e-01,  2.3303e-01,  1.7141e+00,
             -9.2587e-01, -1.3909e+00,  4.2729e-01, -2.5843e-01,  1.3479e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.508 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
