.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.6290,  3.4209,  9.4606,  4.3069,  8.0281],
            [10.9742,  8.2251,  6.8206,  7.8876,  7.0759],
            [ 6.6218, 10.9642,  8.3809,  6.9409,  9.7186],
            [ 8.1066,  4.2060,  4.9672,  1.1020,  1.3864],
            [ 8.1608,  7.2921,  8.2110,  3.1716, 23.0904],
            [ 8.1066,  2.8614,  6.2382,  3.1686,  1.3864],
            [ 6.6218,  7.3770,  8.1353, 13.1341,  9.7186],
            [10.9742,  5.2448,  3.2677,  5.3422,  7.0759]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2259,  0.2525,  0.7015,  0.9915,  0.8214, -1.3049, -1.1091,  0.1195],
            [-0.7375,  1.3069, -0.2400, -0.4372, -1.0129, -0.9578, -0.8838,  0.4542],
            [ 0.5331,  0.3095, -0.9580, -1.9255, -0.4204, -0.1747,  0.2263, -1.3971],
            [-0.4580,  0.4982, -1.8590,  2.1993, -1.2573, -0.6013, -0.1537,  1.0825],
            [ 0.2270,  0.3030,  0.4525,  1.3813,  1.3756, -0.4177, -1.1761,  0.3608],
            [-0.3207, -0.2827,  0.2587, -0.7113,  0.3203,  1.2095, -0.4593,  2.0282],
            [ 1.5946, -1.4913,  0.4614, -0.1134,  1.7399,  0.1780,  0.4048,  0.0460],
            [-1.1768, -0.4822, -1.5912,  0.5033, -1.1835, -1.1661, -0.2226, -0.0616]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.5469, -1.9807, -0.7732],
            [ 0.1893, -0.6161,  0.4731],
            [-2.8240,  0.1757, -0.8031]], requires_grad=True), Parameter containing:
    tensor([[-0.7152]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.0523,  0.1114, -9.3561, -7.7774,  0.1208, -3.4392, -2.8754,  4.8576],
            [ 1.4451, -3.7108, -2.8155,  9.8536,  1.7165, -2.9259,  0.0584, -0.0434],
            [-0.3968, -9.7233,  1.4427,  1.7790, -1.5637, -1.8009,  1.8852, -0.3991],
            [-4.6579,  6.1459,  5.7323, -3.5142, -1.5422,  3.1950, -4.2990, -0.0812],
            [-4.7376,  0.0290,  3.5347, -2.4126,  3.7027, -1.9077, -1.0914, -1.5466],
            [ 1.5649, -0.6855,  1.5614,  3.8219,  3.9668, -0.8943,  4.3697, -1.7193],
            [ 6.4970, -4.4702,  4.0653,  0.4306, -4.3223, -5.7752,  2.5014,  0.0409],
            [-1.2314, -0.6108,  6.0445, -1.9562,  3.6064,  3.1150,  2.2260,  3.0857]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.5966,  3.6766,  0.0971, -4.2143,  0.8679,  1.6585,  0.4944,  0.4629,
             -1.7540, -0.5901],
            [-1.9391,  3.0237,  0.0746,  0.1016,  0.0098, -1.8575,  3.2122, -0.6158,
             -0.4276,  0.5059],
            [ 3.3403, -3.9202, -0.3359,  1.5458, -0.3003,  0.1028, -2.5535, -3.9290,
              1.5141, -0.3194],
            [ 3.3301,  0.2586, -1.5189,  2.2084, -0.1233,  2.8595, -4.0583,  1.0438,
             -0.1488,  0.0151],
            [-0.9569,  0.3187, -2.7803,  2.9086, -4.7464, -1.4440, -3.9676,  2.0083,
              2.2334,  0.7318],
            [-0.3337, -0.3251,  1.8470, -2.3893, -1.6815, -2.3260, -2.7853,  0.1955,
              0.5106,  0.0986],
            [ 2.7548, -3.5329,  0.2158, -1.4448, -3.3106,  4.0935,  1.0024, -3.5638,
              3.6653,  1.4262],
            [ 1.3739, -3.2192,  1.3925, -1.9500,  1.5773, -4.0085, -4.9397, -1.9038,
              3.0558,  0.2465],
            [-5.6825,  2.1263, -2.3632,  1.7427,  4.6595, -6.0137,  0.9085,  3.1702,
              0.0395,  0.7721],
            [-1.0278, -1.2381, -0.1178, -3.2511, -5.1225, -4.1844, -1.3902,  1.5472,
             -0.1912,  0.7372]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.858 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
