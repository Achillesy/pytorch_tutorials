.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[16.1340,  8.3444,  2.5196,  7.9193,  9.5428],
            [ 9.4111,  6.0933,  5.1024,  4.4736,  6.8579],
            [10.7039,  3.4481,  4.3156, 10.4627,  1.6879],
            [11.0128,  2.6577,  3.0588,  6.5247,  8.0920],
            [ 6.8606,  5.9512,  0.9774,  8.0935,  6.2436],
            [11.0128, 13.1816,  7.8238,  7.6386,  8.0920],
            [10.7039,  6.3457,  2.4823, 10.4639,  1.6879],
            [ 9.4111,  8.6853,  8.8963,  2.5314,  6.8579]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2282,  0.6025, -2.2784, -0.0630,  0.1735,  0.3220,  0.8259,  0.6984],
            [ 0.6678,  0.6555,  0.6904,  0.4414,  1.4960, -0.4943,  0.5572, -0.5614],
            [-1.6437, -0.0365,  0.1248,  0.0093,  0.0537,  0.5433,  0.0618,  0.6650],
            [-0.0071,  0.8147,  1.4284,  0.1455,  0.7939,  0.8687, -0.5695,  0.0251],
            [-2.4123, -0.4391, -1.6613,  0.7645, -0.4764,  0.1772,  0.7955, -1.2447],
            [-0.8935,  1.0390, -1.1794,  1.0319,  0.3535, -0.6505,  0.6715,  1.2221],
            [ 2.3092,  0.6914,  0.6516,  1.1767,  0.3322,  1.6649,  0.2872,  0.7331],
            [-0.5723,  0.0078, -0.5195, -0.1439,  1.4002,  1.1553,  0.6062,  1.0166]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4732, -0.3861, -0.7037],
            [ 1.1209,  1.4622, -0.7560],
            [-0.4219, -1.6338,  0.0683]], requires_grad=True), Parameter containing:
    tensor([[1.0237]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.4878,  3.4087,  1.4204,  0.4337, -5.1903, -3.3340,  1.8408, -0.1984],
            [-2.6338,  1.7840,  2.7696, -4.7261,  6.3768,  3.1145, -0.2668,  2.5922],
            [ 4.3851, -0.8442, -3.3517, -3.7222,  0.5170,  2.2311,  3.7548,  0.6843],
            [ 0.6106,  2.0523,  4.4039,  6.7201, -2.2324, -2.9077,  1.8381,  3.2868],
            [-2.0513, -4.4239, -0.3760, -2.6966,  4.7269,  8.7186,  0.4313, -3.2754],
            [ 1.9135,  5.4598,  5.0333,  1.0768, -1.8464,  2.4258,  3.8122, -0.7093],
            [ 1.0413,  1.9719, -2.3637, -0.0235,  1.3410,  2.8436,  1.5405,  2.6984],
            [-0.6927,  0.4672,  1.2696, -1.5577,  2.1672,  1.7057,  0.9552, -3.6895]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4401, -0.2937, -0.3492, -0.1007, -0.5232,  0.0630, -0.7991, -1.1614,
             -0.1768,  0.0347],
            [ 0.8333,  1.9775,  0.7346,  0.6534,  0.8757,  2.8799,  1.6787, -2.4372,
             -0.2670,  0.9165],
            [-0.9832, -1.4636,  1.0457, -1.1948, -1.6301,  1.3906, -0.5514, -2.6849,
             -1.8969,  1.4228],
            [ 0.1377, -0.5230, -3.2885, -1.2908,  3.9430, -0.2316, -1.3579, -2.3019,
              2.2503,  1.3690],
            [ 1.3438, -0.8596, -4.5571, -0.4211,  0.1581,  0.2142, -3.6582, -2.0705,
             -0.0259,  1.3193],
            [ 2.0265,  2.3774,  2.2801,  5.4605,  1.4328, -4.1475,  2.0931,  3.2251,
              0.5076,  0.1058],
            [-0.9898, -2.9457,  0.5403,  2.2774,  0.4883, -4.9869, -3.6273,  3.8456,
              0.7776,  0.2456],
            [-1.8124, -3.0176,  1.5356, -3.0011, -2.9736,  6.0287,  4.1431, -3.8517,
             -1.9673,  1.0103],
            [ 0.7533,  3.9609,  2.4426, -3.0906, -1.9126, -1.5310,  1.1980,  1.9181,
             -0.8939,  0.4603],
            [-0.0447, -0.5654, -1.6653,  0.2437,  3.0877,  0.2299, -0.2329, -1.9513,
              1.1889, -0.0458]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.983 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
