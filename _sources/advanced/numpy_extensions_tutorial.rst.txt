.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.7832, 10.5699, 10.0887, 15.3239,  8.8024],
            [10.7764,  2.3909,  6.2681, 12.3861,  7.0760],
            [ 6.5084,  4.9679,  2.0796,  8.2908,  5.3195],
            [ 5.1943,  4.5064, 10.9539,  3.9215,  1.9385],
            [ 5.0104, 11.4710,  5.4976,  4.6362,  0.6526],
            [ 5.1943, 10.1632, 12.1838, 12.2654,  1.9385],
            [ 6.5084,  6.9090,  5.4810,  9.1669,  5.3195],
            [10.7764,  9.7396,  4.8376, 11.4040,  7.0760]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3359, -1.5404, -0.5942, -1.0214, -1.8880,  2.4388,  0.2503,  0.1964],
            [ 0.6998, -0.4462,  1.5829,  2.2434,  0.2850, -0.4232, -0.3442, -0.0973],
            [-0.2506, -1.3854,  1.7687,  0.2835,  0.7299,  1.1091,  0.2455,  1.0063],
            [-0.0785,  0.0156,  1.1199, -0.4535, -0.3449, -0.0550, -0.0593, -0.4738],
            [-0.7231,  0.0446,  0.7340,  0.8057,  2.2207, -0.7886,  0.4949,  0.7070],
            [-0.0442, -1.0566,  0.4845,  0.8841,  0.2893, -0.0692,  0.6601, -1.7356],
            [-0.7264, -1.5248,  0.3112, -0.5073,  0.5004,  0.2457,  0.1529, -0.2345],
            [ 0.2561, -2.7736, -0.1100,  0.5253,  0.1421, -0.0348, -2.8081,  1.6063]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0424,  0.4495,  2.8349],
            [-1.8932,  0.0451, -1.0368],
            [ 0.6355,  0.1396,  0.6500]], requires_grad=True), Parameter containing:
    tensor([[-0.2178]], requires_grad=True)]
    Output from the convolution:  tensor([[ -0.7536,   1.6714,  -0.8990,   1.6116,  -5.8542,  -0.8178,   5.7630,
               1.7887],
            [  0.4145,  -1.6349,   3.6906,  -3.7285,   4.5971,   2.0728,  -3.7185,
              -0.4814],
            [ -6.3553,   1.6372,  -6.4851,   3.8769,  -1.9493,   1.7208,   4.3804,
              -5.4044],
            [  5.3661,  -0.8285,   5.7624,  -7.0339,   0.0843,   7.2814,   1.7158,
               2.7598],
            [-10.3215,   3.9327,  -2.5519,   6.1477,   2.4504,  -3.2538,  -5.1134,
              -8.1149],
            [  3.7853,  -3.6464,  -2.5335,   3.0363,  -1.8538,   4.8505,   2.6855,
               5.8287],
            [ -0.8233,  -1.8727,   5.7805,   3.7634,  -0.8980,  -1.3029,   3.8610,
              -4.1540],
            [ -2.9507,  -4.8260,  -3.9339,  -4.8821,  -2.3953,   0.7213,  -1.4227,
               2.7578]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.8610e-02,  7.5516e-01,  4.3147e+00, -2.1467e+00, -1.0239e+00,
              3.1647e+00,  8.6958e-01,  1.7438e+00, -9.9568e-01,  3.7491e+00],
            [-3.0271e+00,  9.8094e-01, -3.6415e+00, -5.1568e+00, -6.3508e-03,
              5.9696e+00,  2.8505e+00, -6.5738e+00, -3.8089e+00, -3.2624e+00],
            [ 2.5190e+00,  3.4112e+00,  1.1411e+01, -3.2413e+00, -9.9953e-01,
              9.9302e-01,  1.9466e+00,  3.7208e+00, -1.8163e+00, -1.8353e+00],
            [-6.3937e+00, -1.7281e+00, -6.8623e+00,  9.7533e-01,  5.0470e-01,
             -6.5144e-01, -1.3507e-01,  1.5945e+00,  1.5823e+00, -2.9557e+00],
            [ 3.9947e+00, -1.1300e+00, -3.3410e+00,  2.3442e+00,  1.4207e-01,
             -9.7274e-01, -7.6893e+00,  3.9039e+00,  6.9691e-01, -1.3244e+00],
            [ 3.8109e+00, -9.9796e-01,  3.3902e+00, -1.9432e+00,  3.7227e+00,
              8.6588e-04,  2.0213e+00, -2.3839e+00, -4.7841e+00, -2.1386e+00],
            [-2.3270e+00,  1.2805e+00, -1.2832e+00, -5.0252e+00, -3.8599e+00,
             -2.0887e+00,  8.8693e-01,  3.0133e+00,  5.3577e+00, -2.1122e+00],
            [-5.5861e-01,  3.4913e+00,  3.8279e+00,  7.1943e+00,  1.8113e+00,
              4.7189e+00, -2.2922e+00, -2.6756e+00, -9.8154e+00,  2.7027e+00],
            [-1.7443e+00, -3.3810e+00, -1.5396e+00, -5.6580e+00, -1.1909e+00,
             -7.0827e-01,  5.6069e+00, -1.2259e+00,  3.6397e+00, -1.3833e+00],
            [ 6.7393e-01,  9.4601e-01,  9.6129e-01,  1.6860e+00,  4.9987e-01,
              4.8888e-01, -1.6129e+00, -3.0655e-01, -1.6663e+00,  5.2292e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.506 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
