.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.3415,  3.4292,  8.5531,  5.7567,  0.8557],
            [ 6.8030,  7.9089,  7.5589,  3.6148, 19.4911],
            [ 6.4553,  2.8195,  4.7639,  5.3572,  9.0934],
            [ 3.1360,  8.7558,  7.5870,  8.2158,  5.5853],
            [ 9.5665,  8.3659,  1.6039,  4.5132, 14.6327],
            [ 3.1360, 12.2682, 10.5674, 13.1413,  5.5853],
            [ 6.4553,  6.7724,  1.0187,  8.5607,  9.0934],
            [ 6.8030,  3.3659,  2.5556,  1.7149, 19.4911]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4096,  0.0562, -0.1395,  0.0642, -2.1047, -0.8188, -0.1638,  1.3321],
            [-1.6521,  1.5614,  0.4518, -0.7497,  0.6626,  1.4005,  1.0407,  1.5253],
            [-0.9847,  1.0394, -0.7789,  0.9054, -1.5484,  0.9887, -0.2668,  1.5582],
            [ 1.0772,  0.8885,  1.1488,  0.6660,  0.2736,  0.4507,  0.2627, -1.5308],
            [-1.4905,  0.5071, -0.3291, -0.7910,  0.7934,  0.1239,  1.0017,  0.5977],
            [ 1.0662, -0.8667,  2.2332,  0.4981,  0.2839, -0.1462, -0.5028,  1.0217],
            [ 0.6134,  0.7566,  1.3161, -0.7752,  0.0238, -1.0387,  0.1478, -1.1178],
            [-0.3225, -1.8418,  0.5030, -0.4664,  1.1749, -1.0963,  0.8980, -0.4596]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2751, -1.3041, -0.9556],
            [-0.4408,  0.5098, -1.4016],
            [ 0.1268,  0.5934, -1.3929]], requires_grad=True), Parameter containing:
    tensor([[0.4728]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.1037,  3.7877,  1.2161,  0.6709, -0.2967, -3.1432,  0.2296,  0.1401],
            [-5.7382,  1.4805, -2.5804,  2.6437, -0.0888, -2.5131,  8.3105,  0.8379],
            [-2.8737, -2.9714, -0.7358,  0.2529,  3.8815, -1.7892,  3.6362,  0.6171],
            [ 1.4536, -0.9556,  2.7625, -2.7682,  2.7987,  2.9835, -0.2663,  4.7320],
            [ 3.6987, -1.8585,  1.2861,  2.2975,  5.7278,  2.1917,  1.3488,  3.0813],
            [ 0.9265, -2.7340, -1.8852,  0.9715,  4.5097,  2.0497,  2.9940,  3.5137],
            [ 0.9631, -2.1630, -1.2386, -0.1298,  0.7053,  1.8823,  2.0782,  2.0840],
            [-0.0726, -1.9170,  1.9893,  0.6197,  1.1618,  2.8244,  2.6926,  1.5535]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.3487e-01, -5.8800e-01, -3.3290e-01, -2.3259e-01,  3.1830e-01,
              1.2380e+00, -1.4366e-01, -1.5078e+00, -6.5877e-01,  6.7297e-02],
            [-1.0810e-01,  1.3028e+00,  1.4178e+00,  1.3356e+00, -1.1573e+00,
             -1.4945e-01,  6.2577e-01, -1.6930e+00, -2.9018e+00, -7.2427e-01],
            [ 1.0839e-01, -1.7925e-01, -3.4463e+00,  2.4407e+00, -6.2187e-01,
             -9.1366e-02,  2.3537e+00,  7.3081e-01, -7.2891e-01, -7.9045e-01],
            [-2.6694e-01, -1.0251e+00, -7.3521e-01,  5.3806e-01, -1.3318e+00,
             -1.3914e+00, -3.6785e+00, -8.9328e-01, -4.0431e-01, -1.1715e+00],
            [ 6.6610e-01,  2.9403e+00,  1.5494e+00, -2.7990e+00,  2.7336e+00,
              2.5152e+00,  2.0253e+00, -1.1340e+00,  7.5172e-01, -3.4543e-01],
            [ 6.7627e-01, -3.0294e+00,  3.6348e+00, -3.4761e+00,  2.3680e+00,
             -3.4138e-01,  1.3536e+00, -1.6136e-01,  3.1821e+00,  6.1347e-01],
            [-9.1817e-01, -1.3792e+00, -1.7871e+00, -2.6341e+00,  6.9319e-01,
              4.5290e-01,  1.2974e+00,  2.3926e+00,  7.3080e-01,  2.5753e+00],
            [ 2.3213e-02, -3.6468e-01, -2.6584e+00, -4.4484e+00, -4.3920e+00,
              5.2108e-01, -3.8218e+00,  1.1181e+00,  6.9676e-01,  3.5236e+00],
            [ 3.8906e-02,  7.4963e-02,  6.5050e-01, -4.0198e+00, -2.2328e+00,
              1.6616e-01, -5.9708e-01, -1.3382e+00,  5.7383e-01,  1.5372e+00],
            [-1.3368e-04,  1.0858e-01,  6.9642e-01, -2.4440e-01, -1.4934e+00,
             -5.0567e-01, -2.7277e-01, -2.5195e+00,  1.3307e+00,  6.2682e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.487 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
