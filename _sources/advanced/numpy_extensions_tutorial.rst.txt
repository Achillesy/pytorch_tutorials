.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[17.4990,  4.4658,  3.4648,  3.5532,  1.8907],
            [ 6.4131,  6.2425, 10.9366,  4.8948, 11.0080],
            [ 9.0458,  2.7821, 19.1528, 12.8700,  5.4907],
            [14.4689,  9.8249,  5.2947,  3.0190,  4.5073],
            [ 0.3587, 12.5023,  5.2592, 16.5425,  1.1229],
            [14.4689,  2.5951,  1.6616, 10.8439,  4.5073],
            [ 9.0458,  4.0196,  6.0764,  6.3006,  5.4907],
            [ 6.4131, 14.3625, 15.9128, 11.0238, 11.0080]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8170,  1.1823, -0.2260, -0.4089,  0.0366, -0.9421,  0.1862, -0.2416],
            [-0.6882, -0.1290,  2.2725,  1.7427,  1.5637,  1.9564,  0.9807,  1.1810],
            [-1.8172,  0.7507,  2.2472,  0.9054, -0.4116,  0.3978,  0.1166,  0.5196],
            [-0.3357, -0.0414, -1.7361,  1.8348, -0.0788,  0.7382,  0.2949, -0.5875],
            [ 1.9627, -1.0246, -0.3828, -1.0629,  1.5738,  1.0807, -0.8835,  0.8180],
            [ 2.0243, -1.4860, -1.0184,  0.7571,  0.5144, -1.0385, -0.6389, -0.5860],
            [ 0.1064,  1.5117,  1.5557, -1.3601, -0.1886, -0.8327,  1.9800,  2.2384],
            [-0.3354,  1.3289,  0.0527,  0.9334,  0.0270,  0.1781,  1.7578, -2.5097]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1008,  0.6665, -0.7471],
            [ 0.5524,  1.2574,  1.2479],
            [ 1.0192, -0.4190, -0.7001]], requires_grad=True), Parameter containing:
    tensor([[1.2908]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.6605,  3.3506,  9.1996,  5.3801,  1.7004,  0.3014, -0.9742,  1.1278],
            [ 3.8041, -4.3238, -5.6823, -3.3142,  1.2162,  2.4161,  2.0076, -0.8111],
            [-0.0586,  6.6292,  3.1563, -3.2273,  1.1415,  1.4832,  0.7271,  1.2493],
            [ 0.9965, -3.3022, -2.3190, -0.7370, -2.2870, -0.5332, -2.3088, -1.3872],
            [-0.8470,  2.3134, -3.3772, -2.3604, -1.5638,  1.8941,  1.3525,  0.8036],
            [-0.9762, -2.0948, -1.4959, -0.4381, -2.5919,  2.4701, -0.3012, -3.8631],
            [ 2.3169,  3.0684, -2.8771,  0.6191,  2.0678, -0.1052,  2.2334,  2.1742],
            [ 2.2337, -0.9155,  3.2974, -2.1019,  0.1109, -1.1574, -1.7602, -0.5332]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 9.1898e-03,  3.5335e-02, -5.6029e-01, -2.0145e+00,  2.0102e+00,
              4.3310e-01,  9.3453e-02,  1.5472e-03,  7.6325e-02, -1.5699e-01],
            [-5.9086e-02, -7.4371e-01, -1.0437e+00, -4.1395e+00, -5.9366e+00,
              5.5196e-01,  7.2068e-02,  1.4477e-01, -2.9585e-01,  5.0244e-01],
            [-6.4589e-01, -2.6687e+00, -3.6890e+00,  2.8806e+00,  4.6010e+00,
             -8.2778e-01,  1.6124e+00,  2.8916e+00, -1.3125e+00,  7.2598e-01],
            [-1.7332e+00, -7.8526e-01, -1.1538e+00, -1.9378e+00,  2.8582e+00,
              2.5250e+00, -1.9252e+00, -4.6431e+00, -1.9807e+00, -4.4736e-02],
            [-7.2525e-01,  1.6829e+00,  6.4976e+00,  6.5428e+00, -1.3399e-01,
             -5.3932e+00, -1.2673e+00, -4.4623e+00, -5.4052e+00, -1.0420e+00],
            [ 1.0419e+00,  6.8741e-01, -6.5373e-02, -5.7769e-01,  1.1745e+00,
             -1.3923e-01, -4.9643e+00, -5.7564e+00, -3.5044e-01,  1.4941e+00],
            [-6.5219e-01,  9.4949e-01,  3.0720e+00,  3.3420e-01, -5.9551e+00,
             -6.3110e+00, -3.0893e+00, -1.9885e+00, -2.4283e+00, -2.2574e-01],
            [-2.9501e-01,  3.4689e-01, -1.8292e+00,  2.5967e+00,  1.6272e+00,
             -1.6163e+00, -2.5488e+00, -5.1567e+00, -8.0876e-01, -4.9226e-01],
            [-7.1944e-01, -2.1796e-02, -3.2726e-01, -6.8859e-01, -7.6950e-02,
             -3.2155e+00, -2.7725e+00, -1.1920e+00,  2.0917e-01,  9.0790e-01],
            [-9.2333e-02, -1.5174e+00,  1.6051e+00,  1.4684e+00, -2.4621e+00,
             -3.2080e-01,  4.1276e-01,  6.1798e-01,  5.5481e-01,  8.1636e-04]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.846 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
