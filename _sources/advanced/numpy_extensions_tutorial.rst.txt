.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.1059,  8.4043,  3.4904,  8.6566,  5.2288],
            [ 8.8446,  9.3091,  3.8029,  7.8335,  9.4218],
            [11.4745, 14.2506, 12.9179, 13.2784,  2.8553],
            [12.5417,  2.8605,  3.2976,  9.4706, 12.1387],
            [10.2066, 10.5199,  3.0801,  4.5761,  3.2525],
            [12.5417,  7.9304, 13.9425,  4.0456, 12.1387],
            [11.4745,  6.1115,  7.2837,  9.6746,  2.8553],
            [ 8.8446,  6.4435, 13.8886,  5.3608,  9.4218]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7708, -1.5328,  0.4811, -1.5115, -2.0637, -0.8280, -0.9320,  0.0438],
            [ 0.0485, -0.9702, -1.4893,  0.8981,  1.1613,  0.4157,  0.2643,  1.9196],
            [-0.9752,  2.1128, -1.8503,  1.7719, -0.5880, -1.3915,  0.8228, -0.0370],
            [ 0.1983,  0.2085,  0.2159,  0.6725,  0.7101, -0.5645, -1.4304, -1.1774],
            [ 1.1237,  1.4751, -1.8062, -1.0541,  0.1229,  0.7483, -1.2259, -0.3800],
            [-0.3207, -0.8946, -0.6086, -0.3157, -1.8119,  0.3895,  1.7901,  1.1391],
            [ 0.7479, -0.5303,  0.5465,  0.4947,  0.5697, -0.6405,  2.4866,  0.4778],
            [ 0.3140,  0.6496,  0.4100,  1.2254,  0.3397,  2.2326,  1.9166,  0.1202]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2669, -0.5833,  0.5315],
            [-1.6900, -0.7379,  1.0652],
            [ 0.0418,  0.6909,  0.2555]], requires_grad=True), Parameter containing:
    tensor([[1.8209]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.1087,  4.0774,  2.0031,  1.2190,  5.4128,  0.0247,  3.1393,  0.1471],
            [ 2.8019,  3.9238, -3.4782,  0.2744,  1.3751,  0.3662,  4.6307, -1.8495],
            [ 9.7859,  1.8758, -2.8349,  4.6785,  4.3707,  4.4731,  2.4371, -0.3924],
            [ 1.6013, -2.1651,  1.9322,  2.8263,  0.2907,  1.6613,  2.5421,  0.7874],
            [ 6.9241,  3.1024,  1.3099,  0.9145,  1.3274,  0.7681,  2.9365, -2.4422],
            [ 7.8756,  1.2143,  0.3089,  1.7801, -2.1045,  5.3721,  4.6838,  2.5207],
            [-3.3247, -0.1633,  1.2494,  1.8116,  0.8814,  2.7619,  1.7042,  1.4569],
            [ 4.5669,  3.1600,  1.8859,  1.3478,  1.0369,  2.7946,  2.5214, -0.4499]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1782,  0.1941,  0.2476, -0.9930,  0.8137, -1.4764,  2.5911, -2.3522,
             -0.3074,  0.7784],
            [ 1.2183,  1.7751, -1.8163,  1.0956,  1.0213,  5.5668,  1.7302, -7.4834,
             -0.4310,  1.4251],
            [-0.3204, -3.3065,  1.9129, -0.2978, -1.7497,  1.9394, -1.1895,  1.6212,
             -1.5707,  1.2808],
            [-1.6738,  2.5853,  0.5702, -0.0323,  3.3325, -0.2574, -1.4181, -2.4853,
             -4.0491,  2.6652],
            [-0.5033, -2.7546, -2.5784,  0.6873, -0.7300,  1.8882,  0.4294, -1.1352,
             -0.5463,  1.5389],
            [ 0.4879,  0.2607,  0.3984,  0.9208,  4.3632,  1.0228, -1.3768, -0.9478,
             -0.8060,  0.8190],
            [ 0.0618,  1.9380,  0.1206,  1.8716, -2.6489, -3.5784,  1.9155, -0.8623,
              0.3758,  0.4621],
            [ 3.7232, -0.8241, -4.0168, -2.0655, -1.1938, -0.3332, -2.1254, -0.1968,
              1.2644, -0.2534],
            [-1.0414, -0.8643,  0.6001,  0.6991,  1.6942,  1.3794,  4.0635,  3.1507,
             -1.1528, -0.6492],
            [ 0.0236,  0.3653, -0.2414,  0.0760, -0.2044, -0.2646, -0.5033, -1.4722,
             -0.9022, -0.1547]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.935 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
