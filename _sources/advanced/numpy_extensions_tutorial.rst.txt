.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.8857,  6.7258,  3.7329,  7.2993,  6.1086],
            [ 8.4053,  3.1973, 13.6923,  6.3100,  0.3454],
            [11.0498,  7.0032, 12.5136,  7.4283, 14.8510],
            [ 5.6322,  6.0567,  9.1031, 12.2826,  9.3170],
            [ 1.8627,  3.4203,  4.5511,  5.3029, 15.6095],
            [ 5.6322,  4.3843,  2.9580,  3.2765,  9.3170],
            [11.0498, 19.3952,  5.1583, 11.6767, 14.8510],
            [ 8.4053, 16.8624,  7.7318,  5.8785,  0.3454]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.8100,  1.4205, -0.7822,  2.7220,  0.4024, -0.8718, -1.7448, -0.2876],
            [-0.6291, -2.6826, -0.4840,  1.4455,  0.3781, -0.6656, -0.7513, -0.8673],
            [-0.5648, -0.2282, -3.1832,  0.4300, -0.0237, -0.4886,  1.1027,  0.0884],
            [ 0.8022, -0.2048,  1.0342, -1.6452,  0.6062, -0.4522,  2.5793,  0.7139],
            [ 0.1946,  1.2151,  1.4268, -0.1263, -0.6121, -0.4115, -0.3838,  0.2403],
            [ 0.1116,  1.1194,  0.5488,  1.6503, -1.0119, -0.6169, -1.1246, -0.4495],
            [-0.5715, -0.0036,  1.3743,  0.0413,  0.1915,  0.5047,  0.9257,  0.0677],
            [-0.3827,  1.0915,  1.5752, -1.4501,  2.1205, -0.6391,  1.0629, -0.7712]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.2147, -0.5404, -1.2858],
            [ 0.3890,  0.2424, -0.3736],
            [-0.0816,  1.1800, -0.1244]], requires_grad=True), Parameter containing:
    tensor([[0.6939]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8184,  2.7071,  1.1569,  3.2976, -1.3754,  0.2537,  2.3234, -5.1592],
            [-2.1022,  4.1538,  2.1594, -5.0867,  2.2640,  2.6881,  5.7184, -5.5429],
            [-1.4827,  4.7758,  4.5280,  1.1768,  1.7247,  2.8935,  3.0789, -5.3244],
            [ 8.1862,  2.2957,  0.6379, -3.2808, -0.5406,  2.0516,  1.0270,  4.8405],
            [ 4.3397,  2.5768,  1.8503,  2.5907,  3.7044, -0.3279, -3.3714, -1.3915],
            [ 6.0223,  2.3383,  5.2744,  4.7472, -2.8232, -2.0511, -1.9573,  0.3508],
            [ 6.1121,  4.9170,  1.0051, -0.5171,  2.4292,  1.2088,  1.0274,  2.1837],
            [-3.6636, -0.7527, -0.4068,  2.1213,  3.2479,  1.3287,  0.3689,  2.1773]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.6289, -2.1581,  2.5196,  3.7824, -4.1362, -0.8014,  0.7891, -1.5411,
              0.1794,  0.5882],
            [-1.4960,  1.8122,  0.9488, -0.1017, -0.6100, -1.6890, -1.5885,  0.9444,
              1.2969,  0.2456],
            [-3.0021,  3.5807,  0.9430,  2.5240,  2.3182,  0.1271, -1.3673, -3.0895,
             -0.0720,  0.7457],
            [-1.7010, -0.1749,  2.2258,  0.3897, -1.0827, -1.1418, -1.0159,  1.3720,
              0.3284, -0.9699],
            [ 0.7401,  1.1988,  0.4191, -3.4302,  4.2995,  1.1737,  1.7108, -0.3715,
             -1.4684, -0.3571],
            [ 0.2543,  5.3659,  0.5422, -2.7284, -0.3598,  1.8780, -2.1657, -4.9553,
              1.8573,  1.4796],
            [-5.0365,  3.7095,  6.1030, -3.0462, -0.6266,  5.7986, -2.1275, -1.3701,
              0.4797,  0.4412],
            [-4.7984, -1.7889,  7.8716,  2.4600,  1.4837, -3.2545, -1.6552,  3.6120,
             -0.2064, -1.2178],
            [-0.5030, -3.5337,  1.4547,  1.3323, -0.6433, -0.1901,  0.5739, -0.2625,
              0.8125, -0.3996],
            [ 0.1444, -2.0043, -1.0037,  0.6155,  0.6247,  1.0278, -1.5123, -1.3950,
              1.4103, -0.1323]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.485 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
