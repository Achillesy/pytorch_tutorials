.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.7857, 15.8056,  5.3880,  3.6642,  3.0732],
            [ 5.6396,  7.4085,  5.2198,  1.0323,  7.0789],
            [ 4.5504,  1.6650,  9.0173,  8.1810, 14.4381],
            [ 3.9241,  7.1493,  4.4374,  6.9326,  4.4412],
            [ 6.7601,  8.7078,  7.8912,  3.1775,  4.9369],
            [ 3.9241,  3.6937,  5.5639,  8.5071,  4.4412],
            [ 4.5504,  6.5678,  3.0375, 13.6999, 14.4381],
            [ 5.6396,  6.5632,  5.1438,  8.4708,  7.0789]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1745, -0.2321, -1.9849,  0.1570, -2.4625,  0.1653,  0.6910, -0.1694],
            [-1.0491, -0.1471, -0.7532, -0.0553, -2.0000, -0.0153,  2.3158,  0.5495],
            [ 0.6665, -0.0615,  0.1097, -1.2919,  1.2309, -1.4468, -0.1322, -1.4527],
            [ 0.1508, -0.3922,  0.6268, -0.9633,  0.5532, -0.0960,  0.6120,  0.8222],
            [-0.3236,  0.1110,  0.5926, -0.3974,  0.3900,  0.5529, -0.2370,  0.3337],
            [ 0.5833,  0.4199, -1.4119, -0.0859, -1.8702,  0.9032,  0.5222, -0.3149],
            [ 0.8634,  0.0243, -1.0219, -1.2328, -0.7233, -0.3142,  0.2829, -0.6344],
            [-0.5949, -1.5085, -0.1821, -1.3088,  0.9483,  0.8380,  0.5767,  1.3141]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4700, -0.4156,  0.2898],
            [-2.1297, -0.9379, -0.2025],
            [-0.8178,  0.5053, -0.3966]], requires_grad=True), Parameter containing:
    tensor([[0.0541]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9456,  0.6757, -3.3069, -1.8265,  1.2161,  3.3635,  0.3638, -0.2207],
            [-0.2456, -0.3686, -4.1819, -2.8471,  0.7157, -1.2982,  0.6590,  1.2215],
            [ 3.6238, -3.1893,  1.2583, -0.6303,  2.5185, -0.6269,  2.8494, -5.0701],
            [-1.2643, -0.9400,  3.7784, -2.2126,  0.6850, -1.6399, -1.0276, -4.7691],
            [ 2.1686,  3.6470, -0.9008, -1.3978, -0.7056, -1.9091, -1.6550,  1.7811],
            [ 1.2852,  0.0291,  2.4370,  1.3797,  1.2316, -0.4625, -2.1156, -0.7540],
            [ 3.0958,  3.8723,  0.9164, -2.4273, -2.3513, -1.3499, -3.9842, -1.6003],
            [-2.0575,  0.1829,  2.5075,  3.1222,  3.2151,  2.5107, -3.5621,  0.6613]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1596,  0.7492, -0.0518, -0.5008,  1.1429, -0.7983, -0.0532, -0.3816,
              0.3275, -0.4375],
            [ 1.2075, -2.6206, -4.0670,  1.0618, -2.4457,  0.5198,  2.6572,  3.9371,
              1.8687,  0.3718],
            [-2.0687, -2.9117, -0.0419,  0.4530, -1.3694,  0.6647, -2.4836, -0.1588,
             -1.3006,  0.6458],
            [-0.6198, -1.0573,  2.0746, -2.4427, -1.5737, -1.1864,  1.9218,  1.8556,
             -1.0564,  0.3191],
            [ 2.4877,  3.5979,  3.0285, -1.5937, -2.6847, -1.0121, -2.1821, -3.4264,
             -1.4163, -0.3974],
            [ 0.0166, -2.1119, -1.0825, -1.0178,  2.1699, -2.5112,  2.2489, -1.0011,
              1.0043, -0.9836],
            [ 0.5385,  5.4542,  5.2608, -0.6173,  1.7243, -4.1477,  6.3606,  1.5615,
              2.0369,  0.3327],
            [ 1.1629,  3.3477, -1.0717,  5.6569, -4.7552, -2.5028, -5.4073, -1.5477,
             -1.7284,  0.0874],
            [ 0.5388, -0.2608,  0.0129,  1.6477, -6.8585, -0.5147,  3.0192,  3.9483,
              0.8741, -0.1800],
            [ 0.0821, -0.2466,  0.4269, -0.6698, -0.5144, -0.3216,  2.4650, -1.4067,
              0.9223,  0.2207]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.872 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
