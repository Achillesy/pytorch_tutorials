.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.1248,  1.3760,  6.0157,  6.7501,  5.7570],
            [ 8.2277,  4.8351,  6.1414,  5.6024,  3.5786],
            [ 5.7980, 18.7769,  2.5196, 10.9991, 13.0363],
            [15.8721, 11.4105,  5.8714,  9.0292,  7.6441],
            [ 4.1574, 13.8602,  2.9657,  3.3620,  7.0833],
            [15.8721,  2.6335,  4.5936,  9.4400,  7.6441],
            [ 5.7980,  2.4685,  5.5726, 15.9408, 13.0363],
            [ 8.2277,  4.9023,  7.6549,  4.0009,  3.5786]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2127,  0.7060,  0.9860,  0.3756,  1.5510, -0.4725, -0.8144,  0.7172],
            [ 1.0245,  0.9926, -0.3408, -0.2146,  1.2709, -0.1824, -1.1486,  0.8550],
            [ 0.6584, -2.3090, -1.8586, -0.9561, -1.9383,  0.0671,  1.3644, -1.4254],
            [-0.7896,  0.6070,  1.1529,  1.4923,  1.7414, -0.9636,  1.2722, -1.1591],
            [ 0.5517,  1.5910, -0.1847, -0.6176, -1.0048, -0.6928, -0.3250,  1.2622],
            [-0.6317,  0.8851,  0.1341,  0.8399, -0.0470,  0.3900, -0.1508,  0.9272],
            [ 2.2121, -0.3946,  0.1019, -0.0066,  1.1506,  0.5110,  1.7889, -0.3238],
            [ 0.2821, -2.0057, -0.9398,  2.0929,  0.0983,  0.6386,  0.0608, -1.5431]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3284, -0.6158,  0.7178],
            [ 0.7595,  2.2303, -0.3829],
            [ 0.0677, -1.1865, -0.4842]], requires_grad=True), Parameter containing:
    tensor([[1.4928]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4044, -3.8916,  2.1192,  3.3904, -1.3361,  4.0238, -0.5411,  0.7958],
            [ 0.7608,  4.5853,  5.6212, -0.7986,  6.0224,  1.6908, -2.5562,  4.8398],
            [ 4.0751,  2.3515, -1.8956,  1.4395, -1.9862, -1.1466,  7.1664,  2.7270],
            [ 0.8180,  0.3850,  2.1923, -0.2645,  4.9763,  3.5536, -1.7249, -6.2864],
            [ 3.1438, -3.2701, -0.9868,  5.3095, -0.5347, -1.6415,  3.5919,  8.3442],
            [-3.2229,  6.3113,  6.4403, -2.9030, -0.7049,  1.6554, -1.2519, -4.2703],
            [ 3.0876,  0.6962, -2.0855,  4.7936,  2.7350,  3.9583,  0.4676,  1.4038],
            [-0.1693,  2.4221,  4.5824, -0.5959, -2.4157, -1.6587,  4.9171,  7.1704]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3291,  0.5054, -0.9994, -0.1896, -0.1697,  1.8671,  1.4611, -0.2635,
             -0.5276, -0.7959],
            [-0.7125, -2.7379, -0.0951,  3.8085,  0.8623, -5.6791, -6.0157, -3.6381,
             -0.6627,  0.0509],
            [-0.2673,  3.2885,  6.5013, -4.9969, -0.7724,  3.8479,  6.4854,  4.1805,
             -1.3754,  1.9390],
            [ 0.4393,  0.4507, -7.0419, -2.1427, -2.5153, -1.1291, -5.1004, -0.6135,
              2.0148, -0.1054],
            [ 0.1676, -1.7761, -1.8085,  2.6577,  2.6444,  0.3735,  2.7834, -3.6097,
              1.3209, -1.7382],
            [-1.1689, -3.6003,  0.8925,  2.4117,  2.5413,  6.7394, -2.2356,  4.0648,
             -2.2321, -0.6790],
            [-1.9888, -1.0927,  6.3235,  0.4519, -0.0880, -8.4228, -1.5030, -5.8273,
             -0.8322,  0.7678],
            [ 0.8065,  5.9042, -0.2386, -3.1657, -0.1678,  1.4704, -0.7505,  1.7599,
              0.9206,  0.5321],
            [ 0.9765,  0.3394, -2.5594,  0.0874, -5.2942, -3.1170, -2.6323, -2.5015,
              0.4531,  0.2664],
            [ 0.0768, -1.3653, -0.1715, -0.5628,  2.6321,  2.8393,  1.9651,  2.2838,
              1.0453,  0.1358]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.857 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
