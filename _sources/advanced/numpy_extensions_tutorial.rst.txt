.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.1367,  3.7127,  7.4932, 13.4365,  2.1830],
            [12.3842,  3.5053,  8.2313,  6.8992,  7.8699],
            [10.4501, 13.2370,  1.6204,  8.7037,  1.1843],
            [ 3.9345,  2.1114,  2.2060,  3.2949, 12.2816],
            [ 1.2441, 12.4651,  1.4000,  6.3827, 10.5102],
            [ 3.9345, 10.0392,  9.5471,  6.4146, 12.2816],
            [10.4501,  1.0455,  7.3190, 12.2261,  1.1843],
            [12.3842, 11.2692,  5.6772,  5.7976,  7.8699]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.8546e+00,  1.5625e+00, -3.7238e-01, -3.2559e-01,  1.1162e-01,
              4.5819e-01, -6.5436e-01, -4.2312e-01],
            [-7.4209e-01, -1.1495e+00,  7.7582e-01, -1.3094e+00, -1.8082e-01,
              7.1115e-01,  1.6047e+00, -8.2918e-01],
            [ 1.3844e-01,  8.0721e-02, -2.7892e-01,  1.7025e+00, -3.5283e-01,
             -7.5646e-02,  8.5316e-04,  3.0793e-01],
            [ 3.5500e+00,  2.1693e-01,  6.7019e-01,  1.7789e-01, -4.3515e-01,
             -8.7460e-02,  9.2758e-01, -2.8021e-01],
            [ 1.0038e+00, -7.8773e-01,  8.0671e-01,  1.3190e-01,  3.5293e-01,
              8.7971e-01,  8.5805e-01,  8.0222e-01],
            [-3.1204e-01, -4.9632e-01,  2.9538e-01, -1.4443e-01, -1.2693e+00,
             -2.8265e-01, -8.5573e-01,  2.3403e-01],
            [-9.8769e-01, -8.0629e-01,  1.6378e+00,  1.0665e+00, -9.4810e-01,
              2.7921e-01, -1.5700e+00, -2.7980e+00],
            [ 1.0863e+00, -2.7335e-01, -5.2606e-02,  9.4286e-01, -1.9630e+00,
              4.2689e-01,  6.6924e-01, -4.3538e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4304, -0.3772, -1.0472],
            [ 0.3770, -0.1054,  0.1704],
            [ 0.9414, -0.1165,  1.6286]], requires_grad=True), Parameter containing:
    tensor([[0.0826]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.0528, -0.6771,  3.7889, -2.2925, -0.1091, -0.8538,  0.1167,  2.2313],
            [ 1.7065,  3.5237,  0.2135,  4.9056, -3.2484, -2.1053, -2.3370, -0.9435],
            [-2.6753,  1.9530, -0.0383,  1.4307,  0.1607,  0.4931, -0.1409, -3.6749],
            [-1.3199, -2.3413, -1.9806, -1.6778,  0.6367,  5.0948,  1.8091,  0.0154],
            [-1.0180,  0.7095, -1.6428, -2.6967, -1.5073, -2.0749,  1.4465,  1.3633],
            [ 0.6168,  2.8413,  3.5342,  1.3697, -0.6779, -0.6658, -1.4534, -2.1391],
            [-1.4682,  3.3531, -1.1191,  5.1537,  3.1665,  1.4166,  2.0010, -0.5608],
            [ 1.5068,  0.6789, -0.9109,  0.0528,  2.4926, -1.4522,  2.0936,  2.0981]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1728e-01, -7.6656e-01, -6.8176e-01, -1.9640e+00,  4.8605e-02,
             -4.6919e-01,  1.1093e+00,  2.4426e+00,  1.1629e+00,  8.3891e-01],
            [ 2.5341e-01,  1.0172e+00,  8.7590e-01,  2.2692e+00,  9.9736e-01,
              4.1298e-01, -2.4614e-01,  1.0943e+00,  6.9637e-01,  1.3918e+00],
            [-4.8046e-01,  9.2896e-01, -1.8412e+00,  3.6265e+00, -2.1498e+00,
             -1.8490e+00, -2.5727e+00, -4.5912e+00, -2.0007e+00, -2.1830e+00],
            [-4.5280e-03, -1.7396e+00, -1.6988e+00, -2.7011e+00, -1.1887e-01,
             -2.8060e+00,  7.0248e-01, -3.4276e+00, -2.5691e+00, -2.7529e+00],
            [ 1.7635e+00,  3.6057e-01,  3.6194e+00,  2.2770e+00,  2.4348e+00,
              2.1277e+00,  4.8806e+00,  6.0296e-01,  1.1753e+00,  1.1596e+00],
            [ 2.2805e-01,  1.0147e+00,  6.6302e-02,  3.2113e+00, -2.8810e+00,
              2.8744e-01,  1.2821e+00,  1.1194e+00,  2.3022e+00,  1.6823e+00],
            [-9.9606e-01, -2.1526e+00, -3.4681e+00, -2.5348e+00, -4.0832e+00,
              1.6193e-01, -5.2019e-01, -7.0770e-01,  1.4559e-01, -7.2577e-01],
            [ 6.5873e-01, -8.1896e-01,  9.4575e-01, -6.6129e-01, -1.4636e+00,
              1.6660e+00,  1.9267e+00, -1.5679e+00,  4.5774e+00, -1.4648e+00],
            [ 6.4238e-01,  4.2969e-01,  3.3247e+00,  6.9143e-02,  3.5813e+00,
             -1.6951e+00,  1.6582e-01, -8.1524e-01,  4.2273e-02,  6.4710e-01],
            [-6.7955e-01,  2.9105e-01, -4.2717e-01,  1.8441e-02,  2.4147e+00,
             -1.5438e+00,  1.2102e-01, -1.4508e+00, -3.1369e+00,  7.3270e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.859 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
