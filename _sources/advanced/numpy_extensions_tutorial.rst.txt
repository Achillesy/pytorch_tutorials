.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.7407,  5.4360,  5.7465,  8.7897,  2.7103],
            [12.6994,  3.2575,  8.2962,  2.9413,  4.8338],
            [ 1.9160, 11.2072,  2.8573,  7.5267, 17.0974],
            [12.9003, 10.4359,  6.5549,  5.4589, 13.4873],
            [ 8.4834,  6.6646,  5.9510,  9.3794,  1.2131],
            [12.9003,  4.7970,  7.5852,  5.4429, 13.4873],
            [ 1.9160,  4.8184, 10.3235,  7.8244, 17.0974],
            [12.6994, 12.1912,  8.5643,  6.5015,  4.8338]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1994,  1.0868, -0.3974, -0.6369, -2.2194,  0.7899,  0.0808,  0.6765],
            [ 0.7583, -0.1514, -0.1143, -0.6712,  1.3939, -2.9292,  0.1436, -1.7399],
            [-0.0260,  0.6738,  1.3333, -1.3051, -0.7248, -0.7653, -1.2351,  0.1406],
            [-0.9283,  1.0700,  0.5034, -0.1313,  0.4229,  1.3447, -0.0038,  1.2726],
            [-1.6428, -1.0317,  0.5476,  1.9117,  0.3013,  0.4130,  0.6860,  0.3952],
            [-0.6526,  0.3776,  0.5989,  1.0687, -0.8377, -0.2425,  0.6564,  0.0363],
            [ 1.6879,  0.3320,  0.7201, -0.9185,  0.6364, -0.5833,  1.1564,  1.4880],
            [-1.9188,  1.2993, -1.9770, -1.3577,  0.1288, -0.4796, -1.1040, -0.9482]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4090, -0.6621, -0.2706],
            [-0.3448, -1.5597, -1.0629],
            [-0.8959, -0.9631, -0.4994]], requires_grad=True), Parameter containing:
    tensor([[1.4942]], requires_grad=True)]
    Output from the convolution:  tensor([[ 7.2012,  6.0169,  3.8635,  1.2463,  0.4399,  0.5514,  0.4019,  2.3661],
            [ 2.0983,  6.4864,  3.1206,  0.6253,  2.7114,  1.6636,  1.3418,  1.2503],
            [-1.5069,  3.4723,  0.9617, -2.4886, -0.3447,  0.9129,  0.3572,  0.0074],
            [-3.7969, -0.1233,  1.8823, -0.4784, -3.5439, -1.0112, -0.3666,  0.9601],
            [ 0.0526,  4.0231,  2.8865,  0.3791, -0.8978,  1.3407,  0.1287, -1.9053],
            [ 3.5597,  3.1225,  5.4562,  5.2345,  2.5940,  0.4395,  0.4734, -1.7912],
            [ 2.8709,  3.7661,  3.5509,  6.4284,  3.4147, -1.4617, -0.1388,  0.9708],
            [ 0.2977, -0.1372,  2.9409,  5.8378,  4.3930,  1.2124,  2.8107,  5.2402]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3420,  0.2883,  0.0255,  0.6600,  0.8314,  0.4824,  0.1515, -0.7937,
             -1.0614, -0.3597],
            [ 0.2742,  1.4055,  0.7064,  0.8761,  1.9459,  1.0295,  0.8842, -0.7428,
             -2.7170, -1.3156],
            [ 0.7103,  0.3090,  2.2092,  3.3501,  1.6112,  1.2302,  1.7575, -0.6737,
             -1.4318, -0.1842],
            [-0.5843, -1.1744,  0.0815,  3.6543,  1.4298,  1.2661,  2.9335,  2.0967,
              0.7466,  0.4627],
            [-0.2409, -1.6337, -1.1143,  2.1055,  3.9055,  1.1542, -0.2787,  0.3825,
             -0.4786, -0.7129],
            [-1.0429, -1.4786,  2.5717,  2.2178,  0.0488, -1.5865, -2.7937, -2.0787,
             -2.2679, -1.8099],
            [ 0.1950,  1.9884,  1.5679, -0.7299, -1.0554, -1.5116, -3.1420, -4.6180,
             -1.3193,  0.2493],
            [-0.0695, -1.2179, -1.9065, -1.0983, -1.3941, -1.6660, -3.3366, -1.6322,
             -0.4008, -0.0853],
            [-0.3081,  0.7180, -0.7332, -1.8471, -1.9846, -1.1996,  0.2671, -1.4191,
             -2.7584, -1.6017],
            [ 0.9002, -0.1572, -0.8468, -1.8111, -0.6870, -0.0075, -0.2398, -1.8107,
             -1.6343, -0.6882]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.854 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
