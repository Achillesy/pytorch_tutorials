.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.6718,  6.0395,  8.1057,  7.5316,  9.1044],
            [ 5.3151,  7.2490,  9.1515,  7.7644,  6.9195],
            [ 5.8159,  4.8455,  3.5579, 13.3667,  6.1868],
            [ 5.1842, 14.5208,  2.3173,  0.9889,  1.5080],
            [ 7.7896, 12.1929, 11.7589,  3.1576,  1.7364],
            [ 5.1842,  4.6030,  7.2968,  9.9735,  1.5080],
            [ 5.8159,  0.1975,  6.2968,  8.3737,  6.1868],
            [ 5.3151,  3.0522,  2.6189, 13.4567,  6.9195]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4458,  1.0083, -0.8316, -0.6156, -0.4578,  0.1129,  1.3249,  0.1447],
            [-2.5384, -0.9763,  1.2837, -0.0628,  1.8122, -0.3534, -0.3632,  1.4682],
            [ 0.0358,  1.2446, -0.5716, -2.1728,  0.3884, -0.8852, -0.8250,  0.2541],
            [-1.6943, -0.1592, -0.2800,  0.6453,  1.0258,  0.9755,  0.3191,  0.3264],
            [ 0.2268, -0.1829, -0.3323,  1.1289, -2.0545,  0.4997, -1.2786, -0.1508],
            [-0.4716, -1.0372,  0.2829,  1.4292,  0.1238, -0.2147, -0.7647,  0.7121],
            [-1.9190, -0.4498,  0.8054, -0.7070, -0.6164, -0.4495, -0.7741, -0.6848],
            [-0.3183, -0.1474,  0.5980,  0.9458, -1.5254, -1.4468, -0.0522, -0.9833]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5420,  0.2127, -2.1070],
            [-0.9756,  0.2407,  0.6947],
            [ 1.0023, -0.4510,  0.3271]], requires_grad=True), Parameter containing:
    tensor([[0.6857]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.4929, -3.0754, -1.2071,  6.0524, -2.9935,  4.9137,  4.1214, -0.4616],
            [ 0.2066,  7.6630,  1.8080, -2.1418, -1.0859, -1.5256,  4.8971, -3.0228],
            [ 3.7979, -2.0505, -6.2305,  2.4577,  2.5724,  1.9652,  1.1073,  1.2601],
            [-2.4350,  2.9563,  4.9295, -3.9501, -3.8821,  0.7057, -2.9544, -1.5277],
            [ 2.3793, -1.6305, -3.2072, -0.0696,  1.2130,  3.3590,  2.4785,  3.0054],
            [ 0.3087,  2.6638, -1.1357,  4.2908,  1.0354,  0.7405,  1.9988,  0.7634],
            [ 3.0912,  4.7339,  3.6047, -0.4934,  3.9318, -1.3568, -2.7433,  1.9706],
            [ 1.1744, -2.7291, -5.1966,  0.6324, -1.9435,  1.0165,  3.7761,  0.0551]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 7.1644e-01, -1.0610e-01, -1.9286e+00,  9.9583e-01, -4.3220e+00,
              3.0448e+00, -2.3109e-01,  1.4301e+00,  8.2410e-01,  9.4724e-01],
            [-1.6518e-01,  9.5643e-01, -5.8595e+00,  4.1156e+00,  2.9635e+00,
             -3.0875e+00, -3.5910e+00,  2.7021e-01,  3.4888e-01,  3.4585e+00],
            [-6.1044e-01,  1.5105e+00,  4.0456e+00, -9.9319e+00,  3.8895e-01,
             -1.6029e+00,  4.8652e+00,  2.5570e+00,  6.4118e-01, -1.6038e+00],
            [ 2.5037e+00, -3.5105e+00, -2.4707e-02, -1.0869e+00,  2.1629e+00,
              3.6983e+00,  8.2319e-01, -3.8770e+00, -5.4295e-01, -7.4114e-01],
            [-4.6510e-01,  1.4267e+00, -3.0625e+00,  5.3434e+00, -1.2466e-01,
              3.0030e-02, -8.8947e-01, -1.4116e+00, -2.9060e+00, -1.8426e-01],
            [ 2.2647e-01,  1.5013e+00,  2.2391e+00, -1.8816e+00, -5.5356e+00,
              1.1679e+00,  2.9125e+00,  2.9008e+00,  3.3586e+00, -1.9326e+00],
            [ 1.7806e+00, -9.0479e-01, -4.9214e+00,  1.6790e+00,  9.0857e-01,
              9.1204e-01,  1.0040e+00, -3.6496e+00,  2.1833e+00,  3.1083e+00],
            [-1.6818e+00,  4.5793e-02,  1.2724e+00, -5.2589e-01,  1.1145e+00,
              9.9781e-01, -1.2188e+00,  2.4123e+00, -1.9578e+00,  1.5398e+00],
            [ 1.5600e+00, -4.1689e-03,  1.6717e+00, -5.5531e-01, -1.1010e+00,
              2.2412e-01, -1.4178e+00,  2.6243e-01, -1.3472e-01, -1.0308e+00],
            [-2.1116e-02, -8.7398e-01, -1.9381e-01, -1.0625e+00,  5.5023e-01,
             -7.5072e-01,  1.7389e-01, -1.0274e+00,  4.1429e-01, -3.1120e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.791 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
