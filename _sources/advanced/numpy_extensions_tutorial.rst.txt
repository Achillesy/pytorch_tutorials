.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.5335,  2.2318,  8.0398,  9.5442,  5.9122],
            [ 5.7589,  9.1495,  3.8955, 12.1814, 13.4812],
            [ 3.3886,  7.9784,  2.2386,  3.4776,  4.5969],
            [ 3.2580,  7.5601, 14.8865, 10.0891,  1.7696],
            [ 7.0858, 10.0835,  4.5027,  2.9910,  6.0367],
            [ 3.2580,  3.6572, 17.5627,  8.7955,  1.7696],
            [ 3.3886,  7.6337,  7.3630, 10.9522,  4.5969],
            [ 5.7589,  7.1031,  8.8553,  5.4405, 13.4812]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6961,  1.5054,  2.0257, -2.2089, -1.5586, -0.9465,  0.3936, -0.0222],
            [ 0.9874, -0.8940, -0.4673,  0.5500, -1.5290, -0.4951, -0.5553,  1.0722],
            [-0.8544, -2.2543, -0.3367,  0.2471,  0.2617, -0.2795, -2.2126,  1.6080],
            [-1.8756,  0.5635,  0.5958,  0.2965,  0.6315,  1.2166, -0.2151,  0.4688],
            [ 0.4641, -0.6739,  0.4415,  0.1962,  1.2304, -1.9296, -0.6800,  0.9335],
            [-0.2108, -0.9779,  1.2367, -1.0292,  1.3185,  0.4243, -0.2414,  0.4648],
            [ 0.3037,  0.3193,  0.7147,  0.2569, -0.1582, -1.1440,  0.7436, -1.4993],
            [ 0.7155, -0.4422, -1.8087,  0.1273,  1.2834, -0.6233,  0.7414, -0.0533]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4044, -0.1093, -0.7078],
            [ 0.5954,  0.2616,  0.2323],
            [ 0.8729,  0.0090,  0.9003]], requires_grad=True), Parameter containing:
    tensor([[-0.3362]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7924,  0.7794, -0.8592,  0.5198,  0.9470,  3.6205, -2.0775,  0.4120],
            [ 1.3031,  2.8842,  0.5508, -0.2386,  2.6709,  1.5586, -1.7274,  0.7930],
            [ 3.1260,  3.6294, -2.4664, -0.1130, -0.2329,  3.1140, -0.2560,  3.2978],
            [-0.6993,  2.3137, -0.2643, -0.0526, -2.0686,  1.5923, -3.8186, -1.7853],
            [-0.7907,  0.6294,  2.1053, -3.3204,  0.9718, -1.8236,  0.0805, -0.1521],
            [-2.8469,  2.6585, -1.1675, -0.4463,  3.8966,  0.3837,  0.3499,  0.2976],
            [-1.8889,  0.1343, -1.2812, -0.1379, -0.9145,  1.3311,  3.7369,  1.6239],
            [ 0.1967, -0.4533, -5.6138, -1.8245,  0.1203,  1.8648,  2.6577, -0.0313]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-8.9502e-01,  3.1620e+00,  8.7360e-01, -3.2256e+00, -1.5194e+00,
              2.4162e+00,  1.1714e+00, -2.3445e+00, -1.9636e-01,  7.7593e-01],
            [ 1.0735e+00,  2.3692e+00, -4.0461e-01, -1.3343e+00, -8.9421e-01,
             -8.2343e-01, -1.7503e+00,  5.5688e-03,  1.0429e+00,  1.7936e-02],
            [ 1.8394e+00,  3.8530e+00,  9.5182e-01,  4.6768e-01, -5.8478e-01,
             -3.3673e+00, -8.7872e-01,  1.1332e+00, -7.6798e-01, -1.5519e+00],
            [ 6.5692e-01,  4.0267e+00,  2.4124e+00,  1.3847e+00,  9.0661e-01,
             -3.4213e+00, -1.4690e+00, -1.6335e+00, -1.1810e+00,  3.3621e-01],
            [ 1.7556e+00,  1.7257e+00, -1.7622e-01, -2.7430e-01,  3.3038e+00,
              1.3551e+00,  4.2301e-01, -9.0829e-01,  1.0494e+00, -1.1040e-01],
            [-2.3545e+00,  1.7620e+00, -1.6253e+00,  1.3313e+00, -1.4228e+00,
              1.0096e+00,  2.3540e+00,  1.3989e+00, -5.7976e-01, -1.6564e+00],
            [ 8.5097e-01,  1.9539e+00,  5.6370e-01, -7.2481e-01, -6.4604e+00,
             -3.1623e+00,  1.7406e+00,  2.5683e+00, -4.4189e-01,  1.5115e+00],
            [-2.8786e+00,  1.7580e+00,  1.0974e+00,  6.4486e-01, -4.0482e+00,
              1.5615e-01,  2.0962e+00,  1.2480e+00, -2.2051e-01,  1.2811e+00],
            [-1.5301e-01,  1.2916e+00,  2.5674e+00,  2.6536e+00, -3.5566e-01,
             -3.8270e-02, -4.1645e-01, -1.0892e+00,  9.3519e-01, -5.4115e-01],
            [-1.2367e+00,  2.9383e-01, -9.0309e-01, -2.6421e-01, -6.6953e-01,
             -6.6289e-01,  1.0674e-01,  2.9568e-02,  1.2223e+00,  7.0530e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.913 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
