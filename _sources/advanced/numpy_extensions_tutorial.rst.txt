.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.1899,  5.0374,  7.9049,  4.9187, 19.5316],
            [ 5.3232,  7.0412,  4.4100,  7.4732, 10.4688],
            [ 2.8328,  1.5331,  6.9018,  3.6113,  5.2994],
            [ 9.2520, 13.0391,  5.2201,  0.6858,  7.2506],
            [13.2978,  4.2107, 16.3603,  2.1273,  0.2960],
            [ 9.2520,  4.7505, 10.4174,  9.3392,  7.2506],
            [ 2.8328, 10.3031, 15.0325,  3.4675,  5.2994],
            [ 5.3232, 15.3711,  0.1772,  1.6723, 10.4688]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.7653, -1.0869,  0.9721,  0.8899,  1.6938, -0.8624, -0.6487,  0.6156],
            [ 0.1559, -0.1436, -0.3137, -1.9335, -1.7628,  0.2019,  0.0745, -1.0002],
            [-0.5171, -0.4500,  3.3488,  1.2677, -0.1941, -1.8705,  0.4812, -0.0574],
            [ 0.8217,  0.1725,  1.0692,  1.0855,  0.5643, -0.1234, -2.1398, -0.6604],
            [-1.1275, -1.0723, -0.2145,  1.2235,  0.4660,  0.0910,  0.4859,  0.5447],
            [-0.4590,  0.6892,  0.8707, -0.9638,  0.5069,  0.5065,  0.8466, -0.4074],
            [ 1.0707, -0.4565,  0.8041,  0.3324, -0.4591,  0.0538,  1.6520,  0.5023],
            [ 0.5554, -1.7323, -0.5253, -0.5756,  0.4569, -0.4412,  2.0603, -1.5103]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2356, -1.7987,  0.5912],
            [ 0.1096, -1.8335,  0.9023],
            [-0.9784,  1.2124, -1.2854]], requires_grad=True), Parameter containing:
    tensor([[-1.6998]], requires_grad=True)]
    Output from the convolution:  tensor([[  3.0817,  -2.4213,   2.2761,  -0.8629,  -7.6941,   1.0462,  -6.2739,
               0.2322],
            [ -2.7224,   3.1423,  -8.8367,  -0.9856,  -0.8438,  -5.9925,   4.1417,
              -3.5126],
            [ -2.0435,   0.0172,  -2.2010,  -8.7504,  -0.2523,  -0.8854,  -0.6776,
              -4.7007],
            [  5.7355,   1.2003,   3.3062,  -6.1989,  -2.1455,  -6.5333,   6.9275,
              -3.8232],
            [  1.7036,   3.5677,  -2.5891,   0.6141, -12.1313,   1.1647,   1.2950,
               1.8162],
            [  3.8229,   0.5655,   2.9237,   0.1780,  -3.9655,   7.1741, -11.4043,
              -0.6743],
            [ -2.9952,  -3.3534,   0.3664,  -1.1844,  -2.2545,   1.9663,  -6.1732,
              -6.5223],
            [ -4.9910,  -0.6858,  -1.1782,  -0.4277,  -2.3590,  -3.6261,   1.6894,
              -1.1676]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.9425, -1.2820,  0.2997, -0.5112,  2.1413,  2.4878, -2.6775, -0.6953,
              0.7410, -0.1129],
            [ 0.7757, -1.1213,  0.2648,  0.1833, -4.1434,  2.4378,  2.2726, -1.8950,
              1.3843, -0.2950],
            [-0.2540,  2.9778, -1.9487,  1.3388, -3.1638, -4.5165,  5.4983, -0.5379,
             -1.4860,  0.2550],
            [-2.1607, -5.6491,  1.9273,  0.4148, -9.2556,  4.4039, -7.4829,  2.2149,
             -1.5932,  0.8295],
            [ 1.6934, -3.0618,  1.2845, -0.2324,  0.2361, -4.6432,  7.7177, -6.2025,
             -0.7256,  0.5362],
            [-3.6494,  1.2555, -2.6195, -4.9069, -1.3295,  5.1125,  0.8446, -0.8888,
             -0.8111, -0.1670],
            [ 1.1664, -2.7425,  4.7102, -3.5807,  0.8608, -1.6829,  2.2936, -1.9188,
              6.1572, -2.7579],
            [ 0.4034,  3.3204, -6.1616, -0.1882, -2.7069, -3.2267, -2.0866,  2.4363,
              2.1715, -0.4060],
            [ 0.0429,  2.4269, -1.9074, -0.7735, -3.3466,  5.4435, -7.3724,  5.0692,
             -2.6139,  1.6104],
            [ 1.2467, -2.2906,  1.7777, -1.4771,  1.1941, -4.0368,  2.6494, -2.0527,
             -0.0999,  0.2846]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.848 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
