.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.8643,  0.8547,  2.0204,  4.6748,  3.2900],
            [17.7521,  7.0553,  9.3022, 12.4189,  8.0863],
            [ 7.9081,  3.5721,  4.5744,  6.4594, 10.0124],
            [ 5.3965,  4.4771,  7.9633,  6.2916,  5.7869],
            [ 2.2693,  5.7982,  6.5357,  9.9071,  6.9928],
            [ 5.3965,  9.0858, 12.9888,  2.9752,  5.7869],
            [ 7.9081,  9.1391,  2.4547,  3.2772, 10.0124],
            [17.7521,  6.4730,  4.5213,  3.1195,  8.0863]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9447, -0.1453, -0.1119, -0.3845, -0.0744, -0.7571,  1.8048,  1.5049],
            [ 0.1988,  0.3727, -0.9124,  0.6929,  0.2263,  0.8489, -0.2240,  1.6351],
            [-0.1963,  1.9725,  1.2838,  1.3748,  0.3538, -0.6683,  0.6701, -0.5452],
            [ 0.0126,  0.1005,  0.1753,  1.4945, -0.4778,  1.7980,  0.7769, -0.6954],
            [ 1.1640,  0.8124,  0.5577, -0.1636,  0.1081,  0.0475, -0.4352,  0.5049],
            [-0.3950,  1.1121,  0.9346,  0.4976, -1.1779,  1.4484, -0.1671, -0.5552],
            [-0.4919, -1.7513, -0.3441, -0.7644, -0.9676, -0.4964, -0.8018, -0.8180],
            [ 1.4005, -2.3074, -0.3201, -1.1012,  0.6605, -0.1706, -1.4986, -0.8168]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.0613, -1.0165,  0.1388],
            [-0.7680, -0.9151,  0.8613],
            [-0.0243, -0.4702, -1.0067]], requires_grad=True), Parameter containing:
    tensor([[1.3626]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8328,  3.7259, -2.0821, -1.2974,  1.9979, -0.5571,  4.6856,  0.1257],
            [ 0.8812,  2.8113, -1.0150,  1.6780, -2.8097,  9.1638, -2.5724, -3.7611],
            [-1.8879,  0.3285,  0.4791,  0.5104,  3.6944,  0.5492, -1.6521,  3.6701],
            [ 1.1823,  1.6757,  1.6955,  1.4662, -0.0437, -2.8345,  2.0859, -3.6011],
            [-0.1286, -0.6683,  2.3898,  4.0218,  2.4931,  1.1494, -2.1485, -0.0698],
            [-2.4210,  1.6640,  4.9098,  2.2002, -0.9932,  0.8270,  3.1264,  2.1704],
            [ 3.6350,  4.6977,  0.8075, -0.1166,  6.6507,  3.9999, -1.3786, -1.1684],
            [-0.1419, -3.4829, -0.8050,  6.0519,  0.4899, -0.1624,  3.8688,  4.2521]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1946, -0.8886,  0.2888,  0.0962,  0.0202, -0.3295,  2.0270, -0.4699,
             -1.0906,  0.1838],
            [-0.0681, -2.2215,  1.7475, -1.2077, -0.9971,  2.0482, -5.0841, -2.2325,
              2.1208,  0.8558],
            [ 0.0334, -1.4521, -3.4662,  1.9088,  0.1453, -2.9948,  0.3086,  4.5693,
             -2.7251, -3.1127],
            [-0.9061, -0.9286,  0.2551,  1.8421, -1.6516, -2.2120,  3.1881,  0.2209,
              2.5206,  2.0306],
            [ 1.3954,  0.6975, -1.2294,  1.9845, -1.6987, -4.3017,  4.2297, -0.0582,
              0.8375,  0.2551],
            [-0.7871, -1.7181,  0.1224,  1.5132,  3.8928, -0.3244, -1.6089, -0.0074,
              0.4795, -0.6412],
            [-2.4218,  3.0650, -2.2931, -0.2870,  0.2656,  1.8578, -0.2632, -0.5617,
              0.2505,  0.9894],
            [ 1.2860,  1.2080, -3.5872, -2.2894,  1.9997, -1.7669, -3.0349,  3.4848,
              0.0548, -1.2858],
            [ 0.3793,  1.6368,  1.5087, -0.7219,  0.4359, -1.5670,  0.1816, -2.2198,
             -0.8304,  0.6905],
            [ 0.0103,  0.2055,  0.5585,  0.3061,  0.7610,  1.8408,  0.6607,  1.4976,
              1.1977,  0.0423]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.498 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
