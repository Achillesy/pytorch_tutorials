.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.5376,  6.6773,  3.3231,  5.5584,  0.2575],
            [ 5.8153,  9.2426, 14.4798,  8.9445,  2.1834],
            [ 3.1214,  8.2145,  3.0100,  7.8651, 11.0213],
            [10.4861, 10.2996,  5.1209,  8.2066,  6.3929],
            [ 4.1912,  5.5221, 10.6203,  8.8495,  3.3846],
            [10.4861,  3.9580,  9.3606,  6.8065,  6.3929],
            [ 3.1214,  7.5239,  6.2216,  5.7791, 11.0213],
            [ 5.8153,  6.9000,  0.7583,  1.1061,  2.1834]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8440, -0.5074,  0.4945,  0.3309,  0.0618,  0.0736,  0.5823,  0.8221],
            [ 0.4126,  1.0925,  1.2339,  1.0749,  1.1563,  0.4460, -0.7155, -1.5381],
            [-0.3760,  1.5574,  0.6701, -0.7802,  0.4672, -0.7720,  1.2363, -0.7963],
            [-0.2861, -0.0093, -1.9080,  0.3363,  0.0219,  0.3594, -1.0872,  0.6860],
            [ 1.1884,  0.2835, -0.7799,  1.7581,  0.3639, -0.6921,  0.0611,  0.4468],
            [ 0.8603, -1.5042, -0.7607,  0.7153,  0.5639,  1.1087,  1.5079, -1.3632],
            [-1.3230, -1.5353,  0.9201,  0.2806,  0.4835, -0.7872, -0.2092,  1.4937],
            [ 0.3889,  0.8872, -0.2551,  0.3377,  0.2435,  1.4182,  2.0238,  0.9167]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6200,  2.4488,  0.1541],
            [ 1.2621,  2.5610, -2.2108],
            [ 0.1201, -0.0883,  0.4338]], requires_grad=True), Parameter containing:
    tensor([[-0.2153]], requires_grad=True)]
    Output from the convolution:  tensor([[  5.0884,   2.8942,  -5.7491,  -4.2580,   2.0709,  -5.9126,  -3.9680,
              10.5909],
            [  3.6308,  -9.2031,  -0.0427,   6.7864,   3.8306,  -6.9290,   7.6976,
               3.2185],
            [  0.2769,  -6.2613,   3.5667,  10.8260,  -3.7140,   2.2522,   3.4696,
              -1.4515],
            [  1.0832,  -0.7999,   4.0122,   6.4728,  -1.3742,   2.0054,  -2.7086,
               3.2299],
            [ -2.0922,   5.9752,   0.3044,   1.2090,  -7.1393,   5.3786,   2.4958,
               4.0100],
            [  4.9682,   8.1791,   2.6458,   0.5925,  -4.4393,   3.4437,  -3.8489,
               2.3450],
            [  4.2131,   9.0557,  -4.6802,   5.9150,  -2.6225,   2.1323,  -7.5530,
              -7.5710],
            [  1.2847,   4.2432,  -1.6254,  12.8654,  -7.8630,  -3.5859, -12.0130,
              -1.7688]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.4982,   1.5239,  -1.7917,  -1.9645,  -4.9521,  -1.2914,  -2.8398,
              -2.2465,   2.7241,   0.1827],
            [  0.8901,   1.1519,  -2.1907,  -1.5874,  -3.7255,   0.7874,  -1.1885,
              -2.2490,   2.5047,  -2.8083],
            [  0.2808,   1.5707,   0.3697,  -3.3693,   1.6651,  -3.7115,   8.9007,
              -4.8054,  -2.4611,   3.1557],
            [  0.0151,  -3.1403,  -7.8723,  -0.8977,  -0.9663,   0.3945,   3.6758,
              -0.6089,  -4.2608,  -0.0332],
            [ -1.4169,  -5.0859,  -4.0039,  -1.6905,   0.6310,   3.5812,  -3.8486,
               5.6499,  -8.6030,   1.5581],
            [  0.9431,   1.5847,  -6.7248,  -1.2097,   1.7774,  -0.3573,  -1.4490,
               0.6706, -11.2628,   3.2959],
            [  1.3352,   3.8167,   2.4368,  -6.2410,  -2.8136,   8.8804,   3.9990,
              -3.3380,  -8.8268,   3.4489],
            [ -1.1412,  -1.2433,   7.1886, -10.5313,   0.0132,   6.5476,   2.4634,
               1.2138,  -7.1144,   3.1653],
            [ -2.5228,  -4.1056,   5.2325,  -1.1369,  -1.0619,   2.2564,   2.2408,
               1.4517,  -1.7120,  -0.5968],
            [ -0.2399,   0.2406,  -0.9306,   0.1708,   0.0283,  -0.2416,   0.2091,
               0.0857,   0.4257,  -0.0394]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.484 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
