.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5063,  5.7787,  3.7345,  7.8665,  7.3349],
            [ 4.4745,  6.6158,  8.1523,  6.3850,  9.8351],
            [ 3.6557, 12.1638,  9.9011,  4.7850,  9.1174],
            [12.2927,  8.6000, 16.3678,  9.4694, 12.7448],
            [ 4.4549,  8.6985,  2.3928,  8.3455, 12.1544],
            [12.2927,  8.8361, 17.0189, 11.3621, 12.7448],
            [ 3.6557, 12.4005, 18.1752,  4.0944,  9.1174],
            [ 4.4745,  8.8651,  4.6201,  6.1420,  9.8351]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9983,  0.2576,  0.1981, -1.7564,  2.1531,  0.2835,  0.0328, -0.4703],
            [-1.0724, -0.4532,  1.2080,  0.5141, -1.1341,  1.4842,  1.8112, -0.4801],
            [ 1.2335, -0.3469, -1.5976, -1.4162, -0.3661, -1.2328,  1.0724,  1.2784],
            [-0.9359,  0.3216, -0.7579,  2.2369, -0.8927,  1.0483, -0.0937,  1.0172],
            [ 0.3136, -1.3392,  1.0360,  0.1244,  1.6509,  0.3993, -2.0179, -1.6779],
            [ 0.6453, -0.1149, -1.3469, -0.9555,  1.0951, -0.8291, -1.1821, -0.6383],
            [ 0.2213, -1.4094,  2.9666,  1.4475, -2.2462,  0.6655,  0.9638,  2.0610],
            [-0.0158, -1.6441,  0.3999,  0.9876,  1.0107, -0.1540, -0.4307, -1.6227]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7771, -0.2696,  1.1749],
            [ 0.1759, -0.1985,  1.3884],
            [-0.2412, -1.2718, -0.8778]], requires_grad=True), Parameter containing:
    tensor([[0.0968]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.5188e+00,  2.6842e+00,  1.4966e+00,  1.4444e+00,  1.4749e+00,
             -1.2397e+00, -8.8986e-01,  1.7914e+00],
            [ 7.0248e-02,  1.0242e+00, -1.0575e+00, -7.8116e-01,  2.0946e+00,
              1.6895e+00, -1.8269e+00, -7.2333e-01],
            [-1.3405e+00,  2.8383e+00, -5.4626e+00, -4.0899e+00,  4.7236e-03,
             -2.2324e+00,  1.2397e+00, -1.1728e+00],
            [-2.2638e+00,  3.2417e+00, -1.6592e-01, -2.4576e-01,  7.9457e-01,
              3.9110e+00,  1.0976e+00, -6.9899e-01],
            [-1.3131e+00,  1.7238e+00,  4.9700e-01,  1.1265e-01, -9.0738e-01,
              3.6435e+00,  2.1631e+00,  2.0747e+00],
            [-6.0452e-01,  4.8402e+00,  9.5651e-01,  1.7405e+00, -4.5164e+00,
             -3.3889e+00, -2.0569e+00, -6.2389e+00],
            [-2.6843e+00,  1.5285e+00, -3.4213e+00,  1.3971e+00,  2.4135e+00,
             -2.6504e-01,  3.6504e+00, -2.2983e+00],
            [-2.7199e+00,  3.5304e+00,  4.2365e-01, -2.3014e+00, -2.6910e+00,
             -1.6282e+00,  8.4608e-01,  6.2924e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-9.2311e-04, -2.4582e-01,  6.0112e-02, -3.7105e-02,  6.3878e-01,
              4.3867e-01,  1.8591e+00,  1.6702e-01,  1.0904e+00,  1.4370e-01],
            [-1.8335e+00,  3.8870e-01, -5.1087e+00,  4.7004e-01, -3.9130e+00,
              1.0501e+00,  1.8247e+00,  1.1663e+00,  1.8864e+00,  1.5404e+00],
            [-3.4437e-01, -1.1610e-01, -4.4118e+00,  1.2187e-01, -8.7936e+00,
             -7.8770e-02, -4.1638e+00, -3.9224e-01, -1.5568e-01,  1.2961e+00],
            [ 1.0876e+00,  3.4474e+00,  2.4823e+00,  5.4595e+00, -2.2729e+00,
              2.0897e+00, -2.8390e+00,  1.8693e+00, -1.7215e+00,  4.5008e-01],
            [-1.7921e-01, -1.6014e+00,  2.7465e+00,  1.5824e+00,  1.3452e+00,
              2.5640e+00,  2.8073e+00, -1.1262e+00,  3.2034e+00,  1.2146e+00],
            [ 6.9649e-01, -1.4676e+00, -8.7272e-01, -1.9035e+00,  1.7074e-01,
             -8.4220e-01, -1.0643e+00, -3.9113e+00,  1.7604e-01, -3.0842e+00],
            [ 1.5138e-01,  1.2025e+00,  2.9693e+00,  1.2981e+00, -4.9487e+00,
             -1.6996e+00, -9.8983e-01, -1.6315e+00,  8.4547e-01, -7.7544e-01],
            [-1.9106e+00, -1.3963e+00, -3.1932e+00, -2.7499e-02,  6.8303e-01,
             -2.2744e+00, -1.4975e+00, -4.9513e-01,  2.9443e+00, -7.7446e-02],
            [-3.1783e-01,  4.2109e-01, -2.6092e+00,  4.0477e-01,  4.7035e+00,
              1.1810e+00,  1.0258e+00, -3.3365e-01,  1.2479e+00,  1.0390e+00],
            [ 4.9517e-01,  2.7641e+00,  2.3783e+00, -3.6115e-01,  7.9795e-01,
              1.2856e+00, -4.6559e-01, -1.4997e+00, -1.1855e+00, -2.8705e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.757 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
