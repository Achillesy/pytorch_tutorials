.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.4912,  1.7873,  7.8119, 14.8310,  8.1869],
            [12.9493, 12.3711,  8.5661,  7.3265,  7.9692],
            [ 8.2858,  7.1363, 13.9359,  4.1795,  8.5206],
            [ 5.8595,  5.0360,  4.6945,  5.4336,  7.2489],
            [ 5.7323, 14.7802,  4.9367,  5.9552,  1.5965],
            [ 5.8595,  7.4518,  5.5925,  8.7678,  7.2489],
            [ 8.2858,  8.6524, 10.8424,  2.0831,  8.5206],
            [12.9493,  3.8549,  8.0513,  7.4872,  7.9692]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0683, -0.0520,  0.1462,  0.1772, -1.1045, -0.1137,  0.9594, -0.7888],
            [ 2.3260, -0.6471,  0.4350, -0.6552, -1.5501,  0.2281, -0.0796, -0.4765],
            [ 0.2995, -0.7425, -2.3812,  1.5259,  1.6682,  1.2141,  0.3626, -0.2359],
            [ 1.2013,  0.9232,  0.3496,  0.6130, -0.2188,  1.3643,  0.2841,  0.8677],
            [ 1.0529,  1.3152,  0.8120, -0.4197,  1.5510,  1.7690,  0.3394, -0.7528],
            [-1.7553,  0.6040, -0.9747,  0.0635, -0.4337,  0.6155, -0.6164, -0.6409],
            [ 0.3461, -1.0060, -1.4720,  1.7808,  0.0994,  0.4240, -1.2025,  0.6086],
            [ 2.2652, -0.0631, -0.1155,  1.0137, -2.2898, -1.3157, -1.0833,  0.1411]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7985, -1.4644,  0.1881],
            [-1.0242,  1.4502, -0.2686],
            [-0.2973,  0.2013, -0.7966]], requires_grad=True), Parameter containing:
    tensor([[0.7101]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.8109,  0.0383,  2.7699, -0.9714, -0.0849,  0.4872,  5.0939, -3.5584],
            [-0.7206,  4.0181, -2.1654,  2.3173,  3.5153, -3.1034,  3.2502, -0.9720],
            [ 2.1007, -4.0817,  4.6760,  1.3469, -3.5956,  4.3604, -1.2742,  5.8785],
            [-0.9222,  3.8234, -1.0598,  3.8639,  2.0066,  2.0255, -0.6896, -1.6732],
            [ 4.0535,  1.1883,  0.0308, -0.6253, -1.8022,  1.0397,  1.9962,  0.8972],
            [ 0.4903, -1.1386,  0.3352,  0.8945,  2.8551, -1.2303, -1.1502,  3.8068],
            [ 0.2726,  0.1446,  0.0645, -0.1565,  1.3360, -2.4136,  5.7004, -0.7846],
            [-0.7313,  0.6494,  2.7585, -0.4064, -0.5988,  4.3491,  0.5849,  0.5470]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 7.2717e-01, -1.5824e+00,  1.4301e-02,  1.1669e+00,  4.5558e-03,
             -2.1872e-01, -9.5892e-01,  7.7931e-01, -1.4611e-01,  7.9007e-03],
            [-2.2073e+00,  3.7989e+00, -1.1281e+00,  9.8486e-01, -8.8146e-01,
              1.6521e+00,  4.5837e-01,  8.2788e-01, -2.8931e+00,  3.8515e-01],
            [ 1.0388e+00, -2.3380e+00,  4.1265e+00, -3.8689e+00,  1.7260e+00,
             -1.4134e+00, -8.9870e-01, -3.2592e+00,  5.2020e+00, -8.3299e-01],
            [ 1.9447e+00, -1.4828e+00, -1.7368e+00,  2.6099e+00,  9.0523e-01,
              8.4380e-01,  3.1427e+00, -1.0368e+00, -1.9982e+00, -1.2450e+00],
            [ 6.7334e-02, -1.0262e+00,  2.2266e+00, -5.8719e-01,  1.3912e-01,
             -1.5769e-01, -4.1305e-01,  1.1109e+00, -2.1315e-02,  8.8503e-01],
            [-3.1758e+00,  6.2808e+00, -5.3588e+00,  5.3787e+00, -1.6595e+00,
              2.5466e+00, -8.0620e-01, -2.9890e+00,  1.2999e+00, -6.4224e-01],
            [-2.3815e-01, -3.9898e-01,  3.1575e+00, -2.1624e+00,  2.2188e+00,
             -2.3147e+00,  1.3269e+00,  3.8616e+00, -2.0271e+00,  1.5524e-01],
            [ 2.3128e+00, -8.5695e-01, -1.4927e+00,  1.7203e-01,  1.3712e+00,
             -2.2197e+00,  2.2321e+00, -1.6714e+00,  2.9472e-01,  4.0774e-01],
            [-2.5440e-02, -4.2235e-01,  2.1790e+00, -8.2721e-01,  2.2013e+00,
             -1.1205e+00, -1.2633e-02, -4.2725e-02, -8.9019e-01, -2.2922e-01],
            [-1.3625e-01, -2.5328e-01, -1.9642e-01, -1.3692e+00,  1.2141e-01,
             -1.2462e+00, -9.7909e-02,  2.8872e-01, -8.8318e-02,  5.3886e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.878 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
