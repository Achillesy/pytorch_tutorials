.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.4568,  5.6763, 11.3279,  6.9286,  5.8628],
            [ 8.4365,  4.1648,  5.4280, 14.1149,  9.8377],
            [ 3.1598, 12.7289, 15.2396,  9.0696,  3.6866],
            [ 4.0737,  5.4062,  7.8898,  0.5399,  3.7910],
            [13.6788, 13.7808,  9.4934,  7.3374,  3.0732],
            [ 4.0737,  3.7196,  6.2363,  1.5856,  3.7910],
            [ 3.1598,  6.0433,  5.0921, 12.2191,  3.6866],
            [ 8.4365,  4.1163,  9.3205,  7.3116,  9.8377]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1500, -1.3571,  0.7260, -0.5014,  0.2458,  2.1593,  0.4298, -0.8251],
            [ 0.7596,  0.7059,  0.0743,  0.5675, -0.7924, -2.0365, -1.2886,  0.2844],
            [-0.2519, -0.3923, -0.5030,  2.0462,  0.3432, -1.1195,  2.9139,  0.8392],
            [-0.7308,  0.6658, -0.9470,  0.5764,  0.1730,  0.6715,  0.7899, -0.2194],
            [ 0.8278, -2.1601, -1.0845,  1.4696,  0.0469,  1.6499, -0.4684, -0.0064],
            [ 0.9640, -0.4595, -0.3940, -0.2108,  0.3173, -0.3626, -1.7726, -0.8757],
            [ 0.9185, -1.8473, -0.0502,  0.6449,  0.6688, -1.2818,  0.1268,  1.2533],
            [-0.1206, -1.2789,  0.2035, -1.8733,  0.1182, -0.5682, -0.6902, -0.3179]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0870, -1.7612,  0.5599],
            [-0.1179, -1.1223,  1.1503],
            [ 0.2910,  1.0488, -0.4847]], requires_grad=True), Parameter containing:
    tensor([[-0.3744]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.6475, -0.3778,  1.6014, -5.7298,  2.6741,  2.0873,  0.1826, -2.9597],
            [-3.1539, -1.4020, -0.8139, -5.4431,  6.5239, -6.6898,  2.9076, -3.5345],
            [-1.0702,  0.9131, -3.4837, -1.2807, -3.0976,  1.9622, -1.2574,  0.0135],
            [ 0.1752,  1.5830, -4.2388,  5.9286, -0.0802,  4.0358, -3.8459,  0.3336],
            [-6.2183,  3.2925,  2.2344,  1.9572, -0.2378, -4.6073, -1.9771, -0.3418],
            [-2.8186,  0.4456,  2.3664, -1.6553, -2.2877, -1.1592,  2.4867,  3.1690],
            [-3.4766,  7.1435, -1.1953, -3.2755,  0.1587, -0.1307, -0.7808, -1.4319],
            [-3.0228,  1.8037, -3.5707, -6.9958,  2.9485,  0.2159, -2.0969, -0.1167]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0970, -2.0161, -0.5646, -2.5948,  0.3932, -0.8645, -1.4680,  1.0506,
              0.2113, -0.1142],
            [-0.1383, -1.4020,  1.6161, -2.1186,  4.2620, -1.1895,  1.5206,  0.9080,
              0.9900, -0.5732],
            [ 0.3407,  1.8991,  2.2188, -0.8020,  2.7006,  1.5995, -1.0083, -3.3825,
             -0.2048, -0.1493],
            [ 0.1492,  2.2310,  0.7719, -0.6561,  3.6473, -2.2362, -3.5542,  2.1348,
              3.7632, -0.2231],
            [ 0.1616,  3.2249, -2.4379, -0.5788,  2.2922, -7.3937,  4.7398,  3.2131,
              1.6089, -3.2729],
            [-0.2464, -1.9519, -1.6008, -1.4046,  0.3616,  0.2051,  1.0641,  0.2515,
             -4.5484,  1.6596],
            [-0.7688, -7.0377,  4.9436,  1.1347,  1.9520,  2.1749, -2.3659, -3.8765,
              0.9809,  0.3113],
            [ 0.1394,  0.1761,  2.0747, -0.5453,  1.3971,  1.3642, -1.7550, -2.4396,
              3.1695, -0.4485],
            [ 0.8656,  3.9055, -2.3771, -2.6320,  0.5896, -1.1466,  3.4987,  0.7852,
             -2.3560,  0.6803],
            [-0.3100, -1.2315,  0.3885,  1.0493, -1.1464, -0.3651, -1.2733,  0.4428,
              0.5849, -0.2080]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.503 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
