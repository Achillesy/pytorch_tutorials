.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.7052, 13.6647,  5.5628,  6.0342,  0.0264],
            [ 4.3578,  6.0126,  4.8541,  4.2960,  9.9256],
            [12.7760,  1.4821,  6.7469,  2.3408,  8.1286],
            [ 6.5016,  4.0211,  8.0279,  2.6246,  6.1447],
            [11.7799,  2.5125,  8.4047,  5.6229,  4.1836],
            [ 6.5016,  4.4602,  3.0417,  3.3034,  6.1447],
            [12.7760, 20.3101,  7.9489,  6.1384,  8.1286],
            [ 4.3578,  5.2524,  6.4731,  1.9322,  9.9256]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3184, -0.6965, -0.5523, -0.9947, -2.0258, -1.1586, -0.1638,  0.1042],
            [ 0.9694,  0.6837,  0.7239,  0.1848, -0.2846, -0.4706, -1.9223, -0.6877],
            [-0.5521,  1.2073, -0.9045,  0.7505, -0.1831,  0.0784, -2.0326, -0.2845],
            [-0.3292, -0.2589,  0.7151,  0.4404, -0.1898,  0.3361,  0.3027,  1.4479],
            [-0.1367, -1.0295,  0.0155, -1.9671, -2.0040, -1.2809,  0.4589,  0.1437],
            [ 1.4973,  0.3005,  0.0880,  0.2974, -1.3523, -1.9134, -0.3046,  1.3061],
            [ 0.2332,  1.2048,  0.9505,  0.4863,  0.3358,  0.3042,  0.3187, -0.6862],
            [ 0.7264, -1.9539,  1.0657,  0.0787,  0.6634, -0.0277, -0.3111,  0.2161]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.3845,  1.2835,  0.2914],
            [ 0.3317,  1.3431,  1.8558],
            [ 0.1518, -0.8062,  0.2720]], requires_grad=True), Parameter containing:
    tensor([[1.1030]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.8243,  0.7236,  4.7455,  4.8120,  4.6810, -3.2180, -2.3937, -0.2404],
            [ 2.6597,  2.0190, -2.7072,  1.5817,  6.3486, -0.9499, -5.7983, -0.0145],
            [ 2.0162, -2.6543, -0.6299, -0.8212,  3.0895,  2.3866, -0.5035,  0.6192],
            [ 3.1043, -1.2314,  1.3543,  5.5843,  1.4111,  1.0389,  2.5195,  3.5886],
            [ 2.9178,  5.0135,  3.6738, -0.3867,  0.6464,  1.0801,  1.3338,  2.7124],
            [ 1.9307,  0.5945, -0.1460, -4.5950, -3.6756, -1.6131, -5.1505,  1.5487],
            [ 0.4647,  1.4341, -0.1850,  5.5844,  3.3663, -0.3016, -0.3656,  0.0659],
            [ 2.4171, -4.7447, -2.5735,  1.8529, -1.2218, -1.0229,  5.4456, -4.8047]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.4238e-01, -5.5552e-01,  8.4534e-01, -5.7803e-01, -3.1001e+00,
              1.9869e+00,  5.6444e-01,  7.3454e-02,  1.0642e+00,  1.9872e-01],
            [ 2.3619e+00, -8.1145e-01, -1.6201e+00, -3.2807e-01,  2.7968e-01,
              8.4470e-01,  7.8174e+00,  2.1586e+00,  1.0406e+00,  1.0870e+00],
            [-2.1895e+00, -9.4976e-01, -4.0963e+00, -5.4953e+00, -1.1940e+00,
              4.6418e-01, -3.1332e+00,  2.7709e-01, -5.6951e-01, -5.0721e-01],
            [-1.2714e+00,  2.7605e+00,  2.7233e+00,  3.0169e-03,  2.3956e+00,
              5.2714e+00,  1.2126e+00,  1.4465e+00,  5.7511e+00,  2.7034e+00],
            [-3.6962e+00,  2.4884e+00,  6.9577e+00,  5.5465e+00, -2.7133e+00,
              2.3173e-01,  1.6341e+00, -1.8929e+00, -2.5146e+00,  5.0685e-01],
            [ 2.3600e+00,  5.1243e+00,  4.5259e+00,  3.5024e+00, -3.1049e+00,
             -2.6142e+00,  4.2457e-02, -2.0085e+00, -6.5413e-01, -9.8221e-01],
            [-1.3629e+00, -2.9663e+00, -4.0518e+00, -1.9944e+00, -2.0568e+00,
             -5.1421e+00, -3.3168e+00,  1.0661e+00,  1.5904e+00,  1.6328e+00],
            [ 2.7680e+00, -1.2844e+00,  6.0639e+00,  1.4300e-01, -1.0173e+00,
             -9.4440e-01,  6.8708e+00,  1.6956e+00, -1.1997e+00, -7.0045e-01],
            [-4.3824e-01, -3.0658e+00, -2.8055e+00, -1.1601e+00, -3.3936e+00,
             -1.0167e+00,  3.5623e+00,  9.0051e-01, -2.9017e+00, -1.6071e+00],
            [-2.7753e-01,  1.5817e+00, -1.2786e+00,  1.1432e+00,  6.1480e-01,
             -6.0095e-01, -1.5360e+00,  1.4313e+00,  3.0166e-01, -2.1946e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.544 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
