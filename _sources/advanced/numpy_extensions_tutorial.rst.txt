.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.9143,  5.3774, 11.4260,  7.7806, 15.2437],
            [ 6.6798,  5.3621,  9.2887,  4.1815,  7.1354],
            [ 1.3599, 14.1090,  9.9437,  2.3286, 13.2982],
            [ 7.0477,  4.4935,  1.3538,  4.7172, 17.6435],
            [ 1.4473, 17.4169,  2.7335,  2.7037,  3.0796],
            [ 7.0477, 20.4174, 10.8727,  6.7545, 17.6435],
            [ 1.3599,  3.9554,  9.3468, 12.7908, 13.2982],
            [ 6.6798,  4.8229,  5.9561,  7.7199,  7.1354]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.6000e+00,  6.8097e-02, -3.9802e-01, -8.3107e-02,  1.1122e+00,
              1.5051e+00, -1.4497e+00, -1.9492e+00],
            [-1.3554e+00,  1.2365e+00, -6.7369e-01, -1.0769e+00, -2.2464e+00,
              2.5844e+00, -1.8741e-01, -2.4232e-01],
            [-4.6092e-02,  1.1389e+00,  6.7302e-02,  1.8098e-01, -7.2583e-01,
             -1.0024e+00, -2.0927e+00, -1.4320e+00],
            [-3.4494e-01,  1.8462e-01, -4.0879e+00, -4.9325e-01,  7.0452e-01,
              5.7211e-01,  1.3853e+00,  4.3767e-01],
            [-4.3564e-01,  4.3240e-01,  8.6157e-01, -3.7418e-01,  1.2914e+00,
             -1.1585e+00,  7.6630e-01,  2.0771e-03],
            [-5.7282e-01, -6.6467e-01, -5.1850e-01, -1.1808e-01,  7.0529e-01,
              7.7235e-01, -7.3467e-01, -1.0009e+00],
            [-1.0143e+00,  1.9384e+00, -1.0873e+00,  1.5731e+00, -9.9374e-01,
              5.5628e-01, -7.0304e-01,  3.1826e-01],
            [ 1.0208e+00, -2.6898e-01,  2.1213e-01, -1.1100e+00,  4.4706e-01,
             -1.9553e+00, -3.8479e-01,  5.9335e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6441, -0.1835, -0.4282],
            [ 0.5834,  0.8444,  3.1422],
            [-0.3011, -1.2687,  0.7337]], requires_grad=True), Parameter containing:
    tensor([[-0.9048]], requires_grad=True)]
    Output from the convolution:  tensor([[  3.3031,  -2.8193,  -6.9409,  -0.1823,   0.7073,   0.3202,   2.3974,
              -0.5654],
            [  0.3192,  -1.3152,  -2.0603,  -5.3315,  -8.4233,  -6.2989,  -5.3514,
              -3.2775],
            [  1.0753,   1.9074,   2.4101,  -5.1761,   1.0558,  -0.5448,  -4.2450,
              -1.0958],
            [ -2.6892,  -0.8224,   4.5334,   4.7187,   5.1190,   2.1137,   4.6554,
               5.0171],
            [ -1.1042,   0.0273,  -2.9362,   1.8253,   2.4038,  -2.2060,   0.3671,
               0.8354],
            [  1.9963,   0.5937,  -2.5310,  -2.4494,   0.0838,   0.3067,   0.1379,
               1.7431],
            [  1.0553,   0.2130,   0.7043,  -2.1103, -10.4578,  -7.8202,  -6.3804,
              -0.0513],
            [ -1.4497,  -0.2574,   2.0249,   0.8154,  -0.3790,  -1.4502,  -3.5516,
             -10.4227]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.4089,  0.5310,  1.0175, -0.6939,  0.9006, -0.7384,  0.4942,  1.2946,
             -0.7850, -0.6166],
            [-0.0439, -1.9100, -8.3617,  1.3993,  1.5343, -3.7112,  3.2939, -2.2214,
              4.9413,  4.4847],
            [ 2.6259,  5.1915,  3.5479, -0.7025, -2.0677,  4.2142,  4.5127, -4.5019,
              0.2031,  1.4481],
            [ 0.5394, -0.0786,  7.7982,  5.6594,  0.8122, -2.1441, -0.5172, -0.4839,
             -2.9236, -0.5702],
            [-0.0381, -0.6251,  2.1581,  3.1997,  4.5450, -4.7003,  2.6695,  2.9841,
             -3.6664, -0.6154],
            [-0.9359, -0.8345,  1.3846,  5.6174,  8.1757,  3.5730,  1.4818, -5.7407,
             -2.6914, -0.8062],
            [-1.0998, -1.8601, -6.1472, -4.9041, -2.2042,  2.7934,  5.0308, -3.8483,
             -3.6803, -0.7018],
            [-0.2302,  2.2029, -1.4575,  0.8311, -2.8423, -1.2247, -0.9447, -0.2230,
             -5.8179, -8.5666],
            [-0.1196,  0.7081, -1.8140,  3.3233, -1.4832,  6.2825, -6.7291,  6.1510,
              2.7347, -0.0899],
            [ 0.1432,  0.3512, -1.1839,  0.9291, -2.5846,  4.1207, -3.1190,  0.7477,
             -0.7555,  0.4128]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.841 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
