.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.9454, 17.5907,  6.7965,  5.9357,  7.0631],
            [ 0.5858, 10.2715, 10.4649, 13.5835,  2.2758],
            [ 2.3103, 11.7948, 10.6116,  5.5946, 12.7923],
            [ 3.3109,  5.6298, 12.0307,  3.5435,  5.3352],
            [ 6.5061, 11.3381,  7.9360,  6.9358,  6.6497],
            [ 3.3109,  9.5911,  3.1497,  5.8977,  5.3352],
            [ 2.3103,  5.7845, 11.6984,  7.9893, 12.7923],
            [ 0.5858, 12.2513, 12.4283,  6.5399,  2.2758]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9701, -2.4855, -0.2493,  1.1990, -0.7290,  1.0220, -0.8744,  1.4654],
            [-1.0151, -2.2262,  0.1904, -0.5532, -1.2821,  1.8445,  2.0163,  0.4895],
            [ 0.5287,  0.3339, -0.8663, -1.2000,  1.0693,  0.1565, -0.0047, -1.3053],
            [-0.7814, -0.3778, -1.5258, -3.0367,  0.3582,  2.7839,  0.5541,  0.9165],
            [-1.5190,  1.2812, -0.3706, -0.3468, -0.8650, -0.3250,  0.6259, -0.2794],
            [-0.5658,  1.1396,  0.4405,  1.2949, -0.7237, -0.1091, -0.3113, -0.1719],
            [ 0.5218, -1.4292,  0.0079,  0.0377, -0.9970, -1.5901,  0.7256, -0.2938],
            [ 0.1368, -0.8463, -1.1373, -1.1357, -0.2172,  1.8583, -0.1746,  0.9479]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1917,  1.0099, -0.5986],
            [ 0.0855,  1.0957,  0.6030],
            [-0.0953, -0.8376, -0.2366]], requires_grad=True), Parameter containing:
    tensor([[0.9875]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.7177, -1.2789,  0.8095, -2.6373, -2.0627,  0.7996,  0.9699, -0.7117],
            [-2.6388, -3.2949,  1.0397,  2.7001,  1.1380,  5.8037,  3.6247,  4.4979],
            [ 2.4832,  1.1328,  1.2789,  1.2241,  1.3513,  1.0572,  3.9977,  2.4529],
            [ 0.7359,  1.7048,  1.8779, -0.1464, -1.9807, -2.7861, -2.3756,  1.8171],
            [ 1.1334, -1.2318,  1.8941,  6.5066,  4.5550,  3.3308,  2.5972,  0.6469],
            [ 2.4834, -0.2041, -2.1384, -1.8068,  0.2537, -3.4085,  0.6996,  6.1249],
            [ 1.9481,  2.9932,  0.8240, -2.0523,  2.4024,  1.0734,  1.7650,  3.0301],
            [-0.3820,  2.9931,  4.5927,  1.8496, -3.1794,  0.9405,  1.4607,  0.8209]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0938, -0.5752, -0.2458, -0.3807,  0.3030,  1.2150, -1.2268, -1.5099,
              2.7688, -0.9601],
            [-0.3108, -1.9661,  0.1892, -0.9093, -1.2009,  1.7115,  0.3643, -4.2526,
              0.2928,  1.7145],
            [ 0.0619, -0.3164, -0.4051,  0.3175, -0.0835, -0.4871, -0.9473, -0.3843,
             -2.4181, -1.2432],
            [ 0.1017,  1.5922,  1.9651,  0.1397,  0.0382,  0.4534, -1.2832, -2.2148,
              3.0005, -0.1761],
            [-0.2153, -1.8667, -0.9517,  0.7701,  1.7328, -1.1014,  3.4988, -1.4754,
             -0.6149,  1.0396],
            [-0.2771, -1.5405,  0.1789, -3.3247,  0.1536, -3.1183, -0.7399,  3.3918,
             -0.5506, -1.4563],
            [ 0.1048, -0.1203,  0.5915,  3.7825,  3.0086,  0.1020, -2.5255,  1.2966,
              1.6254,  1.0928],
            [ 0.2456,  2.4458,  0.4276, -0.2424,  1.1062, -0.7669, -2.0908,  0.5947,
             -0.3944, -0.7336],
            [-0.0730, -0.3756,  2.3202,  2.1977,  2.0428,  2.7557,  0.4395, -1.1736,
              0.4659,  0.3475],
            [-0.0154, -0.2797, -1.4197, -1.5020, -1.9447, -1.2287,  0.6056,  0.2933,
             -0.3638, -0.1107]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.762 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
