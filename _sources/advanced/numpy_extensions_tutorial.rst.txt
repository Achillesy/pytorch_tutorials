.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.3774, 12.0357,  1.8341,  5.9211, 11.2302],
            [ 6.2127,  3.1580,  4.3269,  4.6809,  8.5976],
            [ 8.0807, 10.9788,  4.5687,  3.0366,  5.6134],
            [ 5.7360,  6.9605,  5.2714,  5.1834,  3.2301],
            [ 0.4649,  8.8834, 10.3808,  5.0271,  3.6527],
            [ 5.7360, 10.8227,  4.4531,  9.1733,  3.2301],
            [ 8.0807, 13.4291, 10.4216,  8.8433,  5.6134],
            [ 6.2127,  3.3708,  1.7454, 14.1558,  8.5976]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5418, -0.6754,  0.9767, -0.0557,  0.7351,  0.1907, -1.2816, -0.5279],
            [-1.0558, -1.4950,  1.4216,  1.2810, -0.9692,  0.7359,  0.8001, -3.0194],
            [ 0.5457,  0.4566, -0.1783, -0.7224,  0.7934, -1.2909, -0.1314, -0.1087],
            [ 0.7999,  0.0863,  0.5299,  0.1352,  0.3371, -0.5089,  1.1842,  0.1373],
            [-0.2958,  0.2945, -1.0499, -0.6500,  1.2259, -0.6590,  0.0550, -0.5275],
            [-1.6474,  1.3905,  1.1366,  1.5061,  0.6352, -0.8491, -0.5116, -1.1714],
            [-0.5720,  0.3261, -0.2365,  1.1266,  0.9665,  0.6959,  0.7778,  1.2108],
            [ 0.8747,  0.5972,  1.2396, -0.4206,  0.8290, -1.9120, -0.6725,  0.9968]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.5856,  0.8878, -1.0103],
            [-0.9416, -1.6796,  0.0691],
            [ 1.9401, -0.1725,  1.4865]], requires_grad=True), Parameter containing:
    tensor([[0.3709]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.0827,  1.8317,  1.5652, -0.5142, -2.9950, -5.1135, -1.2744,  3.8698],
            [-7.5529,  3.5239,  3.2550, -8.4198,  1.6147,  8.1831,  6.8503,  1.2435],
            [ 0.8400, -2.2432, -5.7483,  2.4051,  3.6637, -0.0285, -2.4183, -7.7111],
            [-2.3039,  6.0082, -4.5122,  2.7145,  1.0851,  1.2953, -0.5320,  3.6901],
            [-2.4726,  2.3545,  3.3959, -1.6234, -5.6146,  0.8562, -3.8161, -3.2808],
            [ 4.6609,  2.9999, -5.3429,  2.7966,  1.8268,  6.6171,  4.4532,  3.0664],
            [-2.5143, -0.6926, -0.3232,  1.9390,  4.6960, -7.5844, -1.0217, -1.8424],
            [ 0.9473, -1.2363, -4.0158, -4.3300, -3.6095, -0.2561, -1.7660,  3.8737]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1012, -0.7356, -0.2224,  0.5808, -0.1214, -1.7782, -2.1424, -3.2470,
             -1.1802,  2.2790],
            [ 0.2200,  0.4300,  0.2388, -0.7362, -0.4921, -0.3081,  4.7281,  2.3218,
             -0.2118,  2.2240],
            [-2.9038, -1.5839,  3.9492, -1.2358, -3.6011, -4.1586, -2.1821, -4.9975,
              3.6765, -3.5858],
            [ 2.6323,  2.2841, -1.4100,  0.4507,  4.7583,  2.2413,  6.7331, -3.9077,
              2.3275, -3.9821],
            [-5.0599,  2.8767,  0.3579, -6.5205, -1.9874, -5.8608, -2.2011, -5.3316,
             -4.1532,  1.5840],
            [ 1.2600, -2.4976, -2.9130,  2.8031,  5.2619, -1.7463,  7.9468, -0.8973,
              1.1729,  1.3423],
            [-1.7235,  5.6747, -0.9764,  2.5041,  0.9303, -5.7584,  3.9639, -8.8825,
             -0.1992,  0.9593],
            [-1.2445, -5.0778, -5.7740,  1.6583, -0.6792,  5.0264,  5.1680, -2.2068,
              5.9105,  0.7877],
            [-0.0594,  3.8193,  1.6886,  4.0239, -3.4065, -2.5713,  1.7905, -8.2111,
              6.1547, -4.7617],
            [-1.0800, -3.7055, -2.6878, -3.7247, -0.3028, -2.1786,  3.0044, -5.1399,
              1.8095, -3.0504]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.496 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
