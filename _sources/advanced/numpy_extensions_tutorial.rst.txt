.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.0299,  5.7205,  2.6021,  1.9022,  4.8461],
            [11.9593,  7.5346,  4.4807, 12.3803,  5.7133],
            [ 3.8030,  5.5959,  4.4198, 10.3585,  1.0673],
            [12.5017,  1.3858,  2.5042,  5.7507,  9.7039],
            [ 0.9379, 10.0056,  5.5901,  7.4014,  2.9388],
            [12.5017,  7.0362,  5.4641,  6.2481,  9.7039],
            [ 3.8030, 10.1190, 14.1944,  3.9999,  1.0673],
            [11.9593, 11.4137,  6.4935, 11.3008,  5.7133]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.3572e-01, -5.2878e-01, -6.8174e-01, -2.3823e+00, -2.1980e+00,
              7.0585e-01, -1.7102e+00,  1.0784e-01],
            [-1.2978e+00, -4.1846e-01,  8.1993e-01, -4.1905e-01, -1.4285e+00,
              3.6671e-01, -1.5621e-01,  2.1598e-03],
            [-1.9553e-01, -1.6957e+00, -3.6037e-01,  1.5236e+00, -1.1879e-01,
              2.4301e-01,  1.7391e-01,  9.8113e-02],
            [-6.7068e-01, -2.4293e-01, -1.6569e+00,  2.5484e-02,  3.3853e-01,
              1.4409e+00, -4.2816e-01,  4.3201e-01],
            [ 1.9011e+00,  1.0614e+00, -2.7259e-01, -2.1714e-01,  3.7686e-01,
             -3.8438e-01,  1.8545e+00,  1.1846e+00],
            [-1.8101e+00,  4.0199e-01,  4.4750e-01, -7.7867e-02,  4.2226e-01,
             -1.6550e+00,  1.7949e-01,  1.2309e+00],
            [ 7.7689e-01,  1.0063e+00, -9.4931e-01,  5.9350e-01, -5.7721e-01,
             -1.6734e+00,  2.4487e-01, -1.8866e-01],
            [ 6.6087e-01,  5.9066e-01,  6.0150e-01,  3.9598e-01,  3.7607e-01,
             -3.3485e-01,  1.6398e-01, -1.2844e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3468, -0.3150, -1.3648],
            [ 1.5911, -1.7651, -0.7812],
            [-0.6690,  0.4451, -1.2145]], requires_grad=True), Parameter containing:
    tensor([[0.6054]], requires_grad=True)]
    Output from the convolution:  tensor([[-6.8437, -0.6402, -3.2812, -2.2168,  3.2898,  1.0671, -0.0553, -2.5848],
            [-0.5963, -4.1246,  1.6628,  5.3013, -2.5597, -0.3977,  0.0830, -5.0575],
            [-2.9291, -2.6390,  6.3367,  1.5930, -1.3869, -0.8283, -2.4138, -5.1812],
            [ 0.3030,  0.6003, -0.5029,  3.0640,  2.8981,  4.1285, -2.7145,  0.8979],
            [ 2.2919, -2.5402,  2.6967, -2.9876,  4.6872,  3.6652,  1.0368, -1.1977],
            [-1.3546,  1.0697,  4.8659, -2.4536,  0.8669,  5.0552,  1.4865,  0.4494],
            [-2.9996,  3.7581,  1.4919, -0.7859, -0.5403,  4.7534,  0.1303, -2.4140],
            [ 1.2415, -4.6350,  2.6006,  3.6705,  0.0082,  1.6503, -1.5309, -6.3447]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0068,  0.2576, -0.2726, -1.2275, -0.1465,  0.9823,  1.2973,  0.7916,
              0.4162, -0.9749],
            [-0.0633,  1.2278, -0.3841, -1.6418, -3.4148,  0.7984,  2.0308,  3.0495,
             -1.5411, -0.0828],
            [-0.6825, -0.3315,  5.0607, -1.0312, -4.5475, -1.8853,  3.3037,  0.5618,
              1.4758, -1.7519],
            [-0.9215, -0.5165,  3.3563,  1.1518, -3.2848, -6.2521, -0.3862,  4.5047,
             -0.0957,  0.4885],
            [-0.1503,  0.8039,  2.8058,  3.3611, -4.1673, -0.6994, -4.3605,  0.5467,
              4.9796,  1.6804],
            [-2.1883,  0.5954,  3.2470,  0.8169, -0.3704, -2.4863, -1.4285, -3.0734,
              3.9373,  4.1618],
            [ 1.2101, -2.3527,  2.0864,  6.0707, -1.3283,  2.5802,  3.3753, -6.6831,
              2.0238,  4.2587],
            [ 0.5976, -1.3299, -2.7553,  2.9102,  3.8784,  2.5798, -0.9813, -3.5237,
             -0.9947,  3.3613],
            [-0.3892,  0.6763,  0.7461, -0.6723,  5.3119,  2.3829, -2.0605, -1.9166,
              0.2618,  1.3410],
            [ 0.0454,  0.0516,  0.0554,  0.8147, -0.7638,  0.6161,  0.0287, -1.2204,
             -0.0911,  0.7595]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.515 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
