.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[16.7402,  2.1486,  6.5249, 11.2313,  3.9905],
            [ 6.3894,  4.6489,  2.0285,  1.7318,  3.3309],
            [ 4.5972, 11.4875,  4.1785,  1.6423,  6.3878],
            [ 1.8238,  1.9857,  8.1460,  5.4309,  4.0741],
            [ 0.4082, 10.8121,  5.4193,  8.9335,  4.1892],
            [ 1.8238,  6.3936,  7.9553,  6.0252,  4.0741],
            [ 4.5972, 12.4296,  6.7585,  4.0095,  6.3878],
            [ 6.3894, 16.9826,  2.4395,  7.8309,  3.3309]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0987,  0.1591, -1.2812, -0.8059, -0.5531, -0.0361,  0.2477,  0.1447],
            [ 0.1952,  0.9559, -0.1895, -0.5539, -0.0502, -0.4772,  1.0224, -0.6810],
            [-0.1328, -1.4742, -0.4106, -0.7763,  0.6402,  0.2355,  1.6449,  0.3113],
            [-0.1127,  1.3691,  0.1157, -0.5196, -1.1508, -1.7464, -0.6606,  0.0277],
            [ 0.5100,  0.8504,  0.4120,  0.2727, -1.0284, -0.7258, -1.0751, -1.6497],
            [-0.1556,  0.1944, -0.3420,  0.4838,  0.0410, -0.8408, -1.1141, -0.3026],
            [-1.2201, -1.3045, -0.9970, -0.3356, -1.2760,  1.3114,  2.3760, -2.5089],
            [-1.4498, -0.4149, -1.0665, -0.0090,  0.3856, -0.8943,  0.3994, -0.6245]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8163, -0.9970, -0.9643],
            [-1.7517, -0.1980, -0.8792],
            [ 0.1195, -0.3828,  0.7779]], requires_grad=True), Parameter containing:
    tensor([[-0.4843]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.6567,  0.1861,  0.2046,  5.0361, -7.0928, -0.8344,  1.2797,  0.2241],
            [-1.0837, -2.0525, -4.9009, -7.5508,  5.2379, -2.7384,  1.9423,  2.2975],
            [-3.6628, -6.1870, -3.8533, -1.6283, -4.6416,  4.5867,  1.8847,  1.0009],
            [-2.7466,  0.6879, -4.6256,  5.0239,  4.7142,  0.5886,  2.0619, -2.5742],
            [ 0.7770,  0.6742,  3.5376, -3.4142,  1.2693, -3.9734, -3.8691, -6.5823],
            [ 0.8280, -3.1105, -4.1226,  1.4951, -1.2563,  1.2711, -3.0747, -2.5446],
            [-2.9542,  0.7776,  3.4216,  1.8056, -0.5896, -3.5121, -3.4667, -3.1823],
            [-0.8696,  1.7608, -1.2385, -0.2825, -4.1468, -0.8149, -3.0119, -2.2822]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1064,  0.7261, -1.2951,  0.2547,  2.6469, -2.9335, -1.8472,  0.3090,
              0.2162,  0.2001],
            [ 1.0074, -1.6691,  0.4379, -1.7793, -3.5830, -1.2544, -2.8756,  1.3173,
             -0.4818, -0.3013],
            [-1.0330, -2.6395, -2.5924, -0.6534, -1.1153, -1.5677,  1.5603, -1.0934,
             -0.0076, -0.1254],
            [-0.8353,  1.0853, -1.5016,  0.8507, -0.7512,  7.3084, -0.3508, -0.5554,
              0.9981,  1.9378],
            [-0.7993, -2.4402,  0.3728,  1.5123,  5.2264, -1.3465,  2.1283, -0.7974,
              2.4944,  1.4383],
            [-0.6598,  1.3639,  2.4065, -1.1114, -0.8702, -0.0942,  0.2896,  1.0126,
              0.5658,  0.5668],
            [ 1.7440, -0.3810, -3.3691, -1.8150, -2.2448,  1.5517, -1.9138,  3.0041,
              0.2589,  0.2681],
            [-1.6631,  0.9838, -6.8683, -0.4214,  3.1712,  1.0907,  2.2915, -3.3034,
              2.9857,  1.3498],
            [ 0.9368, -3.9822,  4.5336, -2.2667,  3.6221, -2.4278, -1.8321,  2.0779,
             -1.1142,  1.3427],
            [-0.0584,  0.4546, -1.5245,  2.7272, -2.1253,  0.7057, -0.6153,  0.3089,
              1.3689, -1.3720]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.500 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
