.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.9594, 12.3378, 13.4438,  6.3183, 14.2841],
            [ 2.9845, 12.3777, 10.5602,  6.4418,  9.8870],
            [ 7.7266,  7.1249,  6.1508,  7.7747, 16.0329],
            [10.4788, 13.8252, 14.8902,  7.0287, 12.9853],
            [13.8335,  8.9925,  4.1665,  1.8684,  4.0232],
            [10.4788, 13.0123, 13.5733,  2.0574, 12.9853],
            [ 7.7266,  8.6868, 15.1453,  7.2293, 16.0329],
            [ 2.9845,  5.3591,  2.8371,  2.6453,  9.8870]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5022,  1.0514, -0.5554,  1.1306,  0.3223,  1.0618, -0.1505,  1.5765],
            [-1.0955, -0.7403, -2.2476,  1.3366, -1.5698, -1.1947, -0.5589, -1.2098],
            [ 0.5837, -1.3807, -2.5692,  1.3750, -1.2524, -0.7242,  0.6230,  4.1659],
            [-1.1451, -0.2733,  0.6405, -0.0988,  2.3044,  0.4295,  0.3389, -2.1673],
            [-0.5316, -1.4777, -0.3636, -0.0303,  0.7226,  0.7468,  1.8420, -1.2815],
            [-0.8002, -1.5063, -1.6992,  2.2940, -0.4663,  0.3735, -0.8001,  1.5638],
            [ 0.0061,  1.1438, -0.0407, -0.2137,  0.3719,  0.0778, -0.8645, -0.4263],
            [ 0.9780, -0.3703, -1.3929, -0.9451,  1.1247, -0.3879, -0.8744,  0.7635]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 9.6401e-01, -5.9335e-01, -4.1944e-01],
            [-1.8013e-01,  1.2847e-01,  1.3760e+00],
            [ 4.4032e-01,  5.1056e-02, -3.8098e-04]], requires_grad=True), Parameter containing:
    tensor([[0.6431]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.4170,  0.3317,  1.4170,  0.1641,  2.5308, -0.7823,  1.8767,  3.0851],
            [-0.3743,  1.2475,  1.8305, -0.5307,  0.5423,  3.0719,  2.8500, -2.9019],
            [-0.3794,  1.6949,  0.4195, -0.0226,  3.7587, -1.0426,  0.2465, -0.9145],
            [-0.8725,  2.1910,  1.3560,  2.8426, -2.9182, -4.0369,  1.6893,  0.0942],
            [ 0.8134,  2.2819, -1.4715, -0.5040,  4.0017,  5.6154,  2.9390, -3.2598],
            [ 2.6565,  2.2348,  3.3808,  2.7225, -0.5938, -1.5834, -1.7585,  1.0786],
            [ 1.3759, -0.6567,  2.2886, -0.4141,  2.4889, -0.1756,  2.3390, -3.3188],
            [ 1.1035,  0.5311, -0.6181,  0.8788,  1.2802,  0.6693, -1.8943,  2.7632]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.5142e+00,  1.5554e+00,  1.6109e-01,  4.4121e-01, -1.3635e+00,
             -6.0643e-03,  1.5789e+00,  7.7173e-01, -1.1282e+00, -5.1497e-01],
            [ 7.9279e-01, -1.0215e+00, -9.1476e-01,  1.3278e+00, -9.6626e-03,
             -2.3681e+00, -1.4283e+00,  1.3941e-01,  2.0582e+00,  1.9229e+00],
            [-2.9377e+00,  1.2335e+00,  1.8141e+00,  7.1485e-01,  2.1002e+00,
             -6.1401e-02,  1.1958e+00, -1.8689e+00, -9.2287e-01, -8.5432e-01],
            [-1.6976e-01, -1.0182e-01, -2.3548e+00,  3.3167e-01, -2.6065e-01,
              7.9220e-01,  3.8684e+00, -2.2471e+00, -6.1016e-01,  4.5212e-01],
            [-2.3482e+00,  8.7940e-01, -1.1588e+00, -1.2301e+00,  1.7138e+00,
              1.3057e+00, -6.8823e-01, -4.3847e-01,  1.4666e+00, -6.8129e-01],
            [-5.2230e-01,  5.1663e-02, -1.8790e+00,  1.7958e-01, -5.7753e-01,
             -1.9161e+00, -6.2718e-02, -7.1708e-01,  1.9164e+00,  8.8926e-01],
            [-1.7262e+00,  1.0841e+00, -7.1145e-01,  1.5379e+00, -2.2769e+00,
             -2.8992e+00,  3.0270e+00,  2.8325e+00, -5.4571e-01, -1.7124e+00],
            [-1.1439e+00,  4.0014e-02, -1.2666e+00,  1.7270e+00,  2.1187e+00,
              2.4755e+00, -2.6024e+00, -4.3972e+00, -1.9059e-01,  1.1294e+00],
            [-2.9422e-01,  7.6885e-02, -1.6045e+00, -1.1347e-01, -1.5362e+00,
              5.4764e-01,  2.6708e+00,  1.5814e+00,  8.0766e-01,  6.7073e-02],
            [-5.2629e-01, -2.9285e-01, -3.2289e-01,  4.5080e-01,  9.4488e-01,
              4.7065e-01,  2.8469e-01,  4.9398e-02,  2.2904e-03, -1.8659e-05]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.930 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
